<?xml version="1.0"?>
<root>
  <ModuleHolder ModuleName="--Tables" File="">
    <BlockHolder BlockName="--body" BlockCode=" 
/* TYPE=TestBlock (Библиотека блоков) */
GO
/* TYPE=TestVariant (Вариант теста) */
GO
/* TYPE=XInstructor (Инструктор) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'XInstructorInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XInstructorInfo/*Инструктора*/ (
XInstructorInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='family' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
family
 VARCHAR (255) null /* Фамилия */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
name
 VARCHAR (64) null /* Имя */
go
if  not exists(select * from syscolumns where name='middleName' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
middleName
 VARCHAR (255) null /* Отчество */
go
if  not exists(select * from syscolumns where name='eMail' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
eMail varchar(255) null /* e-mail */
go
if  not exists(select * from syscolumns where name='phone' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
phone
 VARCHAR (20) null /* Телефон */
go
if  not exists(select * from syscolumns where name='photoUrl' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
photoUrl
 VARCHAR (255) null /* Фотография */
go
if  not exists(select * from syscolumns where name='localPhone' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
localPhone
 VARCHAR (20) null /* Местный телефон */
go
go
-- drop extra columns from generated table: XInstructorInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XInstructorInfo')
and name not in('XInstructorInfoID','family','name','middleName','eMail','phone','photoUrl','localPhone')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XInstructorInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XInstructorInfo') and xtype='PK' and type='K')
ALTER TABLE XInstructorInfo DROP CONSTRAINT pk_XInstructorInfo
GO
alter table XInstructorInfo add constraint pk_XInstructorInfo primary key (XInstructorInfoID)

GO
/*Статусы*/
if not exists (select * from sysobjects where id = object_id(N'XInstructorStatus') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XInstructorStatus/**/ (
XInstructorStatusid uniqueidentifier not null rowguidcol default ( newid())  
,XInstructorInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theStatus' and id=object_id(N'XInstructorStatus'))
alter table XInstructorStatus add 
theStatus
 UNIQUEIDENTIFIER null /* Статус */
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'XInstructorStatus'))
alter table XInstructorStatus add 
sequence
 integer null /* Порядок */
go
go
-- drop extra columns from generated table: XInstructorStatus
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XInstructorStatus')
and name not in('XInstructorStatusID','XInstructorInfoID','theStatus','sequence')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XInstructorStatus drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XInstructorStatus') and xtype='PK' and type='K')
ALTER TABLE XInstructorStatus DROP CONSTRAINT pk_XInstructorStatus
GO
alter table XInstructorStatus add constraint pk_XInstructorStatus primary key (XInstructorStatusID)

GO
/* TYPE=XCourse (Курс) */
GO
/*Описание курса*/
if not exists (select * from sysobjects where id = object_id(N'XCourseDesc') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XCourseDesc/*Общая информация по курсу*/ (
XCourseDescid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='courseCode' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
courseCode
 VARCHAR (16) null /* Код курса */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='subject' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
subject
 UNIQUEIDENTIFIER null /* Предмет */
go
if  not exists(select * from syscolumns where name='imageUrl' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
imageUrl
 VARCHAR (255) null /* Картинка */
go
if  not exists(select * from syscolumns where name='theLevel' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
theLevel
 UNIQUEIDENTIFIER null /* Уровень сложности */
go
if  not exists(select * from syscolumns where name='certification' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
certification
 UNIQUEIDENTIFIER null /* Сертификация */
go
if  not exists(select * from syscolumns where name='theInstructor' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
theInstructor
 UNIQUEIDENTIFIER null /* Инструктор */
go
if  not exists(select * from syscolumns where name='courseDescription' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
courseDescription
 VARCHAR (4096) null /* Описание */
go
if  not exists(select * from syscolumns where name='studentGuide' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
studentGuide
 VARCHAR (4096) null /* Методические указания */
go
if  not exists(select * from syscolumns where name='labGuide' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
labGuide
 TEXT null /* Лабораторные работы */
go
if  not exists(select * from syscolumns where name='price' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
price
 float null /* Цена */
go
if  not exists(select * from syscolumns where name='isActive' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
isActive
 integer null 
 check (isActive in ( 1/* Да */
, 0/* Нет */ )) /* Активный курс */
go
if  not exists(select * from syscolumns where name='isOffline' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
isOffline
 integer null 
 check (isOffline in ( 1/* Да */
, 0/* Нет */ )) /* Оффлайн курс */
go
if  not exists(select * from syscolumns where name='isOnline' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
isOnline
 integer null 
 check (isOnline in ( 1/* Да */
, 0/* Нет */ )) /* Онлайн курс */
go
go
-- drop extra columns from generated table: XCourseDesc
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XCourseDesc')
and name not in('XCourseDescID','courseCode','name','subject','imageUrl','theLevel','certification','theInstructor','courseDescription','studentGuide','labGuide','price','isActive','isOffline','isOnline')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XCourseDesc drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XCourseDesc') and xtype='PK' and type='K')
ALTER TABLE XCourseDesc DROP CONSTRAINT pk_XCourseDesc
GO
alter table XCourseDesc add constraint pk_XCourseDesc primary key (XCourseDescID)

GO
/*Модули курса*/
if not exists (select * from sysobjects where id = object_id(N'XCourseModule') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XCourseModule/*Модули курса*/ (
XCourseModuleid uniqueidentifier not null rowguidcol default ( newid())  
,XCourseDescID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='moduleNo' and id=object_id(N'XCourseModule'))
alter table XCourseModule add 
moduleNo
 integer null /* Номер по порядку */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XCourseModule'))
alter table XCourseModule add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='info' and id=object_id(N'XCourseModule'))
alter table XCourseModule add 
info
 VARCHAR (4096) null /* Описание */
go
if  not exists(select * from syscolumns where name='reglament' and id=object_id(N'XCourseModule'))
alter table XCourseModule add 
reglament
 VARCHAR (4096) null /* Регламент */
go
go
-- drop extra columns from generated table: XCourseModule
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XCourseModule')
and name not in('XCourseModuleID','XCourseDescID','moduleNo','name','info','reglament')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XCourseModule drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XCourseModule') and xtype='PK' and type='K')
ALTER TABLE XCourseModule DROP CONSTRAINT pk_XCourseModule
GO
alter table XCourseModule add constraint pk_XCourseModule primary key (XCourseModuleID)

GO
/*Глава*/
if not exists (select * from sysobjects where id = object_id(N'XChepter') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XChepter/*Глава курса*/ (
XCourseModuleID uniqueidentifier not null,
XChepterid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'XChepter'))
alter table XChepter add 
sequence
 integer null /* Порядок прохождения */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XChepter'))
alter table XChepter add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='mainText' and id=object_id(N'XChepter'))
alter table XChepter add 
mainText
 VARCHAR (4096) null /* Основной текст */
go
if  not exists(select * from syscolumns where name='refFile' and id=object_id(N'XChepter'))
alter table XChepter add 
refFile
 VARCHAR (255) null /* Файл */
go
go
-- drop extra columns from generated table: XChepter
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XChepter')
and name not in('XCourseModuleID','XChepterID','sequence','name','mainText','refFile')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XChepter drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XChepter') and xtype='PK' and type='K')
ALTER TABLE XChepter DROP CONSTRAINT pk_XChepter
GO
alter table XChepter add constraint pk_XChepter primary key (XChepterID)

GO
/*Цены*/
if not exists (select * from sysobjects where id = object_id(N'XCoursePrice') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XCoursePrice/*Цена курса*/ (
XCoursePriceid uniqueidentifier not null rowguidcol default ( newid())  
,XCourseDescID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='priceDate' and id=object_id(N'XCoursePrice'))
alter table XCoursePrice add 
priceDate
 DATETIME null /* Дата назначения цены */
go
if  not exists(select * from syscolumns where name='price' and id=object_id(N'XCoursePrice'))
alter table XCoursePrice add 
price
 float null /* Цена */
go
go
-- drop extra columns from generated table: XCoursePrice
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XCoursePrice')
and name not in('XCoursePriceID','XCourseDescID','priceDate','price')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XCoursePrice drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XCoursePrice') and xtype='PK' and type='K')
ALTER TABLE XCoursePrice DROP CONSTRAINT pk_XCoursePrice
GO
alter table XCoursePrice add constraint pk_XCoursePrice primary key (XCoursePriceID)

GO
/* TYPE=STDNumerator (Нумератор) */
GO
/* TYPE=MTZwp (Описание АРМ) */
GO
/* TYPE=MTZJrnl (Описание журнала) */
GO
/* TYPE=MTZRprt (Описание отчета) */
GO
/* TYPE=MTZFltr (Описание фильтра) */
GO
/* TYPE=Organization (Организация) */
GO
/* TYPE=TestPerson (Персонал) */
GO
/* TYPE=XUser (Пользователь) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'XUserInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserInfo/*Обучающийся*/ (
XUserInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='family' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
family
 VARCHAR (255) null /* Фамилия */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
name
 VARCHAR (64) null /* Имя */
go
if  not exists(select * from syscolumns where name='middleName' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
middleName
 VARCHAR (255) null /* Отчество */
go
if  not exists(select * from syscolumns where name='login' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
login
 VARCHAR (64) null /* Имя для входа */
go
if  not exists(select * from syscolumns where name='password' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
password varchar(80) null /* Пароль */
go
if  not exists(select * from syscolumns where name='photoUrl' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
photoUrl
 VARCHAR (255) null /* Фотография */
go
if  not exists(select * from syscolumns where name='eMail' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
eMail varchar(255) null /* e-mail */
go
if  not exists(select * from syscolumns where name='phone' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
phone
 VARCHAR (20) null /* Телефон */
go
if  not exists(select * from syscolumns where name='birthday' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
birthday
 DATETIME null /* Дата рождения */
go
if  not exists(select * from syscolumns where name='country' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
country
 VARCHAR (255) null /* Страна */
go
if  not exists(select * from syscolumns where name='city' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
city
 VARCHAR (255) null /* Город */
go
if  not exists(select * from syscolumns where name='nativeLanguage' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
nativeLanguage
 VARCHAR (255) null /* Родной язык */
go
if  not exists(select * from syscolumns where name='userSkill' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
userSkill
 UNIQUEIDENTIFIER null /* Уровень владения русским */
go
if  not exists(select * from syscolumns where name='learningYears' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
learningYears
 integer null /* Количество лет изучения русского */
go
if  not exists(select * from syscolumns where name='learningGoal' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
learningGoal
 VARCHAR (255) null /* Цель обучения */
go
if  not exists(select * from syscolumns where name='pIaccept' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
pIaccept
 integer null 
 check (pIaccept in ( 1/* Да */
, 0/* Нет */ )) /* Принята политика ПД */
go
if  not exists(select * from syscolumns where name='hRaccept' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
hRaccept
 integer null 
 check (hRaccept in ( 1/* Да */
, 0/* Нет */ )) /* Принята политика HR */
go
go
-- drop extra columns from generated table: XUserInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserInfo')
and name not in('XUserInfoID','family','name','middleName','login','password','photoUrl','eMail','phone','birthday','country','city','nativeLanguage','userSkill','learningYears','learningGoal','pIaccept','hRaccept')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserInfo') and xtype='PK' and type='K')
ALTER TABLE XUserInfo DROP CONSTRAINT pk_XUserInfo
GO
alter table XUserInfo add constraint pk_XUserInfo primary key (XUserInfoID)

GO
/*Подписки*/
if not exists (select * from sysobjects where id = object_id(N'XSubscription') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XSubscription/*Подписки пользователя*/ (
XSubscriptionid uniqueidentifier not null rowguidcol default ( newid())  
,XUserInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='subscriptionType' and id=object_id(N'XSubscription'))
alter table XSubscription add 
subscriptionType
 UNIQUEIDENTIFIER null /* Тип подписки */
go
if  not exists(select * from syscolumns where name='fromDate' and id=object_id(N'XSubscription'))
alter table XSubscription add 
fromDate
 DATETIME null /* С */
go
if  not exists(select * from syscolumns where name='toDate' and id=object_id(N'XSubscription'))
alter table XSubscription add 
toDate
 DATETIME null /* По */
go
go
-- drop extra columns from generated table: XSubscription
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XSubscription')
and name not in('XSubscriptionID','XUserInfoID','subscriptionType','fromDate','toDate')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XSubscription drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XSubscription') and xtype='PK' and type='K')
ALTER TABLE XSubscription DROP CONSTRAINT pk_XSubscription
GO
alter table XSubscription add constraint pk_XSubscription primary key (XSubscriptionID)

GO
/*Покупки пользователя*/
if not exists (select * from sysobjects where id = object_id(N'XUserPurchase') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserPurchase/*Покупки  пользователя*/ (
XUserPurchaseid uniqueidentifier not null rowguidcol default ( newid())  
,XUserInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theCourse' and id=object_id(N'XUserPurchase'))
alter table XUserPurchase add 
theCourse
 UNIQUEIDENTIFIER null /* Курс */
go
go
-- drop extra columns from generated table: XUserPurchase
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserPurchase')
and name not in('XUserPurchaseID','XUserInfoID','theCourse')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserPurchase drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserPurchase') and xtype='PK' and type='K')
ALTER TABLE XUserPurchase DROP CONSTRAINT pk_XUserPurchase
GO
alter table XUserPurchase add constraint pk_XUserPurchase primary key (XUserPurchaseID)

GO
/*Результаты обучения*/
if not exists (select * from sysobjects where id = object_id(N'XUserProfile') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserProfile/*Результаты прохождения  курсов*/ (
XUserProfileid uniqueidentifier not null rowguidcol default ( newid())  
,XUserInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theCourse' and id=object_id(N'XUserProfile'))
alter table XUserProfile add 
theCourse
 UNIQUEIDENTIFIER null /* Курс */
go
if  not exists(select * from syscolumns where name='complModule' and id=object_id(N'XUserProfile'))
alter table XUserProfile add 
complModule
 UNIQUEIDENTIFIER null /* Завершенный модуль */
go
go
-- drop extra columns from generated table: XUserProfile
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserProfile')
and name not in('XUserProfileID','XUserInfoID','theCourse','complModule')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserProfile drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserProfile') and xtype='PK' and type='K')
ALTER TABLE XUserProfile DROP CONSTRAINT pk_XUserProfile
GO
alter table XUserProfile add constraint pk_XUserProfile primary key (XUserProfileID)

GO
/*Запись на  курс*/
if not exists (select * from sysobjects where id = object_id(N'XUserRegistartion') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserRegistartion/*Запись на  курс*/ (
XUserRegistartionid uniqueidentifier not null rowguidcol default ( newid())  
,XUserInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theCourseSchedule' and id=object_id(N'XUserRegistartion'))
alter table XUserRegistartion add 
theCourseSchedule
 UNIQUEIDENTIFIER null /* Запись на  курс */
go
go
-- drop extra columns from generated table: XUserRegistartion
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserRegistartion')
and name not in('XUserRegistartionID','XUserInfoID','theCourseSchedule')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserRegistartion drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserRegistartion') and xtype='PK' and type='K')
ALTER TABLE XUserRegistartion DROP CONSTRAINT pk_XUserRegistartion
GO
alter table XUserRegistartion add constraint pk_XUserRegistartion primary key (XUserRegistartionID)

GO
/*Корзина*/
if not exists (select * from sysobjects where id = object_id(N'XUserCart') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserCart/*Текущее состояние  корзины*/ (
XUserCartid uniqueidentifier not null rowguidcol default ( newid())  
,XUserInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theCourse' and id=object_id(N'XUserCart'))
alter table XUserCart add 
theCourse
 UNIQUEIDENTIFIER null /* Курс */
go
if  not exists(select * from syscolumns where name='subscriptionType' and id=object_id(N'XUserCart'))
alter table XUserCart add 
subscriptionType
 UNIQUEIDENTIFIER null /* Тип подписки */
go
go
-- drop extra columns from generated table: XUserCart
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserCart')
and name not in('XUserCartID','XUserInfoID','theCourse','subscriptionType')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserCart drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserCart') and xtype='PK' and type='K')
ALTER TABLE XUserCart DROP CONSTRAINT pk_XUserCart
GO
alter table XUserCart add constraint pk_XUserCart primary key (XUserCartID)

GO
/* TYPE=XEDUPROG (Программы обучения) */
GO
/* TYPE=XSchedule (Расписание курсов) */
GO
/*Расписание*/
if not exists (select * from sysobjects where id = object_id(N'XScheduleItem') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XScheduleItem/*Расписание проведения  курса*/ (
XScheduleItemid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='theCourse' and id=object_id(N'XScheduleItem'))
alter table XScheduleItem add 
theCourse
 UNIQUEIDENTIFIER null /* Курс */
go
if  not exists(select * from syscolumns where name='theInstructor' and id=object_id(N'XScheduleItem'))
alter table XScheduleItem add 
theInstructor
 UNIQUEIDENTIFIER null /* Инструктор */
go
if  not exists(select * from syscolumns where name='fromDate' and id=object_id(N'XScheduleItem'))
alter table XScheduleItem add 
fromDate
 DATETIME null /* С */
go
if  not exists(select * from syscolumns where name='toDate' and id=object_id(N'XScheduleItem'))
alter table XScheduleItem add 
toDate
 DATETIME null /* По */
go
go
-- drop extra columns from generated table: XScheduleItem
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XScheduleItem')
and name not in('XScheduleItemID','theCourse','theInstructor','fromDate','toDate')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XScheduleItem drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XScheduleItem') and xtype='PK' and type='K')
ALTER TABLE XScheduleItem DROP CONSTRAINT pk_XScheduleItem
GO
alter table XScheduleItem add constraint pk_XScheduleItem primary key (XScheduleItemID)

GO
/*Замещения*/
if not exists (select * from sysobjects where id = object_id(N'XScheduleSubst') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XScheduleSubst/*Замещение основного инструктора*/ (
XScheduleSubstid uniqueidentifier not null rowguidcol default ( newid())  
,XScheduleItemID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theInstructor' and id=object_id(N'XScheduleSubst'))
alter table XScheduleSubst add 
theInstructor
 UNIQUEIDENTIFIER null /* Инструктор */
go
if  not exists(select * from syscolumns where name='fromDate' and id=object_id(N'XScheduleSubst'))
alter table XScheduleSubst add 
fromDate
 DATETIME null /* С */
go
if  not exists(select * from syscolumns where name='toDate' and id=object_id(N'XScheduleSubst'))
alter table XScheduleSubst add 
toDate
 DATETIME null /* По */
go
go
-- drop extra columns from generated table: XScheduleSubst
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XScheduleSubst')
and name not in('XScheduleSubstID','XScheduleItemID','theInstructor','fromDate','toDate')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XScheduleSubst drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XScheduleSubst') and xtype='PK' and type='K')
ALTER TABLE XScheduleSubst DROP CONSTRAINT pk_XScheduleSubst
GO
alter table XScheduleSubst add constraint pk_XScheduleSubst primary key (XScheduleSubstID)

GO
/* TYPE=MTZExt (Расширения функциональности) */
GO
/* TYPE=Certification (Сертификация) */
GO
/* TYPE=MTZMetaModel (Спец.: Метамодель системы) */
GO
/* TYPE=MTZSystem (Спец.: Системные данные) */
GO
/* TYPE=XDict (Справочник) */
GO
/*Уровень сложности*/
if not exists (select * from sysobjects where id = object_id(N'XLevel') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XLevel/*Уровень сложности */ (
XLevelid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XLevel'))
alter table XLevel add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: XLevel
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XLevel')
and name not in('XLevelID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XLevel drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XLevel') and xtype='PK' and type='K')
ALTER TABLE XLevel DROP CONSTRAINT pk_XLevel
GO
alter table XLevel add constraint pk_XLevel primary key (XLevelID)

GO
/*Тематика*/
if not exists (select * from sysobjects where id = object_id(N'XSubject') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XSubject/*Предмет*/ (
XSubjectid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XSubject'))
alter table XSubject add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: XSubject
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XSubject')
and name not in('XSubjectID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XSubject drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XSubject') and xtype='PK' and type='K')
ALTER TABLE XSubject DROP CONSTRAINT pk_XSubject
GO
alter table XSubject add constraint pk_XSubject primary key (XSubjectID)

GO
/*Статус инструктора*/
if not exists (select * from sysobjects where id = object_id(N'XStatus') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XStatus/*Звание, категория инструктора и т.п.*/ (
XStatusid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XStatus'))
alter table XStatus add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: XStatus
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XStatus')
and name not in('XStatusID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XStatus drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XStatus') and xtype='PK' and type='K')
ALTER TABLE XStatus DROP CONSTRAINT pk_XStatus
GO
alter table XStatus add constraint pk_XStatus primary key (XStatusID)

GO
/*Тип подписки*/
if not exists (select * from sysobjects where id = object_id(N'XSubscriptionType') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XSubscriptionType/*Тип подписки*/ (
XSubscriptionTypeid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XSubscriptionType'))
alter table XSubscriptionType add 
name
 VARCHAR (256) null /* Название */
go
if  not exists(select * from syscolumns where name='timerange' and id=object_id(N'XSubscriptionType'))
alter table XSubscriptionType add 
timerange
 integer null /* Длительность подписки */
go
go
-- drop extra columns from generated table: XSubscriptionType
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XSubscriptionType')
and name not in('XSubscriptionTypeID','name','timerange')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XSubscriptionType drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XSubscriptionType') and xtype='PK' and type='K')
ALTER TABLE XSubscriptionType DROP CONSTRAINT pk_XSubscriptionType
GO
alter table XSubscriptionType add constraint pk_XSubscriptionType primary key (XSubscriptionTypeID)

GO
/*Сертификаты*/
if not exists (select * from sysobjects where id = object_id(N'XCert') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XCert/*Сертификаты*/ (
XCertid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XCert'))
alter table XCert add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: XCert
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XCert')
and name not in('XCertID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XCert drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XCert') and xtype='PK' and type='K')
ALTER TABLE XCert DROP CONSTRAINT pk_XCert
GO
alter table XCert add constraint pk_XCert primary key (XCertID)

GO
/*Уровень владения языком*/
if not exists (select * from sysobjects where id = object_id(N'XUserSkillLevel') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserSkillLevel/*Уровень владения языком*/ (
XUserSkillLevelid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XUserSkillLevel'))
alter table XUserSkillLevel add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: XUserSkillLevel
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserSkillLevel')
and name not in('XUserSkillLevelID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserSkillLevel drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserSkillLevel') and xtype='PK' and type='K')
ALTER TABLE XUserSkillLevel DROP CONSTRAINT pk_XUserSkillLevel
GO
alter table XUserSkillLevel add constraint pk_XUserSkillLevel primary key (XUserSkillLevelID)

GO
/* TYPE=MTZUsers (Справочник: пользователи) */
GO
/* TYPE=Dictionary (Справочники) */
GO
/* TYPE=Test (Структура теста) */
GO
/* TYPE=CheckForm (Форма оценки) */
GO
/* TYPE=Exam (Экзамен) */
GO
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--ForeignKey" BlockCode=" 
if exists(select * from sysobjects where id=object_id(N'fk_128ac9a4e5c64ea9a7427f7d98b28e9f') and type='F')
ALTER TABLE XChepter DROP CONSTRAINT fk_128ac9a4e5c64ea9a7427f7d98b28e9f
GO
alter table XChepter add constraint fk_128ac9a4e5c64ea9a7427f7d98b28e9f foreign key(XCourseModuleID) references XCourseModule (XCourseModuleID)

GO
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--Index" BlockCode=" 
if exists (select * from sysindexes where name = N'parent_XChepter' and id = object_id(N'XChepter'))
drop index XChepter.parent_XChepter
GO
create index parent_XChepter on XChepter(XCourseModuleID)

GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--FunctionsHeader" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 

if exists (select * from sysobjects where id = object_id(N'XInstructorInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XInstructorInfo_BRIEF_F
GO
create function XInstructorInfo_BRIEF_F  (
 @XInstructorInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XInstructorInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XInstructorInfo_MREF_F
GO
create function XInstructorInfo_MREF_F  (
 @XInstructorInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XInstructorStatus_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XInstructorStatus_BRIEF_F
GO
create function XInstructorStatus_BRIEF_F  (
 @XInstructorStatusid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XInstructorStatus_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XInstructorStatus_MREF_F
GO
create function XInstructorStatus_MREF_F  (
 @XInstructorStatus_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCourseDesc_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCourseDesc_BRIEF_F
GO
create function XCourseDesc_BRIEF_F  (
 @XCourseDescid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCourseDesc_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCourseDesc_MREF_F
GO
create function XCourseDesc_MREF_F  (
 @XCourseDesc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCourseModule_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCourseModule_BRIEF_F
GO
create function XCourseModule_BRIEF_F  (
 @XCourseModuleid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCourseModule_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCourseModule_MREF_F
GO
create function XCourseModule_MREF_F  (
 @XCourseModule_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XChepter_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XChepter_BRIEF_F
GO
create function XChepter_BRIEF_F  (
 @XChepterid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XChepter_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XChepter_MREF_F
GO
create function XChepter_MREF_F  (
 @XChepter_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCoursePrice_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCoursePrice_BRIEF_F
GO
create function XCoursePrice_BRIEF_F  (
 @XCoursePriceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCoursePrice_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCoursePrice_MREF_F
GO
create function XCoursePrice_MREF_F  (
 @XCoursePrice_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserInfo_BRIEF_F
GO
create function XUserInfo_BRIEF_F  (
 @XUserInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserInfo_MREF_F
GO
create function XUserInfo_MREF_F  (
 @XUserInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubscription_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubscription_BRIEF_F
GO
create function XSubscription_BRIEF_F  (
 @XSubscriptionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubscription_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubscription_MREF_F
GO
create function XSubscription_MREF_F  (
 @XSubscription_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserPurchase_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserPurchase_BRIEF_F
GO
create function XUserPurchase_BRIEF_F  (
 @XUserPurchaseid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserPurchase_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserPurchase_MREF_F
GO
create function XUserPurchase_MREF_F  (
 @XUserPurchase_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserProfile_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserProfile_BRIEF_F
GO
create function XUserProfile_BRIEF_F  (
 @XUserProfileid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserProfile_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserProfile_MREF_F
GO
create function XUserProfile_MREF_F  (
 @XUserProfile_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserRegistartion_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserRegistartion_BRIEF_F
GO
create function XUserRegistartion_BRIEF_F  (
 @XUserRegistartionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserRegistartion_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserRegistartion_MREF_F
GO
create function XUserRegistartion_MREF_F  (
 @XUserRegistartion_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserCart_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserCart_BRIEF_F
GO
create function XUserCart_BRIEF_F  (
 @XUserCartid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserCart_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserCart_MREF_F
GO
create function XUserCart_MREF_F  (
 @XUserCart_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XScheduleItem_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XScheduleItem_BRIEF_F
GO
create function XScheduleItem_BRIEF_F  (
 @XScheduleItemid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XScheduleItem_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XScheduleItem_MREF_F
GO
create function XScheduleItem_MREF_F  (
 @XScheduleItem_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XScheduleSubst_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XScheduleSubst_BRIEF_F
GO
create function XScheduleSubst_BRIEF_F  (
 @XScheduleSubstid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XScheduleSubst_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XScheduleSubst_MREF_F
GO
create function XScheduleSubst_MREF_F  (
 @XScheduleSubst_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XLevel_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XLevel_BRIEF_F
GO
create function XLevel_BRIEF_F  (
 @XLevelid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XLevel_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XLevel_MREF_F
GO
create function XLevel_MREF_F  (
 @XLevel_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubject_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubject_BRIEF_F
GO
create function XSubject_BRIEF_F  (
 @XSubjectid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubject_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubject_MREF_F
GO
create function XSubject_MREF_F  (
 @XSubject_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XStatus_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XStatus_BRIEF_F
GO
create function XStatus_BRIEF_F  (
 @XStatusid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XStatus_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XStatus_MREF_F
GO
create function XStatus_MREF_F  (
 @XStatus_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubscriptionType_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubscriptionType_BRIEF_F
GO
create function XSubscriptionType_BRIEF_F  (
 @XSubscriptionTypeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubscriptionType_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubscriptionType_MREF_F
GO
create function XSubscriptionType_MREF_F  (
 @XSubscriptionType_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCert_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCert_BRIEF_F
GO
create function XCert_BRIEF_F  (
 @XCertid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCert_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCert_MREF_F
GO
create function XCert_MREF_F  (
 @XCert_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserSkillLevel_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserSkillLevel_BRIEF_F
GO
create function XUserSkillLevel_BRIEF_F  (
 @XUserSkillLevelid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserSkillLevel_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserSkillLevel_MREF_F
GO
create function XUserSkillLevel_MREF_F  (
 @XUserSkillLevel_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Functions" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 

alter function XInstructorInfo_BRIEF_F  (
 @XInstructorInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XInstructorInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XInstructorInfo where XInstructorInfoID=@XInstructorInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), family),'')) + '; '
  from XInstructorInfo  where  XInstructorInfoID = @XInstructorInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XInstructorInfo  where  XInstructorInfoID = @XInstructorInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), middleName),'')) + '; '
  from XInstructorInfo  where  XInstructorInfoID = @XInstructorInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XInstructorInfo_MREF_F  (
 @XInstructorInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XInstructorInfo_BRIEF_F(XInstructorInfoID, @Lang)  from XInstructorInfo
where @XInstructorInfo_ref like '%'+convert(varchar(38),XInstructorInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XInstructorStatus_BRIEF_F  (
 @XInstructorStatusid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XInstructorStatusid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XInstructorStatus where XInstructorStatusID=@XInstructorStatusID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theStatus
  from XInstructorStatus  where  XInstructorStatusID = @XInstructorStatusID 
 select @tmpBrief= dbo.XStatus_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XInstructorStatus_MREF_F  (
 @XInstructorStatus_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XInstructorStatus_BRIEF_F(XInstructorStatusID, @Lang)  from XInstructorStatus
where @XInstructorStatus_ref like '%'+convert(varchar(38),XInstructorStatusID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XCourseDesc_BRIEF_F  (
 @XCourseDescid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XCourseDescid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XCourseDesc where XCourseDescID=@XCourseDescID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), courseCode),'')) + '; '
  from XCourseDesc  where  XCourseDescID = @XCourseDescID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XCourseDesc  where  XCourseDescID = @XCourseDescID 
select @tmpID =  theInstructor
  from XCourseDesc  where  XCourseDescID = @XCourseDescID 
 select @tmpBrief= dbo.XInstructorInfo_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), courseDescription),'')) + '; '
  from XCourseDesc  where  XCourseDescID = @XCourseDescID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XCourseDesc_MREF_F  (
 @XCourseDesc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XCourseDesc_BRIEF_F(XCourseDescID, @Lang)  from XCourseDesc
where @XCourseDesc_ref like '%'+convert(varchar(38),XCourseDescID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XCourseModule_BRIEF_F  (
 @XCourseModuleid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XCourseModuleid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XCourseModule where XCourseModuleID=@XCourseModuleID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), moduleNo),'')) + '; '
  from XCourseModule  where  XCourseModuleID = @XCourseModuleID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XCourseModule  where  XCourseModuleID = @XCourseModuleID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XCourseModule_MREF_F  (
 @XCourseModule_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XCourseModule_BRIEF_F(XCourseModuleID, @Lang)  from XCourseModule
where @XCourseModule_ref like '%'+convert(varchar(38),XCourseModuleID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XChepter_BRIEF_F  (
 @XChepterid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XChepterid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XChepter where XChepterID=@XChepterID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XChepter  where  XChepterID = @XChepterID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XChepter_MREF_F  (
 @XChepter_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XChepter_BRIEF_F(XChepterID, @Lang)  from XChepter
where @XChepter_ref like '%'+convert(varchar(38),XChepterID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XCoursePrice_BRIEF_F  (
 @XCoursePriceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XCoursePriceid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XCoursePrice where XCoursePriceID=@XCoursePriceID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), priceDate),'')) + '; '
  from XCoursePrice  where  XCoursePriceID = @XCoursePriceID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), price),'')) + '; '
  from XCoursePrice  where  XCoursePriceID = @XCoursePriceID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XCoursePrice_MREF_F  (
 @XCoursePrice_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XCoursePrice_BRIEF_F(XCoursePriceID, @Lang)  from XCoursePrice
where @XCoursePrice_ref like '%'+convert(varchar(38),XCoursePriceID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserInfo_BRIEF_F  (
 @XUserInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserInfo where XUserInfoID=@XUserInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), family),'')) + '; '
  from XUserInfo  where  XUserInfoID = @XUserInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XUserInfo  where  XUserInfoID = @XUserInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), middleName),'')) + '; '
  from XUserInfo  where  XUserInfoID = @XUserInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserInfo_MREF_F  (
 @XUserInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserInfo_BRIEF_F(XUserInfoID, @Lang)  from XUserInfo
where @XUserInfo_ref like '%'+convert(varchar(38),XUserInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XSubscription_BRIEF_F  (
 @XSubscriptionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XSubscriptionid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XSubscription where XSubscriptionID=@XSubscriptionID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  subscriptionType
  from XSubscription  where  XSubscriptionID = @XSubscriptionID 
 select @tmpBrief= dbo.XSubscriptionType_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XSubscription_MREF_F  (
 @XSubscription_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XSubscription_BRIEF_F(XSubscriptionID, @Lang)  from XSubscription
where @XSubscription_ref like '%'+convert(varchar(38),XSubscriptionID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserPurchase_BRIEF_F  (
 @XUserPurchaseid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserPurchaseid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserPurchase where XUserPurchaseID=@XUserPurchaseID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCourse
  from XUserPurchase  where  XUserPurchaseID = @XUserPurchaseID 
 select @tmpBrief= dbo.XCourseDesc_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserPurchase_MREF_F  (
 @XUserPurchase_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserPurchase_BRIEF_F(XUserPurchaseID, @Lang)  from XUserPurchase
where @XUserPurchase_ref like '%'+convert(varchar(38),XUserPurchaseID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserProfile_BRIEF_F  (
 @XUserProfileid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserProfileid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserProfile where XUserProfileID=@XUserProfileID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCourse
  from XUserProfile  where  XUserProfileID = @XUserProfileID 
 select @tmpBrief= dbo.XCourseDesc_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
select @tmpID =  complModule
  from XUserProfile  where  XUserProfileID = @XUserProfileID 
 select @tmpBrief= dbo.XCourseModule_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserProfile_MREF_F  (
 @XUserProfile_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserProfile_BRIEF_F(XUserProfileID, @Lang)  from XUserProfile
where @XUserProfile_ref like '%'+convert(varchar(38),XUserProfileID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserRegistartion_BRIEF_F  (
 @XUserRegistartionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserRegistartionid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserRegistartion where XUserRegistartionID=@XUserRegistartionID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCourseSchedule
  from XUserRegistartion  where  XUserRegistartionID = @XUserRegistartionID 
 select @tmpBrief= dbo.XScheduleItem_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserRegistartion_MREF_F  (
 @XUserRegistartion_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserRegistartion_BRIEF_F(XUserRegistartionID, @Lang)  from XUserRegistartion
where @XUserRegistartion_ref like '%'+convert(varchar(38),XUserRegistartionID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserCart_BRIEF_F  (
 @XUserCartid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserCartid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserCart where XUserCartID=@XUserCartID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCourse
  from XUserCart  where  XUserCartID = @XUserCartID 
 select @tmpBrief= dbo.XCourseDesc_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
select @tmpID =  subscriptionType
  from XUserCart  where  XUserCartID = @XUserCartID 
 select @tmpBrief= dbo.XSubscriptionType_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserCart_MREF_F  (
 @XUserCart_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserCart_BRIEF_F(XUserCartID, @Lang)  from XUserCart
where @XUserCart_ref like '%'+convert(varchar(38),XUserCartID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XScheduleItem_BRIEF_F  (
 @XScheduleItemid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XScheduleItemid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XScheduleItem where XScheduleItemID=@XScheduleItemID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCourse
  from XScheduleItem  where  XScheduleItemID = @XScheduleItemID 
 select @tmpBrief= dbo.XCourseDesc_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
select @tmpID =  theInstructor
  from XScheduleItem  where  XScheduleItemID = @XScheduleItemID 
 select @tmpBrief= dbo.XInstructorInfo_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XScheduleItem_MREF_F  (
 @XScheduleItem_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XScheduleItem_BRIEF_F(XScheduleItemID, @Lang)  from XScheduleItem
where @XScheduleItem_ref like '%'+convert(varchar(38),XScheduleItemID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XScheduleSubst_BRIEF_F  (
 @XScheduleSubstid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XScheduleSubstid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XScheduleSubst where XScheduleSubstID=@XScheduleSubstID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theInstructor
  from XScheduleSubst  where  XScheduleSubstID = @XScheduleSubstID 
 select @tmpBrief= dbo.XInstructorInfo_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XScheduleSubst_MREF_F  (
 @XScheduleSubst_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XScheduleSubst_BRIEF_F(XScheduleSubstID, @Lang)  from XScheduleSubst
where @XScheduleSubst_ref like '%'+convert(varchar(38),XScheduleSubstID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XLevel_BRIEF_F  (
 @XLevelid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XLevelid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XLevel where XLevelID=@XLevelID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XLevel  where  XLevelID = @XLevelID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XLevel_MREF_F  (
 @XLevel_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XLevel_BRIEF_F(XLevelID, @Lang)  from XLevel
where @XLevel_ref like '%'+convert(varchar(38),XLevelID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XSubject_BRIEF_F  (
 @XSubjectid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XSubjectid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XSubject where XSubjectID=@XSubjectID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XSubject  where  XSubjectID = @XSubjectID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XSubject_MREF_F  (
 @XSubject_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XSubject_BRIEF_F(XSubjectID, @Lang)  from XSubject
where @XSubject_ref like '%'+convert(varchar(38),XSubjectID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XStatus_BRIEF_F  (
 @XStatusid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XStatusid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XStatus where XStatusID=@XStatusID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XStatus  where  XStatusID = @XStatusID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XStatus_MREF_F  (
 @XStatus_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XStatus_BRIEF_F(XStatusID, @Lang)  from XStatus
where @XStatus_ref like '%'+convert(varchar(38),XStatusID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XSubscriptionType_BRIEF_F  (
 @XSubscriptionTypeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XSubscriptionTypeid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XSubscriptionType where XSubscriptionTypeID=@XSubscriptionTypeID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XSubscriptionType  where  XSubscriptionTypeID = @XSubscriptionTypeID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XSubscriptionType_MREF_F  (
 @XSubscriptionType_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XSubscriptionType_BRIEF_F(XSubscriptionTypeID, @Lang)  from XSubscriptionType
where @XSubscriptionType_ref like '%'+convert(varchar(38),XSubscriptionTypeID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XCert_BRIEF_F  (
 @XCertid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XCertid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XCert where XCertID=@XCertID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XCert  where  XCertID = @XCertID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XCert_MREF_F  (
 @XCert_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XCert_BRIEF_F(XCertID, @Lang)  from XCert
where @XCert_ref like '%'+convert(varchar(38),XCertID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserSkillLevel_BRIEF_F  (
 @XUserSkillLevelid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserSkillLevelid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserSkillLevel where XUserSkillLevelID=@XUserSkillLevelID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XUserSkillLevel  where  XUserSkillLevelID = @XUserSkillLevelID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserSkillLevel_MREF_F  (
 @XUserSkillLevel_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserSkillLevel_BRIEF_F(XUserSkillLevelID, @Lang)  from XUserSkillLevel
where @XUserSkillLevel_ref like '%'+convert(varchar(38),XUserSkillLevelID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Views--" File="">
    <BlockHolder BlockName="--Views--" BlockCode=" 
if exists (select * from sysobjects where id = object_id(N'V_XInstructorInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XInstructorInfo
GO
create view V_XInstructorInfo as 
select   XInstructorInfo.xInstructorInfoId
, 
XInstructorInfo.family 
family 
, 
XInstructorInfo.name 
name 
, 
XInstructorInfo.middleName 
middleName 
, 
XInstructorInfo.eMail 
eMail 
, 
XInstructorInfo.phone 
phone 
, 
XInstructorInfo.photoUrl 
photoUrl 
, 
XInstructorInfo.localPhone 
localPhone 
, XInstructorInfo.XInstructorInfoID ID 
, 'XInstructorInfo' VIEWBASE 

 from XInstructorInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_XInstructorStatus') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XInstructorStatus
GO
create view V_XInstructorStatus as 
select   XInstructorStatus.xInstructorStatusId
, xInstructorInfoId 
, 
 XInstructorStatus.theStatus  
theStatus 
, dbo.XStatus_BRIEF_F(XInstructorStatus.theStatus, NULL) 
theStatus_name 
, 
XInstructorStatus.sequence 
sequence 
, XInstructorStatus.XInstructorStatusID ID 
, 'XInstructorStatus' VIEWBASE 

 from XInstructorStatus
GO
if exists (select * from sysobjects where id = object_id(N'V_XCourseDesc') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XCourseDesc
GO
create view V_XCourseDesc as 
select   XCourseDesc.xCourseDescId
, 
XCourseDesc.courseCode 
courseCode 
, 
XCourseDesc.name 
name 
, 
 XCourseDesc.subject  
subject 
, dbo.XSubject_BRIEF_F(XCourseDesc.subject, NULL) 
subject_name 
, 
XCourseDesc.imageUrl 
imageUrl 
, 
 XCourseDesc.theLevel  
theLevel 
, dbo.XLevel_BRIEF_F(XCourseDesc.theLevel, NULL) 
theLevel_name 
, 
 XCourseDesc.certification  
certification 
, dbo.XCert_BRIEF_F(XCourseDesc.certification, NULL) 
certification_name 
, 
 XCourseDesc.theInstructor  
theInstructor 
, dbo.XInstructorInfo_BRIEF_F(XCourseDesc.theInstructor, NULL) 
theInstructor_name 
, 
XCourseDesc.courseDescription 
courseDescription 
, 
XCourseDesc.studentGuide 
studentGuide 
, 
XCourseDesc.labGuide 
labGuide 
, 
XCourseDesc.price 
price 
, 
 XCourseDesc.isActive  
isActive 
, case XCourseDesc.isActive 
when 1 then 'Да'
when 0 then 'Нет'
 end 
isActive_name 
, 
 XCourseDesc.isOffline  
isOffline 
, case XCourseDesc.isOffline 
when 1 then 'Да'
when 0 then 'Нет'
 end 
isOffline_name 
, 
 XCourseDesc.isOnline  
isOnline 
, case XCourseDesc.isOnline 
when 1 then 'Да'
when 0 then 'Нет'
 end 
isOnline_name 
, XCourseDesc.XCourseDescID ID 
, 'XCourseDesc' VIEWBASE 

 from XCourseDesc
GO
if exists (select * from sysobjects where id = object_id(N'V_XCourseModule') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XCourseModule
GO
create view V_XCourseModule as 
select   XCourseModule.xCourseModuleId
, xCourseDescId 
, 
XCourseModule.moduleNo 
moduleNo 
, 
XCourseModule.name 
name 
, 
XCourseModule.info 
info 
, 
XCourseModule.reglament 
reglament 
, XCourseModule.XCourseModuleID ID 
, 'XCourseModule' VIEWBASE 

 from XCourseModule
GO
if exists (select * from sysobjects where id = object_id(N'V_XChepter') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XChepter
GO
create view V_XChepter as 
select   XChepter.xChepterId
, xCourseModuleId 
, 
XChepter.sequence 
sequence 
, 
XChepter.name 
name 
, 
XChepter.mainText 
mainText 
, 
XChepter.refFile 
refFile 
, XChepter.XChepterID ID 
, 'XChepter' VIEWBASE 

 from XChepter
GO
if exists (select * from sysobjects where id = object_id(N'V_XCoursePrice') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XCoursePrice
GO
create view V_XCoursePrice as 
select   XCoursePrice.xCoursePriceId
, xCourseDescId 
, 
XCoursePrice.priceDate 
priceDate 
, 
XCoursePrice.price 
price 
, XCoursePrice.XCoursePriceID ID 
, 'XCoursePrice' VIEWBASE 

 from XCoursePrice
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserInfo
GO
create view V_XUserInfo as 
select   XUserInfo.xUserInfoId
, 
XUserInfo.family 
family 
, 
XUserInfo.name 
name 
, 
XUserInfo.middleName 
middleName 
, 
XUserInfo.login 
login 
, 
XUserInfo.password 
password 
, 
XUserInfo.photoUrl 
photoUrl 
, 
XUserInfo.eMail 
eMail 
, 
XUserInfo.phone 
phone 
, 
XUserInfo.birthday 
birthday 
, 
XUserInfo.country 
country 
, 
XUserInfo.city 
city 
, 
XUserInfo.nativeLanguage 
nativeLanguage 
, 
 XUserInfo.userSkill  
userSkill 
, dbo.XUserSkillLevel_BRIEF_F(XUserInfo.userSkill, NULL) 
userSkill_name 
, 
XUserInfo.learningYears 
learningYears 
, 
XUserInfo.learningGoal 
learningGoal 
, 
 XUserInfo.pIaccept  
pIaccept 
, case XUserInfo.pIaccept 
when 1 then 'Да'
when 0 then 'Нет'
 end 
pIaccept_name 
, 
 XUserInfo.hRaccept  
hRaccept 
, case XUserInfo.hRaccept 
when 1 then 'Да'
when 0 then 'Нет'
 end 
hRaccept_name 
, XUserInfo.XUserInfoID ID 
, 'XUserInfo' VIEWBASE 

 from XUserInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_XSubscription') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XSubscription
GO
create view V_XSubscription as 
select   XSubscription.xSubscriptionId
, xUserInfoId 
, 
 XSubscription.subscriptionType  
subscriptionType 
, dbo.XSubscriptionType_BRIEF_F(XSubscription.subscriptionType, NULL) 
subscriptionType_name 
, 
XSubscription.fromDate 
fromDate 
, 
XSubscription.toDate 
toDate 
, XSubscription.XSubscriptionID ID 
, 'XSubscription' VIEWBASE 

 from XSubscription
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserPurchase') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserPurchase
GO
create view V_XUserPurchase as 
select   XUserPurchase.xUserPurchaseId
, xUserInfoId 
, 
 XUserPurchase.theCourse  
theCourse 
, dbo.XCourseDesc_BRIEF_F(XUserPurchase.theCourse, NULL) 
theCourse_name 
, XUserPurchase.XUserPurchaseID ID 
, 'XUserPurchase' VIEWBASE 

 from XUserPurchase
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserProfile') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserProfile
GO
create view V_XUserProfile as 
select   XUserProfile.xUserProfileId
, xUserInfoId 
, 
 XUserProfile.theCourse  
theCourse 
, dbo.XCourseDesc_BRIEF_F(XUserProfile.theCourse, NULL) 
theCourse_name 
, 
 XUserProfile.complModule  
complModule 
, dbo.XCourseModule_BRIEF_F(XUserProfile.complModule, NULL) 
complModule_name 
, XUserProfile.XUserProfileID ID 
, 'XUserProfile' VIEWBASE 

 from XUserProfile
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserRegistartion') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserRegistartion
GO
create view V_XUserRegistartion as 
select   XUserRegistartion.xUserRegistartionId
, xUserInfoId 
, 
 XUserRegistartion.theCourseSchedule  
theCourseSchedule 
, dbo.XScheduleItem_BRIEF_F(XUserRegistartion.theCourseSchedule, NULL) 
theCourseSchedule_name 
, XUserRegistartion.XUserRegistartionID ID 
, 'XUserRegistartion' VIEWBASE 

 from XUserRegistartion
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserCart') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserCart
GO
create view V_XUserCart as 
select   XUserCart.xUserCartId
, xUserInfoId 
, 
 XUserCart.theCourse  
theCourse 
, dbo.XCourseDesc_BRIEF_F(XUserCart.theCourse, NULL) 
theCourse_name 
, 
 XUserCart.subscriptionType  
subscriptionType 
, dbo.XSubscriptionType_BRIEF_F(XUserCart.subscriptionType, NULL) 
subscriptionType_name 
, XUserCart.XUserCartID ID 
, 'XUserCart' VIEWBASE 

 from XUserCart
GO
if exists (select * from sysobjects where id = object_id(N'V_XScheduleItem') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XScheduleItem
GO
create view V_XScheduleItem as 
select   XScheduleItem.xScheduleItemId
, 
 XScheduleItem.theCourse  
theCourse 
, dbo.XCourseDesc_BRIEF_F(XScheduleItem.theCourse, NULL) 
theCourse_name 
, 
 XScheduleItem.theInstructor  
theInstructor 
, dbo.XInstructorInfo_BRIEF_F(XScheduleItem.theInstructor, NULL) 
theInstructor_name 
, 
XScheduleItem.fromDate 
fromDate 
, 
XScheduleItem.toDate 
toDate 
, XScheduleItem.XScheduleItemID ID 
, 'XScheduleItem' VIEWBASE 

 from XScheduleItem
GO
if exists (select * from sysobjects where id = object_id(N'V_XScheduleSubst') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XScheduleSubst
GO
create view V_XScheduleSubst as 
select   XScheduleSubst.xScheduleSubstId
, xScheduleItemId 
, 
 XScheduleSubst.theInstructor  
theInstructor 
, dbo.XInstructorInfo_BRIEF_F(XScheduleSubst.theInstructor, NULL) 
theInstructor_name 
, 
XScheduleSubst.fromDate 
fromDate 
, 
XScheduleSubst.toDate 
toDate 
, XScheduleSubst.XScheduleSubstID ID 
, 'XScheduleSubst' VIEWBASE 

 from XScheduleSubst
GO
if exists (select * from sysobjects where id = object_id(N'V_XLevel') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XLevel
GO
create view V_XLevel as 
select   XLevel.xLevelId
, 
XLevel.name 
name 
, XLevel.XLevelID ID 
, 'XLevel' VIEWBASE 

 from XLevel
GO
if exists (select * from sysobjects where id = object_id(N'V_XSubject') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XSubject
GO
create view V_XSubject as 
select   XSubject.xSubjectId
, 
XSubject.name 
name 
, XSubject.XSubjectID ID 
, 'XSubject' VIEWBASE 

 from XSubject
GO
if exists (select * from sysobjects where id = object_id(N'V_XStatus') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XStatus
GO
create view V_XStatus as 
select   XStatus.xStatusId
, 
XStatus.name 
name 
, XStatus.XStatusID ID 
, 'XStatus' VIEWBASE 

 from XStatus
GO
if exists (select * from sysobjects where id = object_id(N'V_XSubscriptionType') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XSubscriptionType
GO
create view V_XSubscriptionType as 
select   XSubscriptionType.xSubscriptionTypeId
, 
XSubscriptionType.name 
name 
, 
XSubscriptionType.timerange 
timerange 
, XSubscriptionType.XSubscriptionTypeID ID 
, 'XSubscriptionType' VIEWBASE 

 from XSubscriptionType
GO
if exists (select * from sysobjects where id = object_id(N'V_XCert') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XCert
GO
create view V_XCert as 
select   XCert.xCertId
, 
XCert.name 
name 
, XCert.XCertID ID 
, 'XCert' VIEWBASE 

 from XCert
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserSkillLevel') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserSkillLevel
GO
create view V_XUserSkillLevel as 
select   XUserSkillLevel.xUserSkillLevelId
, 
XUserSkillLevel.name 
name 
, XUserSkillLevel.XUserSkillLevelID ID 
, 'XUserSkillLevel' VIEWBASE 

 from XUserSkillLevel
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
</root>