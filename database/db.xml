<?xml version="1.0"?>
<root>
  <ModuleHolder ModuleName="--Tables" File="">
    <BlockHolder BlockName="--body" BlockCode=" 
/* TYPE=TestBlock (Библиотека блоков) */
GO
/*Описание вопроса*/
if not exists (select * from sysobjects where id = object_id(N'TestQuestionDescr') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestQuestionDescr/*Описание вопроса*/ (
TestQuestionDescrid uniqueidentifier not null rowguidcol default ( newid())  
,TestModuleGroupID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theCode' and id=object_id(N'TestQuestionDescr'))
alter table TestQuestionDescr add 
theCode
 VARCHAR (20) null /* Код вопроса */
go
if  not exists(select * from syscolumns where name='questionCost' and id=object_id(N'TestQuestionDescr'))
alter table TestQuestionDescr add 
questionCost
 integer null /* Баллы за вопрос */
go
if  not exists(select * from syscolumns where name='mainText' and id=object_id(N'TestQuestionDescr'))
alter table TestQuestionDescr add 
mainText
 VARCHAR (4096) null /* Основной текст */
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'TestQuestionDescr'))
alter table TestQuestionDescr add 
sequence
 integer null /* Порядок следования */
go
if  not exists(select * from syscolumns where name='theComment' and id=object_id(N'TestQuestionDescr'))
alter table TestQuestionDescr add 
theComment
 VARCHAR (4096) null /* Пояснение к вопросу */
go
if  not exists(select * from syscolumns where name='questType' and id=object_id(N'TestQuestionDescr'))
alter table TestQuestionDescr add 
questType
 UNIQUEIDENTIFIER null /* Тип Вопроса */
go
if  not exists(select * from syscolumns where name='checkForm' and id=object_id(N'TestQuestionDescr'))
alter table TestQuestionDescr add 
checkForm
 UNIQUEIDENTIFIER null /* Форма для оценки */
go
go
-- drop extra columns from generated table: TestQuestionDescr
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestQuestionDescr')
and name not in('TestQuestionDescrID','TestModuleGroupID','theCode','questionCost','mainText','sequence','theComment','questType','checkForm')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestQuestionDescr drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestQuestionDescr') and xtype='PK' and type='K')
ALTER TABLE TestQuestionDescr DROP CONSTRAINT pk_TestQuestionDescr
GO
alter table TestQuestionDescr add constraint pk_TestQuestionDescr primary key (TestQuestionDescrID)

GO
/*Варинты ответов*/
if not exists (select * from sysobjects where id = object_id(N'TestQuestionAnswers') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestQuestionAnswers/*Варианты ответов на вопрос*/ (
TestQuestionDescrID uniqueidentifier not null,
TestQuestionAnswersid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='theCode' and id=object_id(N'TestQuestionAnswers'))
alter table TestQuestionAnswers add 
theCode
 VARCHAR (32) null /* Код ответа */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'TestQuestionAnswers'))
alter table TestQuestionAnswers add 
name
 VARCHAR (4096) null /* Ответ */
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'TestQuestionAnswers'))
alter table TestQuestionAnswers add 
sequence
 integer null /* Номер ответа */
go
if  not exists(select * from syscolumns where name='audioRecordDuraton' and id=object_id(N'TestQuestionAnswers'))
alter table TestQuestionAnswers add 
audioRecordDuraton
 integer null /* Длительность аудиоответа */
go
if  not exists(select * from syscolumns where name='isCorrect' and id=object_id(N'TestQuestionAnswers'))
alter table TestQuestionAnswers add 
isCorrect
 integer null 
 check (isCorrect in ( 1/* Да */
, 0/* Нет */ )) /* Правильный ответ */
go
go
-- drop extra columns from generated table: TestQuestionAnswers
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestQuestionAnswers')
and name not in('TestQuestionDescrID','TestQuestionAnswersID','theCode','name','sequence','audioRecordDuraton','isCorrect')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestQuestionAnswers drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestQuestionAnswers') and xtype='PK' and type='K')
ALTER TABLE TestQuestionAnswers DROP CONSTRAINT pk_TestQuestionAnswers
GO
alter table TestQuestionAnswers add constraint pk_TestQuestionAnswers primary key (TestQuestionAnswersID)

GO
/*Блок теста*/
if not exists (select * from sysobjects where id = object_id(N'TestModuleGroup') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestModuleGroup/*Логическое объединение вопросов */ (
TestModuleGroupid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='testLevel' and id=object_id(N'TestModuleGroup'))
alter table TestModuleGroup add 
testLevel
 UNIQUEIDENTIFIER null /* Уровень сложности */
go
if  not exists(select * from syscolumns where name='questionCount' and id=object_id(N'TestModuleGroup'))
alter table TestModuleGroup add 
questionCount
 integer null /* Количество вопросов в варианте */
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'TestModuleGroup'))
alter table TestModuleGroup add 
sequence
 integer null /* Порядок следования */
go
if  not exists(select * from syscolumns where name='blockTime' and id=object_id(N'TestModuleGroup'))
alter table TestModuleGroup add 
blockTime
 integer null /* Время на прохождение блока */
go
if  not exists(select * from syscolumns where name='allQuestions' and id=object_id(N'TestModuleGroup'))
alter table TestModuleGroup add 
allQuestions
 integer null 
 check (allQuestions in ( 1/* Да */
, 0/* Нет */ )) /* Неделимый блок */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'TestModuleGroup'))
alter table TestModuleGroup add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='mainText' and id=object_id(N'TestModuleGroup'))
alter table TestModuleGroup add 
mainText
 VARCHAR (4096) null /* Основной текст */
go
if  not exists(select * from syscolumns where name='reglament' and id=object_id(N'TestModuleGroup'))
alter table TestModuleGroup add 
reglament
 VARCHAR (4096) null /* Регламент */
go
go
-- drop extra columns from generated table: TestModuleGroup
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestModuleGroup')
and name not in('TestModuleGroupID','testLevel','questionCount','sequence','blockTime','allQuestions','name','mainText','reglament')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestModuleGroup drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestModuleGroup') and xtype='PK' and type='K')
ALTER TABLE TestModuleGroup DROP CONSTRAINT pk_TestModuleGroup
GO
alter table TestModuleGroup add constraint pk_TestModuleGroup primary key (TestModuleGroupID)

GO
/*Использование блока*/
if not exists (select * from sysobjects where id = object_id(N'TestBlockUsage') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestBlockUsage/**/ (
TestBlockUsageid uniqueidentifier not null rowguidcol default ( newid())  
,TestModuleGroupID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='BlockType' and id=object_id(N'TestBlockUsage'))
alter table TestBlockUsage add 
BlockType
 UNIQUEIDENTIFIER null /* Реализует тип */
go
go
-- drop extra columns from generated table: TestBlockUsage
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestBlockUsage')
and name not in('TestBlockUsageID','TestModuleGroupID','BlockType')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestBlockUsage drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestBlockUsage') and xtype='PK' and type='K')
ALTER TABLE TestBlockUsage DROP CONSTRAINT pk_TestBlockUsage
GO
alter table TestBlockUsage add constraint pk_TestBlockUsage primary key (TestBlockUsageID)

GO
/*Файлы логической группы*/
if not exists (select * from sysobjects where id = object_id(N'TestGroupFiles') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestGroupFiles/*Файлы к логической группе вопросов*/ (
TestGroupFilesid uniqueidentifier not null rowguidcol default ( newid())  
,TestModuleGroupID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='filePath' and id=object_id(N'TestGroupFiles'))
alter table TestGroupFiles add 
filePath
 VARCHAR (255) null /* Путь к файлу в хранилище */
go
if  not exists(select * from syscolumns where name='fileType' and id=object_id(N'TestGroupFiles'))
alter table TestGroupFiles add 
fileType
 UNIQUEIDENTIFIER null /* Тип файла */
go
if  not exists(select * from syscolumns where name='fileComment' and id=object_id(N'TestGroupFiles'))
alter table TestGroupFiles add 
fileComment
 VARCHAR (4096) null /* Комментарий к файлу */
go
if  not exists(select * from syscolumns where name='originalName' and id=object_id(N'TestGroupFiles'))
alter table TestGroupFiles add 
originalName
 VARCHAR (255) null /* Имя файла */
go
go
-- drop extra columns from generated table: TestGroupFiles
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestGroupFiles')
and name not in('TestGroupFilesID','TestModuleGroupID','filePath','fileType','fileComment','originalName')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestGroupFiles drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestGroupFiles') and xtype='PK' and type='K')
ALTER TABLE TestGroupFiles DROP CONSTRAINT pk_TestGroupFiles
GO
alter table TestGroupFiles add constraint pk_TestGroupFiles primary key (TestGroupFilesID)

GO
/* TYPE=TestVariant (Вариант теста) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'VariantDescr') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table VariantDescr/*Описание варианта теста*/ (
VariantDescrid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='baseTest' and id=object_id(N'VariantDescr'))
alter table VariantDescr add 
baseTest
 UNIQUEIDENTIFIER null /* Базовый тест */
go
if  not exists(select * from syscolumns where name='onlineTest' and id=object_id(N'VariantDescr'))
alter table VariantDescr add 
onlineTest
 integer null 
 check (onlineTest in ( 1/* Да */
, 0/* Нет */ )) /* On-line  тест */
go
if  not exists(select * from syscolumns where name='isPublic' and id=object_id(N'VariantDescr'))
alter table VariantDescr add 
isPublic
 integer null 
 check (isPublic in ( 1/* Да */
, 0/* Нет */ )) /* Публичный вариант */
go
if  not exists(select * from syscolumns where name='variantNum' and id=object_id(N'VariantDescr'))
alter table VariantDescr add 
variantNum
 VARCHAR (120) null /* Номер варианта */
go
if  not exists(select * from syscolumns where name='theORG' and id=object_id(N'VariantDescr'))
alter table VariantDescr add 
theORG
 UNIQUEIDENTIFIER null /* Организация владелец */
go
go
-- drop extra columns from generated table: VariantDescr
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('VariantDescr')
and name not in('VariantDescrID','baseTest','onlineTest','isPublic','variantNum','theORG')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table VariantDescr drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_VariantDescr') and xtype='PK' and type='K')
ALTER TABLE VariantDescr DROP CONSTRAINT pk_VariantDescr
GO
alter table VariantDescr add constraint pk_VariantDescr primary key (VariantDescrID)

GO
/*Субтесты*/
if not exists (select * from sysobjects where id = object_id(N'VariantSubtest') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table VariantSubtest/*Субтесты для варианта*/ (
VariantSubtestid uniqueidentifier not null rowguidcol default ( newid())  
,VariantDescrID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'VariantSubtest'))
alter table VariantSubtest add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='testJSON' and id=object_id(N'VariantSubtest'))
alter table VariantSubtest add 
testJSON
 TEXT null /* Сформированный вариант */
go
if  not exists(select * from syscolumns where name='testPlayer' and id=object_id(N'VariantSubtest'))
alter table VariantSubtest add 
testPlayer
 UNIQUEIDENTIFIER null /* Проигрыватель теста */
go
go
-- drop extra columns from generated table: VariantSubtest
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('VariantSubtest')
and name not in('VariantSubtestID','VariantDescrID','name','testJSON','testPlayer')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table VariantSubtest drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_VariantSubtest') and xtype='PK' and type='K')
ALTER TABLE VariantSubtest DROP CONSTRAINT pk_VariantSubtest
GO
alter table VariantSubtest add constraint pk_VariantSubtest primary key (VariantSubtestID)

GO
/* TYPE=XInstructor (Инструктор) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'XInstructorInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XInstructorInfo/*Инструктора*/ (
XInstructorInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Family' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
Family
 VARCHAR (255) null /* Фамилия */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
Name
 VARCHAR (64) null /* Имя */
go
if  not exists(select * from syscolumns where name='SurName' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
SurName
 VARCHAR (255) null /* Отчество */
go
if  not exists(select * from syscolumns where name='EMail' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
EMail varchar(255) null /* e-mail */
go
if  not exists(select * from syscolumns where name='Phone' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
Phone
 VARCHAR (20) null /* Телефон */
go
if  not exists(select * from syscolumns where name='LocalPhone' and id=object_id(N'XInstructorInfo'))
alter table XInstructorInfo add 
LocalPhone
 VARCHAR (20) null /* Местный телефон */
go
go
-- drop extra columns from generated table: XInstructorInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XInstructorInfo')
and name not in('XInstructorInfoID','Family','Name','SurName','EMail','Phone','LocalPhone')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XInstructorInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XInstructorInfo') and xtype='PK' and type='K')
ALTER TABLE XInstructorInfo DROP CONSTRAINT pk_XInstructorInfo
GO
alter table XInstructorInfo add constraint pk_XInstructorInfo primary key (XInstructorInfoID)

GO
/*Статусы*/
if not exists (select * from sysobjects where id = object_id(N'XInstructorStatus') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XInstructorStatus/**/ (
XInstructorStatusid uniqueidentifier not null rowguidcol default ( newid())  
,XInstructorInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theStatus' and id=object_id(N'XInstructorStatus'))
alter table XInstructorStatus add 
theStatus
 UNIQUEIDENTIFIER null /* Статус */
go
go
-- drop extra columns from generated table: XInstructorStatus
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XInstructorStatus')
and name not in('XInstructorStatusID','XInstructorInfoID','theStatus')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XInstructorStatus drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XInstructorStatus') and xtype='PK' and type='K')
ALTER TABLE XInstructorStatus DROP CONSTRAINT pk_XInstructorStatus
GO
alter table XInstructorStatus add constraint pk_XInstructorStatus primary key (XInstructorStatusID)

GO
/* TYPE=XCourse (Курс) */
GO
/*Описание курса*/
if not exists (select * from sysobjects where id = object_id(N'XCourseDesc') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XCourseDesc/*Общая информация по курсу*/ (
XCourseDescid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='theLevel' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
theLevel
 UNIQUEIDENTIFIER null /* Уровень сложности */
go
if  not exists(select * from syscolumns where name='theVendor' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
theVendor
 UNIQUEIDENTIFIER null /* Владелец */
go
if  not exists(select * from syscolumns where name='CourseDescription' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
CourseDescription
 VARCHAR (4096) null /* Описание */
go
if  not exists(select * from syscolumns where name='StudentGuide' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
StudentGuide
 VARCHAR (4096) null /* Регламент */
go
if  not exists(select * from syscolumns where name='IsActive' and id=object_id(N'XCourseDesc'))
alter table XCourseDesc add 
IsActive
 integer null 
 check (IsActive in ( 1/* Да */
, 0/* Нет */ )) /* Активный курс */
go
go
-- drop extra columns from generated table: XCourseDesc
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XCourseDesc')
and name not in('XCourseDescID','name','theLevel','theVendor','CourseDescription','StudentGuide','IsActive')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XCourseDesc drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XCourseDesc') and xtype='PK' and type='K')
ALTER TABLE XCourseDesc DROP CONSTRAINT pk_XCourseDesc
GO
alter table XCourseDesc add constraint pk_XCourseDesc primary key (XCourseDescID)

GO
/*Модули курса*/
if not exists (select * from sysobjects where id = object_id(N'XCourseModule') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XCourseModule/*Модули курса*/ (
XCourseModuleid uniqueidentifier not null rowguidcol default ( newid())  
,XCourseDescID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XCourseModule'))
alter table XCourseModule add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='info' and id=object_id(N'XCourseModule'))
alter table XCourseModule add 
info
 VARCHAR (4096) null /* Описание */
go
if  not exists(select * from syscolumns where name='reglament' and id=object_id(N'XCourseModule'))
alter table XCourseModule add 
reglament
 VARCHAR (4096) null /* Регламент */
go
go
-- drop extra columns from generated table: XCourseModule
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XCourseModule')
and name not in('XCourseModuleID','XCourseDescID','name','info','reglament')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XCourseModule drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XCourseModule') and xtype='PK' and type='K')
ALTER TABLE XCourseModule DROP CONSTRAINT pk_XCourseModule
GO
alter table XCourseModule add constraint pk_XCourseModule primary key (XCourseModuleID)

GO
/*Глава*/
if not exists (select * from sysobjects where id = object_id(N'XChepter') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XChepter/*Глава курса*/ (
XCourseModuleID uniqueidentifier not null,
XChepterid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XChepter'))
alter table XChepter add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='mainText' and id=object_id(N'XChepter'))
alter table XChepter add 
mainText
 VARCHAR (4096) null /* Основной текст */
go
go
-- drop extra columns from generated table: XChepter
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XChepter')
and name not in('XCourseModuleID','XChepterID','name','mainText')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XChepter drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XChepter') and xtype='PK' and type='K')
ALTER TABLE XChepter DROP CONSTRAINT pk_XChepter
GO
alter table XChepter add constraint pk_XChepter primary key (XChepterID)

GO
/* TYPE=STDNumerator (Нумератор) */
GO
/*Зоны*/
if not exists (select * from sysobjects where id = object_id(N'Num_zones') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Num_zones/*Зоны уникальных нумеров*/ (
Num_zonesid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='ZoneMask' and id=object_id(N'Num_zones'))
alter table Num_zones add 
ZoneMask
 VARCHAR (255) null /* Маска зоны */
go
go
-- drop extra columns from generated table: Num_zones
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Num_zones')
and name not in('Num_zonesID','ZoneMask')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Num_zones drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Num_zones') and xtype='PK' and type='K')
ALTER TABLE Num_zones DROP CONSTRAINT pk_Num_zones
GO
alter table Num_zones add constraint pk_Num_zones primary key (Num_zonesID)

GO
/*Номера*/
if not exists (select * from sysobjects where id = object_id(N'Num_Values') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Num_Values/*уникальные номера*/ (
Num_zonesID uniqueidentifier not null,
Num_Valuesid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='the_Value' and id=object_id(N'Num_Values'))
alter table Num_Values add 
the_Value
 integer null /* Значение */
go
if  not exists(select * from syscolumns where name='OwnerPartName' and id=object_id(N'Num_Values'))
alter table Num_Values add 
OwnerPartName
 VARCHAR (64) null /* Раздел */
go
if  not exists(select * from syscolumns where name='OwnerRowID' and id=object_id(N'Num_Values'))
alter table Num_Values add 
OwnerRowID
 uniqueidentifier null /* Идентификатор строки */
go
go
-- drop extra columns from generated table: Num_Values
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Num_Values')
and name not in('Num_zonesID','Num_ValuesID','the_Value','OwnerPartName','OwnerRowID')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Num_Values drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Num_Values') and xtype='PK' and type='K')
ALTER TABLE Num_Values DROP CONSTRAINT pk_Num_Values
GO
alter table Num_Values add constraint pk_Num_Values primary key (Num_ValuesID)

GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'Num_head') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Num_head/*Описание нумератора*/ (
Num_headid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Num_head'))
alter table Num_head add 
Name
 VARCHAR (80) null /* Название */
go
if  not exists(select * from syscolumns where name='Shema' and id=object_id(N'Num_head'))
alter table Num_head add 
Shema
 INTEGER null 
 check (Shema in ( 2/* По кварталу */
, 3/* По месяцу */
, 0/* Единая зона */
, 4/* По дню */
, 1/* По году */
, 10/* Произвольные зоны */ )) /* Схема нумерации */
go
go
-- drop extra columns from generated table: Num_head
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Num_head')
and name not in('Num_headID','Name','Shema')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Num_head drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Num_head') and xtype='PK' and type='K')
ALTER TABLE Num_head DROP CONSTRAINT pk_Num_head
GO
alter table Num_head add constraint pk_Num_head primary key (Num_headID)

GO
/* TYPE=MTZwp (Описание АРМ) */
GO
/*Поведение журналов*/
if not exists (select * from sysobjects where id = object_id(N'ARMJournal') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ARMJournal/*Описание действий журанлов*/ (
ARMJournalid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheJournal' and id=object_id(N'ARMJournal'))
alter table ARMJournal add 
TheJournal
 UNIQUEIDENTIFIER null /* Журнал */
go
go
-- drop extra columns from generated table: ARMJournal
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ARMJournal')
and name not in('ARMJournalID','TheJournal')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ARMJournal drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ARMJournal') and xtype='PK' and type='K')
ALTER TABLE ARMJournal DROP CONSTRAINT pk_ARMJournal
GO
alter table ARMJournal add constraint pk_ARMJournal primary key (ARMJournalID)

GO
/*Отчеты*/
if not exists (select * from sysobjects where id = object_id(N'ARMJRNLREP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ARMJRNLREP/*Отчеты из журнала*/ (
ARMJournalID uniqueidentifier not null,
ARMJRNLREPid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='repname' and id=object_id(N'ARMJRNLREP'))
alter table ARMJRNLREP add 
repname
 VARCHAR (255) null /* Название отчета */
go
if  not exists(select * from syscolumns where name='TheReport' and id=object_id(N'ARMJRNLREP'))
alter table ARMJRNLREP add 
TheReport
 UNIQUEIDENTIFIER null /* Отчет */
go
go
-- drop extra columns from generated table: ARMJRNLREP
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ARMJRNLREP')
and name not in('ARMJournalID','ARMJRNLREPID','repname','TheReport')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ARMJRNLREP drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ARMJRNLREP') and xtype='PK' and type='K')
ALTER TABLE ARMJRNLREP DROP CONSTRAINT pk_ARMJRNLREP
GO
alter table ARMJRNLREP add constraint pk_ARMJRNLREP primary key (ARMJRNLREPID)

GO
/*Действия*/
if not exists (select * from sysobjects where id = object_id(N'ARMJRNLRUN') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ARMJRNLRUN/*Дополнительные действия в журнале*/ (
ARMJournalID uniqueidentifier not null,
ARMJRNLRUNid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'ARMJRNLRUN'))
alter table ARMJRNLRUN add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TheExtention' and id=object_id(N'ARMJRNLRUN'))
alter table ARMJRNLRUN add 
TheExtention
 UNIQUEIDENTIFIER null /* Расширение */
go
go
-- drop extra columns from generated table: ARMJRNLRUN
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ARMJRNLRUN')
and name not in('ARMJournalID','ARMJRNLRUNID','Name','TheExtention')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ARMJRNLRUN drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ARMJRNLRUN') and xtype='PK' and type='K')
ALTER TABLE ARMJRNLRUN DROP CONSTRAINT pk_ARMJRNLRUN
GO
alter table ARMJRNLRUN add constraint pk_ARMJRNLRUN primary key (ARMJRNLRUNID)

GO
/*Добавление*/
if not exists (select * from sysobjects where id = object_id(N'ARMJRNLADD') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ARMJRNLADD/*Варианты обработки добавления*/ (
ARMJournalID uniqueidentifier not null,
ARMJRNLADDid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'ARMJRNLADD'))
alter table ARMJRNLADD add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TheExtention' and id=object_id(N'ARMJRNLADD'))
alter table ARMJRNLADD add 
TheExtention
 UNIQUEIDENTIFIER null /* Расширение */
go
go
-- drop extra columns from generated table: ARMJRNLADD
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ARMJRNLADD')
and name not in('ARMJournalID','ARMJRNLADDID','Name','TheExtention')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ARMJRNLADD drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ARMJRNLADD') and xtype='PK' and type='K')
ALTER TABLE ARMJRNLADD DROP CONSTRAINT pk_ARMJRNLADD
GO
alter table ARMJRNLADD add constraint pk_ARMJRNLADD primary key (ARMJRNLADDID)

GO
/*Меню*/
if not exists (select * from sysobjects where id = object_id(N'EntryPoints') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table EntryPoints/*Меню*/ (
EntryPointsid uniqueidentifier not null rowguidcol default ( newid())  
,ParentRowid uniqueidentifier 
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
sequence
 integer null /* Последовательность */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Name
 VARCHAR (38) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='AsToolbarItem' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AsToolbarItem
 INTEGER null 
 check (AsToolbarItem in ( -1/* Да */
, 0/* Нет */ )) /* Включить в тулбар */
go
if  not exists(select * from syscolumns where name='ActionType' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
ActionType
 INTEGER null 
 check (ActionType in ( 4/* Запустить АРМ */
, 2/* Выполнить метод */
, 5/* Открыть отчет */
, 0/* Ничего не делать */
, 1/* Открыть документ */
, 3/* Открыть журнал */ )) /* Вариант действия */
go
if  not exists(select * from syscolumns where name='TheFilter' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
TheFilter
 UNIQUEIDENTIFIER null /* Фильтр */
go
if  not exists(select * from syscolumns where name='Journal' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Journal
 UNIQUEIDENTIFIER null /* Журнал */
go
if  not exists(select * from syscolumns where name='Report' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Report
 UNIQUEIDENTIFIER null /* Отчет */
go
if  not exists(select * from syscolumns where name='Document' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Document
 UNIQUEIDENTIFIER null /* Документ */
go
if  not exists(select * from syscolumns where name='Method' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Method
 UNIQUEIDENTIFIER null /* Метод */
go
if  not exists(select * from syscolumns where name='IconFile' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
IconFile
 VARCHAR (2000) null /* Файл картинки */
go
if  not exists(select * from syscolumns where name='TheExtention' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
TheExtention
 UNIQUEIDENTIFIER null /* Расширение */
go
if  not exists(select * from syscolumns where name='ARM' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
ARM
 UNIQUEIDENTIFIER null /* АРМ */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
TheComment
 TEXT null /* Примечание */
go
if  not exists(select * from syscolumns where name='ObjectType' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
ObjectType
 UNIQUEIDENTIFIER null /* Тип документа */
go
if  not exists(select * from syscolumns where name='JournalFixedQuery' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
JournalFixedQuery
 TEXT null /* Ограничения к журналу */
go
if  not exists(select * from syscolumns where name='AllowAdd' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AllowAdd
 INTEGER null 
 check (AllowAdd in ( -1/* Да */
, 0/* Нет */ )) /* Разрешено добавление */
go
if  not exists(select * from syscolumns where name='AllowEdit' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AllowEdit
 INTEGER null 
 check (AllowEdit in ( -1/* Да */
, 0/* Нет */ )) /* Разрешено редактирование */
go
if  not exists(select * from syscolumns where name='AllowDel' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AllowDel
 INTEGER null 
 check (AllowDel in ( -1/* Да */
, 0/* Нет */ )) /* Рарешено удаление */
go
if  not exists(select * from syscolumns where name='AllowFilter' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AllowFilter
 INTEGER null 
 check (AllowFilter in ( -1/* Да */
, 0/* Нет */ )) /* Разрешен фильтр */
go
if  not exists(select * from syscolumns where name='AllowPrint' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AllowPrint
 INTEGER null 
 check (AllowPrint in ( -1/* Да */
, 0/* Нет */ )) /* Разрешена печать */
go
go
-- drop extra columns from generated table: EntryPoints
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('EntryPoints')
and name not in('EntryPointsID','ParentRowid','sequence','Name','Caption','AsToolbarItem','ActionType','TheFilter','Journal','Report','Document','Method','IconFile','TheExtention','ARM','TheComment','ObjectType','JournalFixedQuery','AllowAdd','AllowEdit','AllowDel','AllowFilter','AllowPrint')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table EntryPoints drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_EntryPoints') and xtype='PK' and type='K')
ALTER TABLE EntryPoints DROP CONSTRAINT pk_EntryPoints
GO
alter table EntryPoints add constraint pk_EntryPoints primary key (EntryPointsID)

GO
/*Привязка фильтра*/
if not exists (select * from sysobjects where id = object_id(N'EPFilterLink') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table EPFilterLink/*Привязка фильтра к журналу*/ (
EntryPointsID uniqueidentifier not null,
EPFilterLinkid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='RowSource' and id=object_id(N'EPFilterLink'))
alter table EPFilterLink add 
RowSource
 VARCHAR (255) null /* Источник */
go
if  not exists(select * from syscolumns where name='TheExpression' and id=object_id(N'EPFilterLink'))
alter table EPFilterLink add 
TheExpression
 TEXT null /* Выражение */
go
if  not exists(select * from syscolumns where name='FilterField' and id=object_id(N'EPFilterLink'))
alter table EPFilterLink add 
FilterField
 VARCHAR (255) null /* Поле фильтра */
go
go
-- drop extra columns from generated table: EPFilterLink
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('EPFilterLink')
and name not in('EntryPointsID','EPFilterLinkID','RowSource','TheExpression','FilterField')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table EPFilterLink drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_EPFilterLink') and xtype='PK' and type='K')
ALTER TABLE EPFilterLink DROP CONSTRAINT pk_EPFilterLink
GO
alter table EPFilterLink add constraint pk_EPFilterLink primary key (EPFilterLinkID)

GO
/*Арм*/
if not exists (select * from sysobjects where id = object_id(N'WorkPlace') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table WorkPlace/*Арм*/ (
WorkPlaceid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'WorkPlace'))
alter table WorkPlace add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'WorkPlace'))
alter table WorkPlace add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='TheVersion' and id=object_id(N'WorkPlace'))
alter table WorkPlace add 
TheVersion
 VARCHAR (30) null /* Версия */
go
if  not exists(select * from syscolumns where name='ThePlatform' and id=object_id(N'WorkPlace'))
alter table WorkPlace add 
ThePlatform
 INTEGER null 
 check (ThePlatform in ( 3/* OTHER */
, 1/* DOTNET */
, 2/* JAVA */
, 0/* VB6 */ )) /* Платформа реализации */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'WorkPlace'))
alter table WorkPlace add 
TheComment
 TEXT null /* Примечание */
go
go
-- drop extra columns from generated table: WorkPlace
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('WorkPlace')
and name not in('WorkPlaceID','Name','Caption','TheVersion','ThePlatform','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table WorkPlace drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_WorkPlace') and xtype='PK' and type='K')
ALTER TABLE WorkPlace DROP CONSTRAINT pk_WorkPlace
GO
alter table WorkPlace add constraint pk_WorkPlace primary key (WorkPlaceID)

GO
/*Список типов*/
if not exists (select * from sysobjects where id = object_id(N'ARMTypes') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ARMTypes/*Типы документов, которые подключаются в MDI режиме*/ (
ARMTypesid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheDocumentType' and id=object_id(N'ARMTypes'))
alter table ARMTypes add 
TheDocumentType
 UNIQUEIDENTIFIER null /* Тип документа */
go
go
-- drop extra columns from generated table: ARMTypes
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ARMTypes')
and name not in('ARMTypesID','TheDocumentType')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ARMTypes drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ARMTypes') and xtype='PK' and type='K')
ALTER TABLE ARMTypes DROP CONSTRAINT pk_ARMTypes
GO
alter table ARMTypes add constraint pk_ARMTypes primary key (ARMTypesID)

GO
/* TYPE=MTZJrnl (Описание журнала) */
GO
/*Колонки журнала*/
if not exists (select * from sysobjects where id = object_id(N'JournalColumn') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table JournalColumn/*Колонки журнала*/ (
JournalColumnid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'JournalColumn'))
alter table JournalColumn add 
sequence
 integer null /* Последовательность */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'JournalColumn'))
alter table JournalColumn add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='ColumnAlignment' and id=object_id(N'JournalColumn'))
alter table JournalColumn add 
ColumnAlignment
 integer null 
 check (ColumnAlignment in ( 6/* Right Top */
, 7/* Right Center */
, 8/* Right Bottom */
, 3/* Center Top */
, 0/* Left Top */
, 4/* Center Center */
, 1/* Left Center */
, 5/* Center Bottom */
, 2/* Left Bottom */ )) /* Выравнивание */
go
if  not exists(select * from syscolumns where name='ColSort' and id=object_id(N'JournalColumn'))
alter table JournalColumn add 
ColSort
 INTEGER null 
 check (ColSort in ( 0/* As String */
, 1/* As Numeric */
, 2/* As Date */ )) /* Сортировка колонки */
go
if  not exists(select * from syscolumns where name='GroupAggregation' and id=object_id(N'JournalColumn'))
alter table JournalColumn add 
GroupAggregation
 INTEGER null 
 check (GroupAggregation in ( 3/* SUM */
, 1/* AVG */
, 6/* CUSTOM */
, 0/* none */
, 2/* COUNT */
, 5/* MAX */
, 4/* MIN */ )) /* Аггрегация при группировке */
go
go
-- drop extra columns from generated table: JournalColumn
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('JournalColumn')
and name not in('JournalColumnID','sequence','name','ColumnAlignment','ColSort','GroupAggregation')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table JournalColumn drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_JournalColumn') and xtype='PK' and type='K')
ALTER TABLE JournalColumn DROP CONSTRAINT pk_JournalColumn
GO
alter table JournalColumn add constraint pk_JournalColumn primary key (JournalColumnID)

GO
/*Состав колонки*/
if not exists (select * from sysobjects where id = object_id(N'JColumnSource') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table JColumnSource/*Состав колонки*/ (
JournalColumnID uniqueidentifier not null,
JColumnSourceid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='SrcPartView' and id=object_id(N'JColumnSource'))
alter table JColumnSource add 
SrcPartView
 UNIQUEIDENTIFIER null /* Представление */
go
if  not exists(select * from syscolumns where name='ViewField' and id=object_id(N'JColumnSource'))
alter table JColumnSource add 
ViewField
 VARCHAR (255) null /* Поле представления */
go
go
-- drop extra columns from generated table: JColumnSource
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('JColumnSource')
and name not in('JournalColumnID','JColumnSourceID','SrcPartView','ViewField')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table JColumnSource drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_JColumnSource') and xtype='PK' and type='K')
ALTER TABLE JColumnSource DROP CONSTRAINT pk_JColumnSource
GO
alter table JColumnSource add constraint pk_JColumnSource primary key (JColumnSourceID)

GO
/*Источники журнала*/
if not exists (select * from sysobjects where id = object_id(N'JournalSrc') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table JournalSrc/*Источники журнала*/ (
JournalSrcid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='PartView' and id=object_id(N'JournalSrc'))
alter table JournalSrc add 
PartView
 uniqueidentifier null /* Представление */
go
if  not exists(select * from syscolumns where name='OnRun' and id=object_id(N'JournalSrc'))
alter table JournalSrc add 
OnRun
 INTEGER null 
 check (OnRun in ( 2/* Открыть документ */
, 0/* Ничего не делать */
, 1/* Открыть строку */ )) /* При открытии */
go
if  not exists(select * from syscolumns where name='OpenMode' and id=object_id(N'JournalSrc'))
alter table JournalSrc add 
OpenMode
 VARCHAR (64) null /* Режим открытия */
go
if  not exists(select * from syscolumns where name='ViewAlias' and id=object_id(N'JournalSrc'))
alter table JournalSrc add 
ViewAlias
 VARCHAR (255) null /* Псевдоним представления */
go
go
-- drop extra columns from generated table: JournalSrc
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('JournalSrc')
and name not in('JournalSrcID','PartView','OnRun','OpenMode','ViewAlias')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table JournalSrc drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_JournalSrc') and xtype='PK' and type='K')
ALTER TABLE JournalSrc DROP CONSTRAINT pk_JournalSrc
GO
alter table JournalSrc add constraint pk_JournalSrc primary key (JournalSrcID)

GO
/*Журнал*/
if not exists (select * from sysobjects where id = object_id(N'Journal') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Journal/*Журнал*/ (
Journalid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Journal'))
alter table Journal add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Alias' and id=object_id(N'Journal'))
alter table Journal add 
the_Alias
 VARCHAR (32) null /* Псевдоним */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'Journal'))
alter table Journal add 
TheComment
 TEXT null /* Описание */
go
if  not exists(select * from syscolumns where name='jrnlIconCls' and id=object_id(N'Journal'))
alter table Journal add 
jrnlIconCls
 VARCHAR (80) null /* Иконка журнала */
go
if  not exists(select * from syscolumns where name='UseFavorites' and id=object_id(N'Journal'))
alter table Journal add 
UseFavorites
 INTEGER null 
 check (UseFavorites in ( -1/* Да */
, 0/* Нет */ )) /* Массовое выделение */
go
go
-- drop extra columns from generated table: Journal
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Journal')
and name not in('JournalID','Name','the_Alias','TheComment','jrnlIconCls','UseFavorites')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Journal drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Journal') and xtype='PK' and type='K')
ALTER TABLE Journal DROP CONSTRAINT pk_Journal
GO
alter table Journal add constraint pk_Journal primary key (JournalID)

GO
/* TYPE=MTZRprt (Описание отчета) */
GO
/*Секции*/
if not exists (select * from sysobjects where id = object_id(N'RPTStruct') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table RPTStruct/*Секции*/ (
RPTStructid uniqueidentifier not null rowguidcol default ( newid())  
,ParentRowid uniqueidentifier 
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'RPTStruct'))
alter table RPTStruct add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'RPTStruct'))
alter table RPTStruct add 
Caption
 VARCHAR (255) null /* Заголовок */
go
go
-- drop extra columns from generated table: RPTStruct
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('RPTStruct')
and name not in('RPTStructID','ParentRowid','Name','Caption')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table RPTStruct drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_RPTStruct') and xtype='PK' and type='K')
ALTER TABLE RPTStruct DROP CONSTRAINT pk_RPTStruct
GO
alter table RPTStruct add constraint pk_RPTStruct primary key (RPTStructID)

GO
/*Поля секции*/
if not exists (select * from sysobjects where id = object_id(N'RPTFields') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table RPTFields/*Поля секции*/ (
RPTStructID uniqueidentifier not null,
RPTFieldsid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'RPTFields'))
alter table RPTFields add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='FieldType' and id=object_id(N'RPTFields'))
alter table RPTFields add 
FieldType
 UNIQUEIDENTIFIER null /* Тип поля */
go
if  not exists(select * from syscolumns where name='FieldSize' and id=object_id(N'RPTFields'))
alter table RPTFields add 
FieldSize
 integer null /* Размер */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'RPTFields'))
alter table RPTFields add 
Caption
 VARCHAR (255) null /* Заголовок */
go
go
-- drop extra columns from generated table: RPTFields
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('RPTFields')
and name not in('RPTStructID','RPTFieldsID','Name','FieldType','FieldSize','Caption')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table RPTFields drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_RPTFields') and xtype='PK' and type='K')
ALTER TABLE RPTFields DROP CONSTRAINT pk_RPTFields
GO
alter table RPTFields add constraint pk_RPTFields primary key (RPTFieldsID)

GO
/*Формулы*/
if not exists (select * from sysobjects where id = object_id(N'RPTFormula') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table RPTFormula/*Формулы*/ (
RPTFormulaid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'RPTFormula'))
alter table RPTFormula add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'RPTFormula'))
alter table RPTFormula add 
Code
 TEXT null /* Выражение */
go
if  not exists(select * from syscolumns where name='Platform' and id=object_id(N'RPTFormula'))
alter table RPTFormula add 
Platform
 UNIQUEIDENTIFIER null /* Платформа */
go
go
-- drop extra columns from generated table: RPTFormula
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('RPTFormula')
and name not in('RPTFormulaID','Name','Code','Platform')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table RPTFormula drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_RPTFormula') and xtype='PK' and type='K')
ALTER TABLE RPTFormula DROP CONSTRAINT pk_RPTFormula
GO
alter table RPTFormula add constraint pk_RPTFormula primary key (RPTFormulaID)

GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'Reports') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Reports/*Описание*/ (
Reportsid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Reports'))
alter table Reports add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='ReportFile' and id=object_id(N'Reports'))
alter table Reports add 
ReportFile
 IMAGE null /* Файл отчета */
if  not exists(select * from syscolumns where name='ReportFile_EXT' and id=object_id(N'Reports'))
alter table Reports add 
 ReportFile_EXT nvarchar(4) null
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'Reports'))
alter table Reports add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='PrepareMethod' and id=object_id(N'Reports'))
alter table Reports add 
PrepareMethod
 UNIQUEIDENTIFIER null /* Метод для формирования */
go
if  not exists(select * from syscolumns where name='ReportType' and id=object_id(N'Reports'))
alter table Reports add 
ReportType
 INTEGER null 
 check (ReportType in ( 4/* Экспорт по Excel шаблону */
, 0/* Таблица */
, 3/* Экспорт по WORD шаблону */
, 1/* Двумерная матрица */
, 2/* Только расчет */ )) /* Тип отчета */
go
if  not exists(select * from syscolumns where name='TheReportExt' and id=object_id(N'Reports'))
alter table Reports add 
TheReportExt
 UNIQUEIDENTIFIER null /* Расширение для создания отчета */
go
if  not exists(select * from syscolumns where name='ReportView' and id=object_id(N'Reports'))
alter table Reports add 
ReportView
 VARCHAR (255) null /* Базовый запрос */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'Reports'))
alter table Reports add 
TheComment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: Reports
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Reports')
and name not in('ReportsID','Name','ReportFile_EXT','ReportFile','Caption','PrepareMethod','ReportType','TheReportExt','ReportView','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Reports drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Reports') and xtype='PK' and type='K')
ALTER TABLE Reports DROP CONSTRAINT pk_Reports
GO
alter table Reports add constraint pk_Reports primary key (ReportsID)

GO
/* TYPE=MTZFltr (Описание фильтра) */
GO
/*Группа полей фильтра*/
if not exists (select * from sysobjects where id = object_id(N'FilterFieldGroup') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FilterFieldGroup/*Группа полей фильтра*/ (
FilterFieldGroupid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'FilterFieldGroup'))
alter table FilterFieldGroup add 
sequence
 integer null /* Последовательность */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'FilterFieldGroup'))
alter table FilterFieldGroup add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'FilterFieldGroup'))
alter table FilterFieldGroup add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='AllowIgnore' and id=object_id(N'FilterFieldGroup'))
alter table FilterFieldGroup add 
AllowIgnore
 INTEGER null 
 check (AllowIgnore in ( -1/* Да */
, 0/* Нет */ )) /* Можно отключать */
go
go
-- drop extra columns from generated table: FilterFieldGroup
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FilterFieldGroup')
and name not in('FilterFieldGroupID','sequence','Name','Caption','AllowIgnore')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FilterFieldGroup drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FilterFieldGroup') and xtype='PK' and type='K')
ALTER TABLE FilterFieldGroup DROP CONSTRAINT pk_FilterFieldGroup
GO
alter table FilterFieldGroup add constraint pk_FilterFieldGroup primary key (FilterFieldGroupID)

GO
/*Поле фильтра*/
if not exists (select * from sysobjects where id = object_id(N'FileterField') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FileterField/*Поле фильтра*/ (
FilterFieldGroupID uniqueidentifier not null,
FileterFieldid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'FileterField'))
alter table FileterField add 
sequence
 integer null /* Последовательность */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'FileterField'))
alter table FileterField add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'FileterField'))
alter table FileterField add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='FieldType' and id=object_id(N'FileterField'))
alter table FileterField add 
FieldType
 UNIQUEIDENTIFIER null /* Тип поля */
go
if  not exists(select * from syscolumns where name='FieldSize' and id=object_id(N'FileterField'))
alter table FileterField add 
FieldSize
 integer null /* Размер */
go
if  not exists(select * from syscolumns where name='RefType' and id=object_id(N'FileterField'))
alter table FileterField add 
RefType
 INTEGER null 
 check (RefType in ( 3/* На источник данных */
, 0/* Скалярное поле ( не ссылка) */
, 2/* На строку раздела */
, 1/* На объект  */ )) /* Тип ссылки */
go
if  not exists(select * from syscolumns where name='RefToType' and id=object_id(N'FileterField'))
alter table FileterField add 
RefToType
 UNIQUEIDENTIFIER null /* Тип, куда ссылаемся */
go
if  not exists(select * from syscolumns where name='RefToPart' and id=object_id(N'FileterField'))
alter table FileterField add 
RefToPart
 UNIQUEIDENTIFIER null /* Раздел, куда ссылаемся */
go
if  not exists(select * from syscolumns where name='ValueArray' and id=object_id(N'FileterField'))
alter table FileterField add 
ValueArray
 INTEGER null 
 check (ValueArray in ( -1/* Да */
, 0/* Нет */ )) /* Массив значений */
go
go
-- drop extra columns from generated table: FileterField
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FileterField')
and name not in('FilterFieldGroupID','FileterFieldID','sequence','Name','Caption','FieldType','FieldSize','RefType','RefToType','RefToPart','ValueArray')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FileterField drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FileterField') and xtype='PK' and type='K')
ALTER TABLE FileterField DROP CONSTRAINT pk_FileterField
GO
alter table FileterField add constraint pk_FileterField primary key (FileterFieldID)

GO
/*Фильтр*/
if not exists (select * from sysobjects where id = object_id(N'Filters') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Filters/*Фильтр*/ (
Filtersid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Filters'))
alter table Filters add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TheCaption' and id=object_id(N'Filters'))
alter table Filters add 
TheCaption
 VARCHAR (80) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'Filters'))
alter table Filters add 
TheComment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: Filters
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Filters')
and name not in('FiltersID','Name','TheCaption','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Filters drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Filters') and xtype='PK' and type='K')
ALTER TABLE Filters DROP CONSTRAINT pk_Filters
GO
alter table Filters add constraint pk_Filters primary key (FiltersID)

GO
/* TYPE=Organization (Организация) */
GO
/*Информация*/
if not exists (select * from sysobjects where id = object_id(N'OrganizationInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table OrganizationInfo/*Информация об организации*/ (
OrganizationInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'OrganizationInfo'))
alter table OrganizationInfo add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: OrganizationInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('OrganizationInfo')
and name not in('OrganizationInfoID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table OrganizationInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_OrganizationInfo') and xtype='PK' and type='K')
ALTER TABLE OrganizationInfo DROP CONSTRAINT pk_OrganizationInfo
GO
alter table OrganizationInfo add constraint pk_OrganizationInfo primary key (OrganizationInfoID)

GO
/* TYPE=TestPerson (Персонал) */
GO
/*Запись на  экзамен*/
if not exists (select * from sysobjects where id = object_id(N'examRequest') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table examRequest/*запись на экзамен*/ (
examRequestid uniqueidentifier not null rowguidcol default ( newid())  
,TestPersonInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='requestDate' and id=object_id(N'examRequest'))
alter table examRequest add 
requestDate
 DATETIME null /* Дата запроса */
go
if  not exists(select * from syscolumns where name='theExam' and id=object_id(N'examRequest'))
alter table examRequest add 
theExam
 UNIQUEIDENTIFIER null /* Экзамен */
go
if  not exists(select * from syscolumns where name='requestAccepted' and id=object_id(N'examRequest'))
alter table examRequest add 
requestAccepted
 integer null 
 check (requestAccepted in ( 1/* Да */
, 0/* Нет */ )) /* Запрос подтвержден */
go
go
-- drop extra columns from generated table: examRequest
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('examRequest')
and name not in('examRequestID','TestPersonInfoID','requestDate','theExam','requestAccepted')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table examRequest drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_examRequest') and xtype='PK' and type='K')
ALTER TABLE examRequest DROP CONSTRAINT pk_examRequest
GO
alter table examRequest add constraint pk_examRequest primary key (examRequestID)

GO
/*Идентификация*/
if not exists (select * from sysobjects where id = object_id(N'TestPersonInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestPersonInfo/*Идентификация человека*/ (
TestPersonInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='lastName' and id=object_id(N'TestPersonInfo'))
alter table TestPersonInfo add 
lastName
 VARCHAR (255) null /* Фамилия */
go
if  not exists(select * from syscolumns where name='firstName' and id=object_id(N'TestPersonInfo'))
alter table TestPersonInfo add 
firstName
 VARCHAR (255) null /* Имя */
go
if  not exists(select * from syscolumns where name='middleName' and id=object_id(N'TestPersonInfo'))
alter table TestPersonInfo add 
middleName
 VARCHAR (255) null /* Отчество */
go
if  not exists(select * from syscolumns where name='email' and id=object_id(N'TestPersonInfo'))
alter table TestPersonInfo add 
email
 VARCHAR (255) null /* E-mail */
go
if  not exists(select * from syscolumns where name='Phone' and id=object_id(N'TestPersonInfo'))
alter table TestPersonInfo add 
Phone
 VARCHAR (255) null /* Телефон */
go
if  not exists(select * from syscolumns where name='LoginId' and id=object_id(N'TestPersonInfo'))
alter table TestPersonInfo add 
LoginId
 uniqueidentifier null /* Идентификатор */
go
if  not exists(select * from syscolumns where name='GroupID' and id=object_id(N'TestPersonInfo'))
alter table TestPersonInfo add 
GroupID
 VARCHAR (80) null /* Идентификатор группы */
go
go
-- drop extra columns from generated table: TestPersonInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestPersonInfo')
and name not in('TestPersonInfoID','lastName','firstName','middleName','email','Phone','LoginId','GroupID')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestPersonInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestPersonInfo') and xtype='PK' and type='K')
ALTER TABLE TestPersonInfo DROP CONSTRAINT pk_TestPersonInfo
GO
alter table TestPersonInfo add constraint pk_TestPersonInfo primary key (TestPersonInfoID)

GO
/*Запись на тест*/
if not exists (select * from sysobjects where id = object_id(N'testRequest') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table testRequest/*запись на On-Line тест*/ (
testRequestid uniqueidentifier not null rowguidcol default ( newid())  
,TestPersonInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='requestDate' and id=object_id(N'testRequest'))
alter table testRequest add 
requestDate
 DATETIME null /* Дата запроса */
go
if  not exists(select * from syscolumns where name='theTest' and id=object_id(N'testRequest'))
alter table testRequest add 
theTest
 UNIQUEIDENTIFIER null /* Тест */
go
if  not exists(select * from syscolumns where name='testIsReady' and id=object_id(N'testRequest'))
alter table testRequest add 
testIsReady
 integer null 
 check (testIsReady in ( 1/* Да */
, 0/* Нет */ )) /* Тест подготовлен */
go
if  not exists(select * from syscolumns where name='testCompleted' and id=object_id(N'testRequest'))
alter table testRequest add 
testCompleted
 integer null 
 check (testCompleted in ( 1/* Да */
, 0/* Нет */ )) /* Тест завершен */
go
if  not exists(select * from syscolumns where name='testFinished' and id=object_id(N'testRequest'))
alter table testRequest add 
testFinished
 integer null 
 check (testFinished in ( 1/* Да */
, 0/* Нет */ )) /* Тест проверен */
go
if  not exists(select * from syscolumns where name='testScore' and id=object_id(N'testRequest'))
alter table testRequest add 
testScore
 integer null /* Набрано баллов */
go
go
-- drop extra columns from generated table: testRequest
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('testRequest')
and name not in('testRequestID','TestPersonInfoID','requestDate','theTest','testIsReady','testCompleted','testFinished','testScore')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table testRequest drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_testRequest') and xtype='PK' and type='K')
ALTER TABLE testRequest DROP CONSTRAINT pk_testRequest
GO
alter table testRequest add constraint pk_testRequest primary key (testRequestID)

GO
/*Данные теста*/
if not exists (select * from sysobjects where id = object_id(N'onlineSubTest') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table onlineSubTest/*Субтесты для  прохождения On-Line  теста*/ (
testRequestID uniqueidentifier not null,
onlineSubTestid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='testJSON' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
testJSON
 TEXT null /* Сформированный вариант */
go
if  not exists(select * from syscolumns where name='testPlayer' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
testPlayer
 UNIQUEIDENTIFIER null /* Проигрыватель теста */
go
if  not exists(select * from syscolumns where name='subtestAnswers' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
subtestAnswers
 TEXT null /* Блок ответов */
go
if  not exists(select * from syscolumns where name='needCheck' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
needCheck
 INTEGER null 
 check (needCheck in ( -1/* Да */
, 0/* Нет */ )) /* Требует проверки */
go
if  not exists(select * from syscolumns where name='subtestFinished' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
subtestFinished
 integer null 
 check (subtestFinished in ( 1/* Да */
, 0/* Нет */ )) /* Субтест завершен */
go
if  not exists(select * from syscolumns where name='subtestChecked' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
subtestChecked
 integer null 
 check (subtestChecked in ( 1/* Да */
, 0/* Нет */ )) /* Субтест проверен */
go
if  not exists(select * from syscolumns where name='checkPerson' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
checkPerson
 UNIQUEIDENTIFIER null /* Проверяющий */
go
if  not exists(select * from syscolumns where name='subtestScore' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
subtestScore
 integer null /* Баллы за субтест */
go
if  not exists(select * from syscolumns where name='checkLog' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
checkLog
 TEXT null /* Протокол проверки */
go
if  not exists(select * from syscolumns where name='okScore' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
okScore
 integer null /* Балы за правильные ответы */
go
if  not exists(select * from syscolumns where name='maxScore' and id=object_id(N'onlineSubTest'))
alter table onlineSubTest add 
maxScore
 integer null /* Максимальный бал за  субтест */
go
go
-- drop extra columns from generated table: onlineSubTest
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('onlineSubTest')
and name not in('testRequestID','onlineSubTestID','name','testJSON','testPlayer','subtestAnswers','needCheck','subtestFinished','subtestChecked','checkPerson','subtestScore','checkLog','okScore','maxScore')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table onlineSubTest drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_onlineSubTest') and xtype='PK' and type='K')
ALTER TABLE onlineSubTest DROP CONSTRAINT pk_onlineSubTest
GO
alter table onlineSubTest add constraint pk_onlineSubTest primary key (onlineSubTestID)

GO
/* TYPE=XUser (Пользователь) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'XUserInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserInfo/*Обучающийся*/ (
XUserInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Family' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
Family
 VARCHAR (255) null /* Фамилия */
go
if  not exists(select * from syscolumns where name='Login' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
Login
 VARCHAR (64) null /* Имя для входа */
go
if  not exists(select * from syscolumns where name='SurName' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
SurName
 VARCHAR (255) null /* Отчество */
go
if  not exists(select * from syscolumns where name='EMail' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
EMail varchar(255) null /* e-mail */
go
if  not exists(select * from syscolumns where name='Phone' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
Phone
 VARCHAR (20) null /* Телефон */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
Name
 VARCHAR (64) null /* Имя */
go
if  not exists(select * from syscolumns where name='Password' and id=object_id(N'XUserInfo'))
alter table XUserInfo add 
Password varchar(80) null /* Пароль */
go
go
-- drop extra columns from generated table: XUserInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserInfo')
and name not in('XUserInfoID','Family','Login','SurName','EMail','Phone','Name','Password')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserInfo') and xtype='PK' and type='K')
ALTER TABLE XUserInfo DROP CONSTRAINT pk_XUserInfo
GO
alter table XUserInfo add constraint pk_XUserInfo primary key (XUserInfoID)

GO
/*Подписки*/
if not exists (select * from sysobjects where id = object_id(N'XSubscription') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XSubscription/*Подписки пользователя*/ (
XSubscriptionid uniqueidentifier not null rowguidcol default ( newid())  
,XUserInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='SubscriptionType' and id=object_id(N'XSubscription'))
alter table XSubscription add 
SubscriptionType
 UNIQUEIDENTIFIER null /* Тип подписки */
go
if  not exists(select * from syscolumns where name='FromDate' and id=object_id(N'XSubscription'))
alter table XSubscription add 
FromDate
 DATETIME null /* С */
go
if  not exists(select * from syscolumns where name='ToDate' and id=object_id(N'XSubscription'))
alter table XSubscription add 
ToDate
 DATETIME null /* По */
go
go
-- drop extra columns from generated table: XSubscription
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XSubscription')
and name not in('XSubscriptionID','XUserInfoID','SubscriptionType','FromDate','ToDate')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XSubscription drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XSubscription') and xtype='PK' and type='K')
ALTER TABLE XSubscription DROP CONSTRAINT pk_XSubscription
GO
alter table XSubscription add constraint pk_XSubscription primary key (XSubscriptionID)

GO
/*Покупки пользователя*/
if not exists (select * from sysobjects where id = object_id(N'XUserPurchase') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserPurchase/*Покупки  пользователя*/ (
XUserPurchaseid uniqueidentifier not null rowguidcol default ( newid())  
,XUserInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theCourse' and id=object_id(N'XUserPurchase'))
alter table XUserPurchase add 
theCourse
 UNIQUEIDENTIFIER null /* Курс */
go
go
-- drop extra columns from generated table: XUserPurchase
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserPurchase')
and name not in('XUserPurchaseID','XUserInfoID','theCourse')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserPurchase drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserPurchase') and xtype='PK' and type='K')
ALTER TABLE XUserPurchase DROP CONSTRAINT pk_XUserPurchase
GO
alter table XUserPurchase add constraint pk_XUserPurchase primary key (XUserPurchaseID)

GO
/*Результаты обучения*/
if not exists (select * from sysobjects where id = object_id(N'XUserProfile') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserProfile/*Результаты прохождения  курсов*/ (
XUserProfileid uniqueidentifier not null rowguidcol default ( newid())  
,XUserInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theCourse' and id=object_id(N'XUserProfile'))
alter table XUserProfile add 
theCourse
 UNIQUEIDENTIFIER null /* Курс */
go
go
-- drop extra columns from generated table: XUserProfile
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserProfile')
and name not in('XUserProfileID','XUserInfoID','theCourse')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserProfile drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserProfile') and xtype='PK' and type='K')
ALTER TABLE XUserProfile DROP CONSTRAINT pk_XUserProfile
GO
alter table XUserProfile add constraint pk_XUserProfile primary key (XUserProfileID)

GO
/*Запись на  курс*/
if not exists (select * from sysobjects where id = object_id(N'XUserRegistartion') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserRegistartion/*Запись на  курс*/ (
XUserRegistartionid uniqueidentifier not null rowguidcol default ( newid())  
,XUserInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theCourseSchedule' and id=object_id(N'XUserRegistartion'))
alter table XUserRegistartion add 
theCourseSchedule
 UNIQUEIDENTIFIER null /* Запись на  курс */
go
go
-- drop extra columns from generated table: XUserRegistartion
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserRegistartion')
and name not in('XUserRegistartionID','XUserInfoID','theCourseSchedule')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserRegistartion drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserRegistartion') and xtype='PK' and type='K')
ALTER TABLE XUserRegistartion DROP CONSTRAINT pk_XUserRegistartion
GO
alter table XUserRegistartion add constraint pk_XUserRegistartion primary key (XUserRegistartionID)

GO
/*Корзина*/
if not exists (select * from sysobjects where id = object_id(N'XUserCart') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XUserCart/*Текущее состояние  корзины*/ (
XUserCartid uniqueidentifier not null rowguidcol default ( newid())  
,XUserInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theCourse' and id=object_id(N'XUserCart'))
alter table XUserCart add 
theCourse
 UNIQUEIDENTIFIER null /* Курс */
go
if  not exists(select * from syscolumns where name='SubscriptionType' and id=object_id(N'XUserCart'))
alter table XUserCart add 
SubscriptionType
 UNIQUEIDENTIFIER null /* Тип подписки */
go
if  not exists(select * from syscolumns where name='FromDate' and id=object_id(N'XUserCart'))
alter table XUserCart add 
FromDate
 DATETIME null /* С */
go
if  not exists(select * from syscolumns where name='ToDate' and id=object_id(N'XUserCart'))
alter table XUserCart add 
ToDate
 DATETIME null /* По */
go
go
-- drop extra columns from generated table: XUserCart
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XUserCart')
and name not in('XUserCartID','XUserInfoID','theCourse','SubscriptionType','FromDate','ToDate')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XUserCart drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XUserCart') and xtype='PK' and type='K')
ALTER TABLE XUserCart DROP CONSTRAINT pk_XUserCart
GO
alter table XUserCart add constraint pk_XUserCart primary key (XUserCartID)

GO
/* TYPE=XSchedule (Расписание курсов) */
GO
/*Расписание*/
if not exists (select * from sysobjects where id = object_id(N'XScheduleItem') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XScheduleItem/*Расписание проведения  курса*/ (
XScheduleItemid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='theCourse' and id=object_id(N'XScheduleItem'))
alter table XScheduleItem add 
theCourse
 UNIQUEIDENTIFIER null /* Курс */
go
if  not exists(select * from syscolumns where name='theInstructor' and id=object_id(N'XScheduleItem'))
alter table XScheduleItem add 
theInstructor
 UNIQUEIDENTIFIER null /* Инструктор */
go
if  not exists(select * from syscolumns where name='FromDate' and id=object_id(N'XScheduleItem'))
alter table XScheduleItem add 
FromDate
 DATETIME null /* С */
go
if  not exists(select * from syscolumns where name='ToDate' and id=object_id(N'XScheduleItem'))
alter table XScheduleItem add 
ToDate
 DATETIME null /* По */
go
go
-- drop extra columns from generated table: XScheduleItem
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XScheduleItem')
and name not in('XScheduleItemID','theCourse','theInstructor','FromDate','ToDate')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XScheduleItem drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XScheduleItem') and xtype='PK' and type='K')
ALTER TABLE XScheduleItem DROP CONSTRAINT pk_XScheduleItem
GO
alter table XScheduleItem add constraint pk_XScheduleItem primary key (XScheduleItemID)

GO
/* TYPE=MTZExt (Расширения функциональности) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'MTZExt_def') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table MTZExt_def/*Список зарегистрированных расширений*/ (
MTZExt_defid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'MTZExt_def'))
alter table MTZExt_def add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='ExtType' and id=object_id(N'MTZExt_def'))
alter table MTZExt_def add 
ExtType
 INTEGER null 
 check (ExtType in ( 6/* VerifyRowExt */
, 7/* CodeGenerator */
, 5/* DefaultExt */
, 0/* StatusExt */
, 4/* JrnlRunExt */
, 2/* CustomExt */
, 8/* ARMGenerator */
, 1/* OnFormExt */
, 3/* JrnlAddExt */ )) /* Тип расширения */
go
if  not exists(select * from syscolumns where name='TheDescription' and id=object_id(N'MTZExt_def'))
alter table MTZExt_def add 
TheDescription
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: MTZExt_def
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('MTZExt_def')
and name not in('MTZExt_defID','Name','ExtType','TheDescription')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table MTZExt_def drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_MTZExt_def') and xtype='PK' and type='K')
ALTER TABLE MTZExt_def DROP CONSTRAINT pk_MTZExt_def
GO
alter table MTZExt_def add constraint pk_MTZExt_def primary key (MTZExt_defID)

GO
/*Реализации расширения*/
if not exists (select * from sysobjects where id = object_id(N'MTZExtRel') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table MTZExtRel/*Реализации расширения для разных разработческих плаформ*/ (
MTZExtRelid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='ThePlatform' and id=object_id(N'MTZExtRel'))
alter table MTZExtRel add 
ThePlatform
 INTEGER null 
 check (ThePlatform in ( 3/* OTHER */
, 1/* DOTNET */
, 2/* JAVA */
, 0/* VB6 */ )) /* Реализация */
go
if  not exists(select * from syscolumns where name='TheClassName' and id=object_id(N'MTZExtRel'))
alter table MTZExtRel add 
TheClassName
 VARCHAR (255) null /* Название класса */
go
if  not exists(select * from syscolumns where name='TheLibraryName' and id=object_id(N'MTZExtRel'))
alter table MTZExtRel add 
TheLibraryName
 VARCHAR (255) null /* Название библиотеки */
go
go
-- drop extra columns from generated table: MTZExtRel
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('MTZExtRel')
and name not in('MTZExtRelID','ThePlatform','TheClassName','TheLibraryName')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table MTZExtRel drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_MTZExtRel') and xtype='PK' and type='K')
ALTER TABLE MTZExtRel DROP CONSTRAINT pk_MTZExtRel
GO
alter table MTZExtRel add constraint pk_MTZExtRel primary key (MTZExtRelID)

GO
/* TYPE=Certification (Сертификация) */
GO
/*Модули сертификата*/
if not exists (select * from sysobjects where id = object_id(N'certModules') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table certModules/*Модули ввходяшие в сертификат*/ (
certModulesid uniqueidentifier not null rowguidcol default ( newid())  
,certInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theTest' and id=object_id(N'certModules'))
alter table certModules add 
theTest
 UNIQUEIDENTIFIER null /* Модуль */
go
if  not exists(select * from syscolumns where name='passRule' and id=object_id(N'certModules'))
alter table certModules add 
passRule
 VARCHAR (4096) null /* Правило для прохода экзамена */
go
if  not exists(select * from syscolumns where name='conditionalRule' and id=object_id(N'certModules'))
alter table certModules add 
conditionalRule
 VARCHAR (4096) null /* Правило условного прохода */
go
go
-- drop extra columns from generated table: certModules
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('certModules')
and name not in('certModulesID','certInfoID','theTest','passRule','conditionalRule')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table certModules drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_certModules') and xtype='PK' and type='K')
ALTER TABLE certModules DROP CONSTRAINT pk_certModules
GO
alter table certModules add constraint pk_certModules primary key (certModulesID)

GO
/*Информация о сертификате*/
if not exists (select * from sysobjects where id = object_id(N'certInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table certInfo/*Информация о сертификате*/ (
certInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'certInfo'))
alter table certInfo add 
name
 VARCHAR (255) null /* Название сертификата */
go
if  not exists(select * from syscolumns where name='testLevel' and id=object_id(N'certInfo'))
alter table certInfo add 
testLevel
 UNIQUEIDENTIFIER null /* Уровень сложности */
go
if  not exists(select * from syscolumns where name='Info' and id=object_id(N'certInfo'))
alter table certInfo add 
Info
 VARCHAR (4096) null /* Информация о сертификате */
go
if  not exists(select * from syscolumns where name='certActive' and id=object_id(N'certInfo'))
alter table certInfo add 
certActive
 integer null 
 check (certActive in ( 1/* Да */
, 0/* Нет */ )) /* Активный сертификат */
go
if  not exists(select * from syscolumns where name='Order' and id=object_id(N'certInfo'))
alter table certInfo add 
Order
 integer null /* Порядок вывода */
go
if  not exists(select * from syscolumns where name='theORG' and id=object_id(N'certInfo'))
alter table certInfo add 
theORG
 UNIQUEIDENTIFIER null /* Организация владелец */
go
if  not exists(select * from syscolumns where name='passRule' and id=object_id(N'certInfo'))
alter table certInfo add 
passRule
 VARCHAR (512) null /* Правило для прохода экзамена */
go
if  not exists(select * from syscolumns where name='conditionalRule' and id=object_id(N'certInfo'))
alter table certInfo add 
conditionalRule
 VARCHAR (512) null /* Правило условного прохода */
go
go
-- drop extra columns from generated table: certInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('certInfo')
and name not in('certInfoID','name','testLevel','Info','certActive','Order','theORG','passRule','conditionalRule')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table certInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_certInfo') and xtype='PK' and type='K')
ALTER TABLE certInfo DROP CONSTRAINT pk_certInfo
GO
alter table certInfo add constraint pk_certInfo primary key (certInfoID)

GO
/* TYPE=MTZMetaModel (Спец.: Метамодель системы) */
GO
/*Пакет генерации*/
if not exists (select * from sysobjects where id = object_id(N'GENPACKAGE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GENPACKAGE/*Пакет генерации*/ (
GENPACKAGEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'GENPACKAGE'))
alter table GENPACKAGE add 
Name
 VARCHAR (255) null /* Название */
go
go
-- drop extra columns from generated table: GENPACKAGE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GENPACKAGE')
and name not in('GENPACKAGEID','Name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GENPACKAGE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GENPACKAGE') and xtype='PK' and type='K')
ALTER TABLE GENPACKAGE DROP CONSTRAINT pk_GENPACKAGE
GO
alter table GENPACKAGE add constraint pk_GENPACKAGE primary key (GENPACKAGEID)

GO
/*Генераторы*/
if not exists (select * from sysobjects where id = object_id(N'GENERATOR_TARGET') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GENERATOR_TARGET/*Генераторы*/ (
GENPACKAGEID uniqueidentifier not null,
GENERATOR_TARGETid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TargetType' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
TargetType
 integer null 
 check (TargetType in ( 0/* СУБД */
, 3/* Документация */
, 1/* МОДЕЛЬ */
, 2/* Приложение */
, 4/* АРМ */ )) /* Тип платформы */
go
if  not exists(select * from syscolumns where name='QueueName' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
QueueName
 VARCHAR (255) null /* Очередь */
go
if  not exists(select * from syscolumns where name='GeneratorProgID' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
GeneratorProgID
 VARCHAR (255) null /* COM класс */
go
if  not exists(select * from syscolumns where name='GeneratorStyle' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
GeneratorStyle
 INTEGER null 
 check (GeneratorStyle in ( 0/* Один тип */
, 1/* Все типы сразу */ )) /* Вариант */
go
if  not exists(select * from syscolumns where name='TheDevelopmentEnv' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
TheDevelopmentEnv
 INTEGER null 
 check (TheDevelopmentEnv in ( 3/* OTHER */
, 1/* DOTNET */
, 2/* JAVA */
, 0/* VB6 */ )) /* Среда разработки */
go
go
-- drop extra columns from generated table: GENERATOR_TARGET
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GENERATOR_TARGET')
and name not in('GENPACKAGEID','GENERATOR_TARGETID','Name','TargetType','QueueName','GeneratorProgID','GeneratorStyle','TheDevelopmentEnv')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GENERATOR_TARGET drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GENERATOR_TARGET') and xtype='PK' and type='K')
ALTER TABLE GENERATOR_TARGET DROP CONSTRAINT pk_GENERATOR_TARGET
GO
alter table GENERATOR_TARGET add constraint pk_GENERATOR_TARGET primary key (GENERATOR_TARGETID)

GO
/*Библиотеки*/
if not exists (select * from sysobjects where id = object_id(N'GENREFERENCE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GENREFERENCE/*Библиотеки, которые используются при генерации*/ (
GENERATOR_TARGETID uniqueidentifier not null,
GENREFERENCEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'GENREFERENCE'))
alter table GENREFERENCE add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='RefClassID' and id=object_id(N'GENREFERENCE'))
alter table GENREFERENCE add 
RefClassID
 VARCHAR (40) null /* Класс ссылки */
go
if  not exists(select * from syscolumns where name='VersionMajor' and id=object_id(N'GENREFERENCE'))
alter table GENREFERENCE add 
VersionMajor
 integer null /* Номер версии */
go
if  not exists(select * from syscolumns where name='VersionMinor' and id=object_id(N'GENREFERENCE'))
alter table GENREFERENCE add 
VersionMinor
 integer null /* Подверсия */
go
go
-- drop extra columns from generated table: GENREFERENCE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GENREFERENCE')
and name not in('GENERATOR_TARGETID','GENREFERENCEID','Name','RefClassID','VersionMajor','VersionMinor')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GENREFERENCE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GENREFERENCE') and xtype='PK' and type='K')
ALTER TABLE GENREFERENCE DROP CONSTRAINT pk_GENREFERENCE
GO
alter table GENREFERENCE add constraint pk_GENREFERENCE primary key (GENREFERENCEID)

GO
/*Ручной код*/
if not exists (select * from sysobjects where id = object_id(N'GENMANUALCODE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GENMANUALCODE/*Код, который не укладывается в описание модели*/ (
GENERATOR_TARGETID uniqueidentifier not null,
GENMANUALCODEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'GENMANUALCODE'))
alter table GENMANUALCODE add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Alias' and id=object_id(N'GENMANUALCODE'))
alter table GENMANUALCODE add 
the_Alias
 VARCHAR (80) null /* Псевдоним */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'GENMANUALCODE'))
alter table GENMANUALCODE add 
Code
 TEXT null /* Код */
go
go
-- drop extra columns from generated table: GENMANUALCODE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GENMANUALCODE')
and name not in('GENERATOR_TARGETID','GENMANUALCODEID','Name','the_Alias','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GENMANUALCODE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GENMANUALCODE') and xtype='PK' and type='K')
ALTER TABLE GENMANUALCODE DROP CONSTRAINT pk_GENMANUALCODE
GO
alter table GENMANUALCODE add constraint pk_GENMANUALCODE primary key (GENMANUALCODEID)

GO
/*Контрольные элементы*/
if not exists (select * from sysobjects where id = object_id(N'GENCONTROLS') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GENCONTROLS/*Контрольные элементы, которые используются при генерации*/ (
GENERATOR_TARGETID uniqueidentifier not null,
GENCONTROLSid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='ControlProgID' and id=object_id(N'GENCONTROLS'))
alter table GENCONTROLS add 
ControlProgID
 VARCHAR (255) null /* ProgID контрольконо элемента */
go
if  not exists(select * from syscolumns where name='ControlClassID' and id=object_id(N'GENCONTROLS'))
alter table GENCONTROLS add 
ControlClassID
 VARCHAR (40) null /* Класс контрольногоэлемента */
go
if  not exists(select * from syscolumns where name='VersionMajor' and id=object_id(N'GENCONTROLS'))
alter table GENCONTROLS add 
VersionMajor
 integer null /* Версия */
go
if  not exists(select * from syscolumns where name='VersionMinor' and id=object_id(N'GENCONTROLS'))
alter table GENCONTROLS add 
VersionMinor
 integer null /* Подверсия */
go
go
-- drop extra columns from generated table: GENCONTROLS
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GENCONTROLS')
and name not in('GENERATOR_TARGETID','GENCONTROLSID','ControlProgID','ControlClassID','VersionMajor','VersionMinor')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GENCONTROLS drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GENCONTROLS') and xtype='PK' and type='K')
ALTER TABLE GENCONTROLS DROP CONSTRAINT pk_GENCONTROLS
GO
alter table GENCONTROLS add constraint pk_GENCONTROLS primary key (GENCONTROLSID)

GO
/*Локализация*/
if not exists (select * from sysobjects where id = object_id(N'LocalizeInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table LocalizeInfo/**/ (
LocalizeInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='LangFull' and id=object_id(N'LocalizeInfo'))
alter table LocalizeInfo add 
LangFull
 VARCHAR (255) null /* Язык - название */
go
if  not exists(select * from syscolumns where name='LangShort' and id=object_id(N'LocalizeInfo'))
alter table LocalizeInfo add 
LangShort
 VARCHAR (255) null /* Код языка */
go
go
-- drop extra columns from generated table: LocalizeInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('LocalizeInfo')
and name not in('LocalizeInfoID','LangFull','LangShort')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table LocalizeInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_LocalizeInfo') and xtype='PK' and type='K')
ALTER TABLE LocalizeInfo DROP CONSTRAINT pk_LocalizeInfo
GO
alter table LocalizeInfo add constraint pk_LocalizeInfo primary key (LocalizeInfoID)

GO
/*Тип поля*/
if not exists (select * from sysobjects where id = object_id(N'FIELDTYPE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDTYPE/*Типы полей, перечисления, интервалы*/ (
FIELDTYPEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TypeStyle' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
TypeStyle
 INTEGER null 
 check (TypeStyle in ( 4/* Ссылка */
, 1/* Выражение */
, 5/* Элемент оформления */
, 3/* Интервал */
, 2/* Перечисление */
, 0/* Скалярный тип */ )) /* Трактовка */
go
if  not exists(select * from syscolumns where name='the_Comment' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
the_Comment
 TEXT null /* Описание */
go
if  not exists(select * from syscolumns where name='AllowSize' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
AllowSize
 INTEGER null 
 check (AllowSize in ( -1/* Да */
, 0/* Нет */ )) /* Нужен размер */
go
if  not exists(select * from syscolumns where name='Minimum' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
Minimum
 VARCHAR (64) null /* Минимум */
go
if  not exists(select * from syscolumns where name='Maximum' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
Maximum
 VARCHAR (64) null /* Максимум */
go
if  not exists(select * from syscolumns where name='AllowLikeSearch' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
AllowLikeSearch
 INTEGER null 
 check (AllowLikeSearch in ( -1/* Да */
, 0/* Нет */ )) /* Поиск текста */
go
if  not exists(select * from syscolumns where name='GridSortType' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
GridSortType
 INTEGER null 
 check (GridSortType in ( 0/* As String */
, 1/* As Numeric */
, 2/* As Date */ )) /* Вариант сортировки в табличном представлении */
go
if  not exists(select * from syscolumns where name='DelayedSave' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
DelayedSave
 INTEGER null 
 check (DelayedSave in ( -1/* Да */
, 0/* Нет */ )) /* Отложенное сохранение */
go
go
-- drop extra columns from generated table: FIELDTYPE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDTYPE')
and name not in('FIELDTYPEID','Name','TypeStyle','the_Comment','AllowSize','Minimum','Maximum','AllowLikeSearch','GridSortType','DelayedSave')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDTYPE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDTYPE') and xtype='PK' and type='K')
ALTER TABLE FIELDTYPE DROP CONSTRAINT pk_FIELDTYPE
GO
alter table FIELDTYPE add constraint pk_FIELDTYPE primary key (FIELDTYPEID)

GO
/*Зачения*/
if not exists (select * from sysobjects where id = object_id(N'ENUMITEM') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ENUMITEM/*Для описания Enum типов*/ (
FIELDTYPEID uniqueidentifier not null,
ENUMITEMid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'ENUMITEM'))
alter table ENUMITEM add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='NameValue' and id=object_id(N'ENUMITEM'))
alter table ENUMITEM add 
NameValue
 integer null /* Значение */
go
if  not exists(select * from syscolumns where name='NameInCode' and id=object_id(N'ENUMITEM'))
alter table ENUMITEM add 
NameInCode
 VARCHAR (100) null /* Название в коде */
go
go
-- drop extra columns from generated table: ENUMITEM
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ENUMITEM')
and name not in('FIELDTYPEID','ENUMITEMID','Name','NameValue','NameInCode')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ENUMITEM drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ENUMITEM') and xtype='PK' and type='K')
ALTER TABLE ENUMITEM DROP CONSTRAINT pk_ENUMITEM
GO
alter table ENUMITEM add constraint pk_ENUMITEM primary key (ENUMITEMID)

GO
/*Отображение*/
if not exists (select * from sysobjects where id = object_id(N'FIELDTYPEMAP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDTYPEMAP/*Отображение типа поля на физический тип хранения*/ (
FIELDTYPEID uniqueidentifier not null,
FIELDTYPEMAPid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'FIELDTYPEMAP'))
alter table FIELDTYPEMAP add 
Target
 UNIQUEIDENTIFIER null /* Платформа */
go
if  not exists(select * from syscolumns where name='StoageType' and id=object_id(N'FIELDTYPEMAP'))
alter table FIELDTYPEMAP add 
StoageType
 VARCHAR (255) null /* Тип хранения */
go
if  not exists(select * from syscolumns where name='FixedSize' and id=object_id(N'FIELDTYPEMAP'))
alter table FIELDTYPEMAP add 
FixedSize
 integer null /* Размер */
go
go
-- drop extra columns from generated table: FIELDTYPEMAP
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDTYPEMAP')
and name not in('FIELDTYPEID','FIELDTYPEMAPID','Target','StoageType','FixedSize')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDTYPEMAP drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDTYPEMAP') and xtype='PK' and type='K')
ALTER TABLE FIELDTYPEMAP DROP CONSTRAINT pk_FIELDTYPEMAP
GO
alter table FIELDTYPEMAP add constraint pk_FIELDTYPEMAP primary key (FIELDTYPEMAPID)

GO
/*Методы и процедуры*/
if not exists (select * from sysobjects where id = object_id(N'SHAREDMETHOD') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table SHAREDMETHOD/*Методы и процедуры*/ (
SHAREDMETHODid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'SHAREDMETHOD'))
alter table SHAREDMETHOD add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Comment' and id=object_id(N'SHAREDMETHOD'))
alter table SHAREDMETHOD add 
the_Comment
 TEXT null /* Описание метода */
go
if  not exists(select * from syscolumns where name='ReturnType' and id=object_id(N'SHAREDMETHOD'))
alter table SHAREDMETHOD add 
ReturnType
 UNIQUEIDENTIFIER null /* Возвращаемый тип */
go
go
-- drop extra columns from generated table: SHAREDMETHOD
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('SHAREDMETHOD')
and name not in('SHAREDMETHODID','Name','the_Comment','ReturnType')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table SHAREDMETHOD drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_SHAREDMETHOD') and xtype='PK' and type='K')
ALTER TABLE SHAREDMETHOD DROP CONSTRAINT pk_SHAREDMETHOD
GO
alter table SHAREDMETHOD add constraint pk_SHAREDMETHOD primary key (SHAREDMETHODID)

GO
/*Реализация*/
if not exists (select * from sysobjects where id = object_id(N'SCRIPT') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table SCRIPT/*Код метода на понятном конкретному генератору языке*/ (
SHAREDMETHODID uniqueidentifier not null,
SCRIPTid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'SCRIPT'))
alter table SCRIPT add 
Target
 UNIQUEIDENTIFIER null /* Целевая платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'SCRIPT'))
alter table SCRIPT add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: SCRIPT
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('SCRIPT')
and name not in('SHAREDMETHODID','SCRIPTID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table SCRIPT drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_SCRIPT') and xtype='PK' and type='K')
ALTER TABLE SCRIPT DROP CONSTRAINT pk_SCRIPT
GO
alter table SCRIPT add constraint pk_SCRIPT primary key (SCRIPTID)

GO
/*Параметры*/
if not exists (select * from sysobjects where id = object_id(N'PARAMETERS') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PARAMETERS/*Параметры метода*/ (
SCRIPTID uniqueidentifier not null,
PARAMETERSid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
sequence
 integer null /* Последовательность */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
Name
 VARCHAR (80) null /* Имя */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
Caption
 VARCHAR (80) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='TypeOfParm' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
TypeOfParm
 UNIQUEIDENTIFIER null /* Тип данных */
go
if  not exists(select * from syscolumns where name='DataSize' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
DataSize
 integer null /* Размер */
go
if  not exists(select * from syscolumns where name='AllowNull' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
AllowNull
 INTEGER null 
 check (AllowNull in ( -1/* Да */
, 0/* Нет */ )) /* Можно не задавать */
go
if  not exists(select * from syscolumns where name='OutParam' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
OutParam
 INTEGER null 
 check (OutParam in ( -1/* Да */
, 0/* Нет */ )) /* Возвращает значение */
go
if  not exists(select * from syscolumns where name='ReferenceType' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
ReferenceType
 INTEGER null 
 check (ReferenceType in ( 3/* На источник данных */
, 0/* Скалярное поле ( не ссылка) */
, 2/* На строку раздела */
, 1/* На объект  */ )) /* Тип ссылки */
go
if  not exists(select * from syscolumns where name='RefToType' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
RefToType
 UNIQUEIDENTIFIER null /* Ссылка на тип */
go
if  not exists(select * from syscolumns where name='RefToPart' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
RefToPart
 UNIQUEIDENTIFIER null /* Ссылка на раздел */
go
go
-- drop extra columns from generated table: PARAMETERS
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PARAMETERS')
and name not in('SCRIPTID','PARAMETERSID','sequence','Name','Caption','TypeOfParm','DataSize','AllowNull','OutParam','ReferenceType','RefToType','RefToPart')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PARAMETERS drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PARAMETERS') and xtype='PK' and type='K')
ALTER TABLE PARAMETERS DROP CONSTRAINT pk_PARAMETERS
GO
alter table PARAMETERS add constraint pk_PARAMETERS primary key (PARAMETERSID)

GO
/*Тип объекта*/
if not exists (select * from sysobjects where id = object_id(N'OBJECTTYPE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table OBJECTTYPE/*Тип объекта (карточки)*/ (
OBJECTTYPEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Package' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
Package
 UNIQUEIDENTIFIER null /* Приложение */
go
if  not exists(select * from syscolumns where name='the_Comment' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
the_Comment
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
Name
 VARCHAR (14) null /* Код */
go
if  not exists(select * from syscolumns where name='IsSingleInstance' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
IsSingleInstance
 INTEGER null 
 check (IsSingleInstance in ( -1/* Да */
, 0/* Нет */ )) /* Допускается только один объект */
go
if  not exists(select * from syscolumns where name='ChooseView' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
ChooseView
 UNIQUEIDENTIFIER null /* Представление для выбора */
go
if  not exists(select * from syscolumns where name='OnRun' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
OnRun
 UNIQUEIDENTIFIER null /* При запуске */
go
if  not exists(select * from syscolumns where name='OnCreate' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
OnCreate
 UNIQUEIDENTIFIER null /* При создании */
go
if  not exists(select * from syscolumns where name='OnDelete' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
OnDelete
 UNIQUEIDENTIFIER null /* При удалении */
go
if  not exists(select * from syscolumns where name='AllowRefToObject' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
AllowRefToObject
 INTEGER null 
 check (AllowRefToObject in ( -1/* Да */
, 0/* Нет */ )) /* Отображать при выборе ссылки */
go
if  not exists(select * from syscolumns where name='AllowSearch' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
AllowSearch
 INTEGER null 
 check (AllowSearch in ( -1/* Да */
, 0/* Нет */ )) /* Отображать при поиске */
go
if  not exists(select * from syscolumns where name='ReplicaType' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
ReplicaType
 INTEGER null 
 check (ReplicaType in ( 1/* Построчно */
, 0/* Весь документ */
, 2/* Локальный */ )) /* Тип репликации */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
TheComment
 TEXT null /* Описание */
go
if  not exists(select * from syscolumns where name='UseOwnership' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
UseOwnership
 INTEGER null 
 check (UseOwnership in ( -1/* Да */
, 0/* Нет */ )) /* Видмость зависит от пользователя */
go
if  not exists(select * from syscolumns where name='UseArchiving' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
UseArchiving
 INTEGER null 
 check (UseArchiving in ( -1/* Да */
, 0/* Нет */ )) /* Архивировать вместо удаления */
go
if  not exists(select * from syscolumns where name='CommitFullObject' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
CommitFullObject
 INTEGER null 
 check (CommitFullObject in ( -1/* Да */
, 0/* Нет */ )) /* Сохранять объект целиком */
go
if  not exists(select * from syscolumns where name='objIconCls' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
objIconCls
 VARCHAR (80) null /* Иконка объекта */
go
go
-- drop extra columns from generated table: OBJECTTYPE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('OBJECTTYPE')
and name not in('OBJECTTYPEID','Package','the_Comment','Name','IsSingleInstance','ChooseView','OnRun','OnCreate','OnDelete','AllowRefToObject','AllowSearch','ReplicaType','TheComment','UseOwnership','UseArchiving','CommitFullObject','objIconCls')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table OBJECTTYPE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_OBJECTTYPE') and xtype='PK' and type='K')
ALTER TABLE OBJECTTYPE DROP CONSTRAINT pk_OBJECTTYPE
GO
alter table OBJECTTYPE add constraint pk_OBJECTTYPE primary key (OBJECTTYPEID)

GO
/*Состояния*/
if not exists (select * from sysobjects where id = object_id(N'OBJSTATUS') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table OBJSTATUS/*Возможные логические состояния документа*/ (
OBJECTTYPEID uniqueidentifier not null,
OBJSTATUSid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'OBJSTATUS'))
alter table OBJSTATUS add 
name
 VARCHAR (80) null /* Название */
go
if  not exists(select * from syscolumns where name='isStartup' and id=object_id(N'OBJSTATUS'))
alter table OBJSTATUS add 
isStartup
 INTEGER null 
 check (isStartup in ( -1/* Да */
, 0/* Нет */ )) /* Начальное */
go
if  not exists(select * from syscolumns where name='IsArchive' and id=object_id(N'OBJSTATUS'))
alter table OBJSTATUS add 
IsArchive
 INTEGER null 
 check (IsArchive in ( -1/* Да */
, 0/* Нет */ )) /* Архивное */
go
if  not exists(select * from syscolumns where name='the_comment' and id=object_id(N'OBJSTATUS'))
alter table OBJSTATUS add 
the_comment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: OBJSTATUS
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('OBJSTATUS')
and name not in('OBJECTTYPEID','OBJSTATUSID','name','isStartup','IsArchive','the_comment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table OBJSTATUS drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_OBJSTATUS') and xtype='PK' and type='K')
ALTER TABLE OBJSTATUS DROP CONSTRAINT pk_OBJSTATUS
GO
alter table OBJSTATUS add constraint pk_OBJSTATUS primary key (OBJSTATUSID)

GO
/*Разрешенные переходы*/
if not exists (select * from sysobjects where id = object_id(N'NEXTSTATE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table NEXTSTATE/*Матрица переходов */ (
OBJSTATUSID uniqueidentifier not null,
NEXTSTATEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheState' and id=object_id(N'NEXTSTATE'))
alter table NEXTSTATE add 
TheState
 UNIQUEIDENTIFIER null /* Разрешенное состояние */
go
go
-- drop extra columns from generated table: NEXTSTATE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('NEXTSTATE')
and name not in('OBJSTATUSID','NEXTSTATEID','TheState')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table NEXTSTATE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_NEXTSTATE') and xtype='PK' and type='K')
ALTER TABLE NEXTSTATE DROP CONSTRAINT pk_NEXTSTATE
GO
alter table NEXTSTATE add constraint pk_NEXTSTATE primary key (NEXTSTATEID)

GO
/*Режим работы*/
if not exists (select * from sysobjects where id = object_id(N'OBJECTMODE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table OBJECTMODE/*Режим работы*/ (
OBJECTTYPEID uniqueidentifier not null,
OBJECTMODEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'OBJECTMODE'))
alter table OBJECTMODE add 
Name
 VARCHAR (5) null /* Название режима */
go
if  not exists(select * from syscolumns where name='DefaultMode' and id=object_id(N'OBJECTMODE'))
alter table OBJECTMODE add 
DefaultMode
 INTEGER null 
 check (DefaultMode in ( -1/* Да */
, 0/* Нет */ )) /* Этот режим является основным режимом работы объекта */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'OBJECTMODE'))
alter table OBJECTMODE add 
TheComment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: OBJECTMODE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('OBJECTMODE')
and name not in('OBJECTTYPEID','OBJECTMODEID','Name','DefaultMode','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table OBJECTMODE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_OBJECTMODE') and xtype='PK' and type='K')
ALTER TABLE OBJECTMODE DROP CONSTRAINT pk_OBJECTMODE
GO
alter table OBJECTMODE add constraint pk_OBJECTMODE primary key (OBJECTMODEID)

GO
/*Органичения разделов*/
if not exists (select * from sysobjects where id = object_id(N'STRUCTRESTRICTION') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table STRUCTRESTRICTION/*Ораничения на доступ к разделу документа*/ (
OBJECTMODEID uniqueidentifier not null,
STRUCTRESTRICTIONid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Struct' and id=object_id(N'STRUCTRESTRICTION'))
alter table STRUCTRESTRICTION add 
Struct
 UNIQUEIDENTIFIER null /* структура, доступ к которой ограничен */
go
if  not exists(select * from syscolumns where name='AllowRead' and id=object_id(N'STRUCTRESTRICTION'))
alter table STRUCTRESTRICTION add 
AllowRead
 INTEGER null 
 check (AllowRead in ( -1/* Да */
, 0/* Нет */ )) /* Разрешен просмотр */
go
if  not exists(select * from syscolumns where name='AllowAdd' and id=object_id(N'STRUCTRESTRICTION'))
alter table STRUCTRESTRICTION add 
AllowAdd
 INTEGER null 
 check (AllowAdd in ( -1/* Да */
, 0/* Нет */ )) /* Разрешено добавлять */
go
if  not exists(select * from syscolumns where name='AllowEdit' and id=object_id(N'STRUCTRESTRICTION'))
alter table STRUCTRESTRICTION add 
AllowEdit
 INTEGER null 
 check (AllowEdit in ( -1/* Да */
, 0/* Нет */ )) /* Разрешено изменять */
go
if  not exists(select * from syscolumns where name='AllowDelete' and id=object_id(N'STRUCTRESTRICTION'))
alter table STRUCTRESTRICTION add 
AllowDelete
 INTEGER null 
 check (AllowDelete in ( -1/* Да */
, 0/* Нет */ )) /* Разрешено удалять */
go
go
-- drop extra columns from generated table: STRUCTRESTRICTION
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('STRUCTRESTRICTION')
and name not in('OBJECTMODEID','STRUCTRESTRICTIONID','Struct','AllowRead','AllowAdd','AllowEdit','AllowDelete')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table STRUCTRESTRICTION drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_STRUCTRESTRICTION') and xtype='PK' and type='K')
ALTER TABLE STRUCTRESTRICTION DROP CONSTRAINT pk_STRUCTRESTRICTION
GO
alter table STRUCTRESTRICTION add constraint pk_STRUCTRESTRICTION primary key (STRUCTRESTRICTIONID)

GO
/*Ограничения методов*/
if not exists (select * from sysobjects where id = object_id(N'METHODRESTRICTION') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table METHODRESTRICTION/*Ограничение на использование методов раздела*/ (
OBJECTMODEID uniqueidentifier not null,
METHODRESTRICTIONid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Part' and id=object_id(N'METHODRESTRICTION'))
alter table METHODRESTRICTION add 
Part
 UNIQUEIDENTIFIER null /* Структура, которой принадлежит метод */
go
if  not exists(select * from syscolumns where name='Method' and id=object_id(N'METHODRESTRICTION'))
alter table METHODRESTRICTION add 
Method
 UNIQUEIDENTIFIER null /* Метод */
go
if  not exists(select * from syscolumns where name='IsRestricted' and id=object_id(N'METHODRESTRICTION'))
alter table METHODRESTRICTION add 
IsRestricted
 INTEGER null 
 check (IsRestricted in ( -1/* Да */
, 0/* Нет */ )) /* Запрещено использовать */
go
go
-- drop extra columns from generated table: METHODRESTRICTION
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('METHODRESTRICTION')
and name not in('OBJECTMODEID','METHODRESTRICTIONID','Part','Method','IsRestricted')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table METHODRESTRICTION drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_METHODRESTRICTION') and xtype='PK' and type='K')
ALTER TABLE METHODRESTRICTION DROP CONSTRAINT pk_METHODRESTRICTION
GO
alter table METHODRESTRICTION add constraint pk_METHODRESTRICTION primary key (METHODRESTRICTIONID)

GO
/*Ограничения полей*/
if not exists (select * from sysobjects where id = object_id(N'FIELDRESTRICTION') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDRESTRICTION/*Ограничения на доступ к полям раздела*/ (
OBJECTMODEID uniqueidentifier not null,
FIELDRESTRICTIONid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='ThePart' and id=object_id(N'FIELDRESTRICTION'))
alter table FIELDRESTRICTION add 
ThePart
 UNIQUEIDENTIFIER null /* Структура, которой принадлежит поле */
go
if  not exists(select * from syscolumns where name='TheField' and id=object_id(N'FIELDRESTRICTION'))
alter table FIELDRESTRICTION add 
TheField
 UNIQUEIDENTIFIER null /* Поле, на которое накладывается ограничение */
go
if  not exists(select * from syscolumns where name='AllowRead' and id=object_id(N'FIELDRESTRICTION'))
alter table FIELDRESTRICTION add 
AllowRead
 INTEGER null 
 check (AllowRead in ( -1/* Да */
, 0/* Нет */ )) /* Разрешен просмотр */
go
if  not exists(select * from syscolumns where name='AllowModify' and id=object_id(N'FIELDRESTRICTION'))
alter table FIELDRESTRICTION add 
AllowModify
 INTEGER null 
 check (AllowModify in ( -1/* Да */
, 0/* Нет */ )) /* Разрешена модификация */
go
if  not exists(select * from syscolumns where name='MandatoryField' and id=object_id(N'FIELDRESTRICTION'))
alter table FIELDRESTRICTION add 
MandatoryField
 integer null 
 check (MandatoryField in ( -1/* Не существенно */
, 1/* Да */
, 0/* Нет */ )) /* Обязательное поле */
go
go
-- drop extra columns from generated table: FIELDRESTRICTION
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDRESTRICTION')
and name not in('OBJECTMODEID','FIELDRESTRICTIONID','ThePart','TheField','AllowRead','AllowModify','MandatoryField')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDRESTRICTION drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDRESTRICTION') and xtype='PK' and type='K')
ALTER TABLE FIELDRESTRICTION DROP CONSTRAINT pk_FIELDRESTRICTION
GO
alter table FIELDRESTRICTION add constraint pk_FIELDRESTRICTION primary key (FIELDRESTRICTIONID)

GO
/*Методы типа*/
if not exists (select * from sysobjects where id = object_id(N'TYPEMENU') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TYPEMENU/*Методы уровня типа*/ (
OBJECTTYPEID uniqueidentifier not null,
TYPEMENUid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
Caption
 VARCHAR (80) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='ToolTip' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
ToolTip
 VARCHAR (80) null /* Подсказка */
go
if  not exists(select * from syscolumns where name='the_Action' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
the_Action
 UNIQUEIDENTIFIER null /* Метод */
go
if  not exists(select * from syscolumns where name='IsMenuItem' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
IsMenuItem
 INTEGER null 
 check (IsMenuItem in ( -1/* Да */
, 0/* Нет */ )) /* Включать в меню */
go
if  not exists(select * from syscolumns where name='IsToolBarButton' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
IsToolBarButton
 INTEGER null 
 check (IsToolBarButton in ( -1/* Да */
, 0/* Нет */ )) /* Включать в тулбар */
go
if  not exists(select * from syscolumns where name='HotKey' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
HotKey
 VARCHAR (20) null /* Горячая клавиша */
go
go
-- drop extra columns from generated table: TYPEMENU
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TYPEMENU')
and name not in('OBJECTTYPEID','TYPEMENUID','Name','Caption','ToolTip','the_Action','IsMenuItem','IsToolBarButton','HotKey')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TYPEMENU drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TYPEMENU') and xtype='PK' and type='K')
ALTER TABLE TYPEMENU DROP CONSTRAINT pk_TYPEMENU
GO
alter table TYPEMENU add constraint pk_TYPEMENU primary key (TYPEMENUID)

GO
/*Проверка правильности*/
if not exists (select * from sysobjects where id = object_id(N'INSTANCEVALIDATOR') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table INSTANCEVALIDATOR/*Проверка правильности для объекта в целом*/ (
OBJECTTYPEID uniqueidentifier not null,
INSTANCEVALIDATORid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'INSTANCEVALIDATOR'))
alter table INSTANCEVALIDATOR add 
Target
 UNIQUEIDENTIFIER null /* Платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'INSTANCEVALIDATOR'))
alter table INSTANCEVALIDATOR add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: INSTANCEVALIDATOR
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('INSTANCEVALIDATOR')
and name not in('OBJECTTYPEID','INSTANCEVALIDATORID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table INSTANCEVALIDATOR drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_INSTANCEVALIDATOR') and xtype='PK' and type='K')
ALTER TABLE INSTANCEVALIDATOR DROP CONSTRAINT pk_INSTANCEVALIDATOR
GO
alter table INSTANCEVALIDATOR add constraint pk_INSTANCEVALIDATOR primary key (INSTANCEVALIDATORID)

GO
/*Раздел*/
if not exists (select * from sysobjects where id = object_id(N'PART') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PART/*Раздел объекта*/ (
OBJECTTYPEID uniqueidentifier not null,
PARTid uniqueidentifier not null rowguidcol default ( newid())  
,ParentRowid uniqueidentifier 
)
END
go
if  not exists(select * from syscolumns where name='Sequence' and id=object_id(N'PART'))
alter table PART add 
Sequence
 integer null /* № п/п */
go
if  not exists(select * from syscolumns where name='PartType' and id=object_id(N'PART'))
alter table PART add 
PartType
 INTEGER null 
 check (PartType in ( 1/* Коллекция */
, 2/* Дерево */
, 0/* Строка */
, 4/* Расширение с данными */
, 3/* Расширение */ )) /* Тип структры */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'PART'))
alter table PART add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'PART'))
alter table PART add 
Name
 VARCHAR (20) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Comment' and id=object_id(N'PART'))
alter table PART add 
the_Comment
 TEXT null /* Описание */
go
if  not exists(select * from syscolumns where name='NoLog' and id=object_id(N'PART'))
alter table PART add 
NoLog
 INTEGER null 
 check (NoLog in ( -1/* Да */
, 0/* Нет */ )) /* Не записывать в журнал */
go
if  not exists(select * from syscolumns where name='ManualRegister' and id=object_id(N'PART'))
alter table PART add 
ManualRegister
 INTEGER null 
 check (ManualRegister in ( -1/* Да */
, 0/* Нет */ )) /* Исключить из индексирования */
go
if  not exists(select * from syscolumns where name='OnCreate' and id=object_id(N'PART'))
alter table PART add 
OnCreate
 UNIQUEIDENTIFIER null /* При создании */
go
if  not exists(select * from syscolumns where name='OnSave' and id=object_id(N'PART'))
alter table PART add 
OnSave
 UNIQUEIDENTIFIER null /* При сохранении */
go
if  not exists(select * from syscolumns where name='OnRun' and id=object_id(N'PART'))
alter table PART add 
OnRun
 UNIQUEIDENTIFIER null /* При открытии */
go
if  not exists(select * from syscolumns where name='OnDelete' and id=object_id(N'PART'))
alter table PART add 
OnDelete
 UNIQUEIDENTIFIER null /* При удалении */
go
if  not exists(select * from syscolumns where name='AddBehaivor' and id=object_id(N'PART'))
alter table PART add 
AddBehaivor
 INTEGER null 
 check (AddBehaivor in ( 0/* AddForm */
, 2/* RunAction */
, 1/* RefreshOnly */ )) /* Поведение при добавлении */
go
if  not exists(select * from syscolumns where name='ExtenderObject' and id=object_id(N'PART'))
alter table PART add 
ExtenderObject
 UNIQUEIDENTIFIER null /* Объект расширения */
go
if  not exists(select * from syscolumns where name='shablonBrief' and id=object_id(N'PART'))
alter table PART add 
shablonBrief
 VARCHAR (100) null /* Шаблон для краткого отображения */
go
if  not exists(select * from syscolumns where name='ruleBrief' and id=object_id(N'PART'))
alter table PART add 
ruleBrief
 VARCHAR (500) null /* Правило составления BRIEF поля */
go
if  not exists(select * from syscolumns where name='IsJormalChange' and id=object_id(N'PART'))
alter table PART add 
IsJormalChange
 INTEGER null 
 check (IsJormalChange in ( -1/* Да */
, 0/* Нет */ )) /* Вести журнал изменений */
go
if  not exists(select * from syscolumns where name='UseArchiving' and id=object_id(N'PART'))
alter table PART add 
UseArchiving
 INTEGER null 
 check (UseArchiving in ( -1/* Да */
, 0/* Нет */ )) /* Архивировать вместо удаления */
go
if  not exists(select * from syscolumns where name='integerpkey' and id=object_id(N'PART'))
alter table PART add 
integerpkey
 INTEGER null 
 check (integerpkey in ( -1/* Да */
, 0/* Нет */ )) /* Целочисленный ключ */
go
if  not exists(select * from syscolumns where name='partIconCls' and id=object_id(N'PART'))
alter table PART add 
partIconCls
 VARCHAR (80) null /* Иконка раздела */
go
go
-- drop extra columns from generated table: PART
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PART')
and name not in('OBJECTTYPEID','PARTID','ParentRowid','Sequence','PartType','Caption','Name','the_Comment','NoLog','ManualRegister','OnCreate','OnSave','OnRun','OnDelete','AddBehaivor','ExtenderObject','shablonBrief','ruleBrief','IsJormalChange','UseArchiving','integerpkey','partIconCls')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PART drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PART') and xtype='PK' and type='K')
ALTER TABLE PART DROP CONSTRAINT pk_PART
GO
alter table PART add constraint pk_PART primary key (PARTID)

GO
/*Методы раздела*/
if not exists (select * from sysobjects where id = object_id(N'PARTMENU') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PARTMENU/*Методы уровня раздела*/ (
PARTID uniqueidentifier not null,
PARTMENUid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
Caption
 VARCHAR (80) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='ToolTip' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
ToolTip
 VARCHAR (80) null /* Подсказка */
go
if  not exists(select * from syscolumns where name='the_Action' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
the_Action
 UNIQUEIDENTIFIER null /* Метод */
go
if  not exists(select * from syscolumns where name='IsMenuItem' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
IsMenuItem
 INTEGER null 
 check (IsMenuItem in ( -1/* Да */
, 0/* Нет */ )) /* Включать в меню */
go
if  not exists(select * from syscolumns where name='IsToolBarButton' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
IsToolBarButton
 INTEGER null 
 check (IsToolBarButton in ( -1/* Да */
, 0/* Нет */ )) /* В тулбар */
go
if  not exists(select * from syscolumns where name='HotKey' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
HotKey
 VARCHAR (20) null /* Горячая клавиша */
go
go
-- drop extra columns from generated table: PARTMENU
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PARTMENU')
and name not in('PARTID','PARTMENUID','Name','Caption','ToolTip','the_Action','IsMenuItem','IsToolBarButton','HotKey')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PARTMENU drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PARTMENU') and xtype='PK' and type='K')
ALTER TABLE PARTMENU DROP CONSTRAINT pk_PARTMENU
GO
alter table PARTMENU add constraint pk_PARTMENU primary key (PARTMENUID)

GO
/*Отображение параметров*/
if not exists (select * from sysobjects where id = object_id(N'PARTPARAMMAP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PARTPARAMMAP/*отображение значений полей раздела на параметры метода*/ (
PARTMENUID uniqueidentifier not null,
PARTPARAMMAPid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='FieldName' and id=object_id(N'PARTPARAMMAP'))
alter table PARTPARAMMAP add 
FieldName
 VARCHAR (255) null /* Поле (значение) */
go
if  not exists(select * from syscolumns where name='ParamName' and id=object_id(N'PARTPARAMMAP'))
alter table PARTPARAMMAP add 
ParamName
 VARCHAR (80) null /* Параметр */
go
if  not exists(select * from syscolumns where name='NoEdit' and id=object_id(N'PARTPARAMMAP'))
alter table PARTPARAMMAP add 
NoEdit
 INTEGER null 
 check (NoEdit in ( -1/* Да */
, 0/* Нет */ )) /* Редактировать параметр нельзя */
go
go
-- drop extra columns from generated table: PARTPARAMMAP
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PARTPARAMMAP')
and name not in('PARTMENUID','PARTPARAMMAPID','FieldName','ParamName','NoEdit')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PARTPARAMMAP drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PARTPARAMMAP') and xtype='PK' and type='K')
ALTER TABLE PARTPARAMMAP DROP CONSTRAINT pk_PARTPARAMMAP
GO
alter table PARTPARAMMAP add constraint pk_PARTPARAMMAP primary key (PARTPARAMMAPID)

GO
/*Представление*/
if not exists (select * from sysobjects where id = object_id(N'PARTVIEW') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PARTVIEW/*Вариант представления, который может использоваться для создания журнала*/ (
PARTID uniqueidentifier not null,
PARTVIEWid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Alias' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
the_Alias
 VARCHAR (64) null /* Псевдоним */
go
if  not exists(select * from syscolumns where name='ForChoose' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
ForChoose
 INTEGER null 
 check (ForChoose in ( -1/* Да */
, 0/* Нет */ )) /* Для поиска */
go
if  not exists(select * from syscolumns where name='FilterField0' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
FilterField0
 VARCHAR (255) null /* Поле - фильтр 0 */
go
if  not exists(select * from syscolumns where name='FilterField1' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
FilterField1
 VARCHAR (255) null /* Поле - фильтр 1 */
go
if  not exists(select * from syscolumns where name='FilterField2' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
FilterField2
 VARCHAR (255) null /* Поле - фильтр 2 */
go
if  not exists(select * from syscolumns where name='FilterField3' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
FilterField3
 VARCHAR (255) null /* Поле - фильтр 3 */
go
go
-- drop extra columns from generated table: PARTVIEW
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PARTVIEW')
and name not in('PARTID','PARTVIEWID','Name','the_Alias','ForChoose','FilterField0','FilterField1','FilterField2','FilterField3')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PARTVIEW drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PARTVIEW') and xtype='PK' and type='K')
ALTER TABLE PARTVIEW DROP CONSTRAINT pk_PARTVIEW
GO
alter table PARTVIEW add constraint pk_PARTVIEW primary key (PARTVIEWID)

GO
/*Колонка*/
if not exists (select * from sysobjects where id = object_id(N'ViewColumn') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ViewColumn/*Колонка пердставления*/ (
PARTVIEWID uniqueidentifier not null,
ViewColumnid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
sequence
 integer null /* № */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Alias' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
the_Alias
 VARCHAR (64) null /* Псвдоним */
go
if  not exists(select * from syscolumns where name='FromPart' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
FromPart
 UNIQUEIDENTIFIER null /* Раздел */
go
if  not exists(select * from syscolumns where name='Field' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
Field
 UNIQUEIDENTIFIER null /* Поле */
go
if  not exists(select * from syscolumns where name='Aggregation' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
Aggregation
 INTEGER null 
 check (Aggregation in ( 3/* SUM */
, 1/* AVG */
, 6/* CUSTOM */
, 0/* none */
, 2/* COUNT */
, 5/* MAX */
, 4/* MIN */ )) /* Агрегация */
go
if  not exists(select * from syscolumns where name='Expression' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
Expression
 TEXT null /* Формула */
go
if  not exists(select * from syscolumns where name='ForCombo' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
ForCombo
 INTEGER null 
 check (ForCombo in ( -1/* Да */
, 0/* Нет */ )) /* Для комбо */
go
go
-- drop extra columns from generated table: ViewColumn
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ViewColumn')
and name not in('PARTVIEWID','ViewColumnID','sequence','Name','the_Alias','FromPart','Field','Aggregation','Expression','ForCombo')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ViewColumn drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ViewColumn') and xtype='PK' and type='K')
ALTER TABLE ViewColumn DROP CONSTRAINT pk_ViewColumn
GO
alter table ViewColumn add constraint pk_ViewColumn primary key (ViewColumnID)

GO
/*Связанные представления*/
if not exists (select * from sysobjects where id = object_id(N'PARTVIEW_LNK') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PARTVIEW_LNK/**/ (
PARTVIEWID uniqueidentifier not null,
PARTVIEW_LNKid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheView' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
TheView
 UNIQUEIDENTIFIER null /* Представление */
go
if  not exists(select * from syscolumns where name='TheJoinSource' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
TheJoinSource
 UNIQUEIDENTIFIER null /* Связь: Поле для join источник */
go
if  not exists(select * from syscolumns where name='RefType' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
RefType
 integer null 
 check (RefType in ( 0/* Нет */
, 4/* Связка ParentStructRowID  (в передлах объекта) */
, 3/* Связка InstanceID (в передлах объекта) */
, 1/* Ссылка на объект */
, 2/* Ссылка на строку */ )) /* Связывать как */
go
if  not exists(select * from syscolumns where name='TheJoinDestination' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
TheJoinDestination
 UNIQUEIDENTIFIER null /* Свзяь: Поле для join приемник */
go
if  not exists(select * from syscolumns where name='HandJoin' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
HandJoin
 VARCHAR (255) null /* Ручной join */
go
if  not exists(select * from syscolumns where name='SEQ' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
SEQ
 integer null /* Порядок */
go
go
-- drop extra columns from generated table: PARTVIEW_LNK
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PARTVIEW_LNK')
and name not in('PARTVIEWID','PARTVIEW_LNKID','TheView','TheJoinSource','RefType','TheJoinDestination','HandJoin','SEQ')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PARTVIEW_LNK drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PARTVIEW_LNK') and xtype='PK' and type='K')
ALTER TABLE PARTVIEW_LNK DROP CONSTRAINT pk_PARTVIEW_LNK
GO
alter table PARTVIEW_LNK add constraint pk_PARTVIEW_LNK primary key (PARTVIEW_LNKID)

GO
/*Логика на форме*/
if not exists (select * from sysobjects where id = object_id(N'VALIDATOR') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table VALIDATOR/*Действия в впроцессе редактирования*/ (
PARTID uniqueidentifier not null,
VALIDATORid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'VALIDATOR'))
alter table VALIDATOR add 
Target
 UNIQUEIDENTIFIER null /* Целевая платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'VALIDATOR'))
alter table VALIDATOR add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: VALIDATOR
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('VALIDATOR')
and name not in('PARTID','VALIDATORID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table VALIDATOR drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_VALIDATOR') and xtype='PK' and type='K')
ALTER TABLE VALIDATOR DROP CONSTRAINT pk_VALIDATOR
GO
alter table VALIDATOR add constraint pk_VALIDATOR primary key (VALIDATORID)

GO
/*Ограничение уникальности*/
if not exists (select * from sysobjects where id = object_id(N'UNIQUECONSTRAINT') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table UNIQUECONSTRAINT/*Ограничение уникальности*/ (
PARTID uniqueidentifier not null,
UNIQUECONSTRAINTid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'UNIQUECONSTRAINT'))
alter table UNIQUECONSTRAINT add 
Name
 VARCHAR (80) null /* Название */
go
if  not exists(select * from syscolumns where name='PerParent' and id=object_id(N'UNIQUECONSTRAINT'))
alter table UNIQUECONSTRAINT add 
PerParent
 INTEGER null 
 check (PerParent in ( -1/* Да */
, 0/* Нет */ )) /* По родителю */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'UNIQUECONSTRAINT'))
alter table UNIQUECONSTRAINT add 
TheComment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: UNIQUECONSTRAINT
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('UNIQUECONSTRAINT')
and name not in('PARTID','UNIQUECONSTRAINTID','Name','PerParent','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table UNIQUECONSTRAINT drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_UNIQUECONSTRAINT') and xtype='PK' and type='K')
ALTER TABLE UNIQUECONSTRAINT DROP CONSTRAINT pk_UNIQUECONSTRAINT
GO
alter table UNIQUECONSTRAINT add constraint pk_UNIQUECONSTRAINT primary key (UNIQUECONSTRAINTID)

GO
/*Поля ограничения*/
if not exists (select * from sysobjects where id = object_id(N'CONSTRAINTFIELD') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table CONSTRAINTFIELD/*Поля ограничения*/ (
UNIQUECONSTRAINTID uniqueidentifier not null,
CONSTRAINTFIELDid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheField' and id=object_id(N'CONSTRAINTFIELD'))
alter table CONSTRAINTFIELD add 
TheField
 UNIQUEIDENTIFIER null /* Поле */
go
go
-- drop extra columns from generated table: CONSTRAINTFIELD
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('CONSTRAINTFIELD')
and name not in('UNIQUECONSTRAINTID','CONSTRAINTFIELDID','TheField')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table CONSTRAINTFIELD drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_CONSTRAINTFIELD') and xtype='PK' and type='K')
ALTER TABLE CONSTRAINTFIELD DROP CONSTRAINT pk_CONSTRAINTFIELD
GO
alter table CONSTRAINTFIELD add constraint pk_CONSTRAINTFIELD primary key (CONSTRAINTFIELDID)

GO
/*Интерфейсы расширения*/
if not exists (select * from sysobjects where id = object_id(N'ExtenderInterface') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ExtenderInterface/**/ (
PARTID uniqueidentifier not null,
ExtenderInterfaceid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheName' and id=object_id(N'ExtenderInterface'))
alter table ExtenderInterface add 
TheName
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TargetPlatform' and id=object_id(N'ExtenderInterface'))
alter table ExtenderInterface add 
TargetPlatform
 UNIQUEIDENTIFIER null /* Целевая платформа */
go
if  not exists(select * from syscolumns where name='TheObject' and id=object_id(N'ExtenderInterface'))
alter table ExtenderInterface add 
TheObject
 VARCHAR (255) null /* Объект */
go
if  not exists(select * from syscolumns where name='TheConfig' and id=object_id(N'ExtenderInterface'))
alter table ExtenderInterface add 
TheConfig
 VARCHAR (512) null /* Конфиг */
go
go
-- drop extra columns from generated table: ExtenderInterface
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ExtenderInterface')
and name not in('PARTID','ExtenderInterfaceID','TheName','TargetPlatform','TheObject','TheConfig')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ExtenderInterface drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ExtenderInterface') and xtype='PK' and type='K')
ALTER TABLE ExtenderInterface DROP CONSTRAINT pk_ExtenderInterface
GO
alter table ExtenderInterface add constraint pk_ExtenderInterface primary key (ExtenderInterfaceID)

GO
/*Поле*/
if not exists (select * from sysobjects where id = object_id(N'FIELD') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELD/*Поле*/ (
PARTID uniqueidentifier not null,
FIELDid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TabName' and id=object_id(N'FIELD'))
alter table FIELD add 
TabName
 VARCHAR (60) null /* Имя вкладки */
go
if  not exists(select * from syscolumns where name='FieldGroupBox' and id=object_id(N'FIELD'))
alter table FIELD add 
FieldGroupBox
 VARCHAR (60) null /* Имя группы */
go
if  not exists(select * from syscolumns where name='Sequence' and id=object_id(N'FIELD'))
alter table FIELD add 
Sequence
 integer null /* № п/п */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'FIELD'))
alter table FIELD add 
Caption
 VARCHAR (80) null /* Надпись */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'FIELD'))
alter table FIELD add 
Name
 VARCHAR (64) null /* Имя поля */
go
if  not exists(select * from syscolumns where name='FieldType' and id=object_id(N'FIELD'))
alter table FIELD add 
FieldType
 UNIQUEIDENTIFIER null /* Тип поля */
go
if  not exists(select * from syscolumns where name='IsBrief' and id=object_id(N'FIELD'))
alter table FIELD add 
IsBrief
 INTEGER null 
 check (IsBrief in ( -1/* Да */
, 0/* Нет */ )) /* Краткая информация */
go
if  not exists(select * from syscolumns where name='IsTabBrief' and id=object_id(N'FIELD'))
alter table FIELD add 
IsTabBrief
 INTEGER null 
 check (IsTabBrief in ( -1/* Да */
, 0/* Нет */ )) /* Для отображения в таблице */
go
if  not exists(select * from syscolumns where name='AllowNull' and id=object_id(N'FIELD'))
alter table FIELD add 
AllowNull
 INTEGER null 
 check (AllowNull in ( -1/* Да */
, 0/* Нет */ )) /* Может быть пустым */
go
if  not exists(select * from syscolumns where name='DataSize' and id=object_id(N'FIELD'))
alter table FIELD add 
DataSize
 integer null /* Размер поля */
go
if  not exists(select * from syscolumns where name='ReferenceType' and id=object_id(N'FIELD'))
alter table FIELD add 
ReferenceType
 INTEGER null 
 check (ReferenceType in ( 3/* На источник данных */
, 0/* Скалярное поле ( не ссылка) */
, 2/* На строку раздела */
, 1/* На объект  */ )) /* Тип ссылки */
go
if  not exists(select * from syscolumns where name='RefToType' and id=object_id(N'FIELD'))
alter table FIELD add 
RefToType
 UNIQUEIDENTIFIER null /* Ссылка на тип */
go
if  not exists(select * from syscolumns where name='RefToPart' and id=object_id(N'FIELD'))
alter table FIELD add 
RefToPart
 UNIQUEIDENTIFIER null /* Ссылка на раздел */
go
if  not exists(select * from syscolumns where name='TheStyle' and id=object_id(N'FIELD'))
alter table FIELD add 
TheStyle
 VARCHAR (50) null /* Стиль */
go
if  not exists(select * from syscolumns where name='InternalReference' and id=object_id(N'FIELD'))
alter table FIELD add 
InternalReference
 INTEGER null 
 check (InternalReference in ( -1/* Да */
, 0/* Нет */ )) /* Ссылка в пределах объекта */
go
if  not exists(select * from syscolumns where name='CreateRefOnly' and id=object_id(N'FIELD'))
alter table FIELD add 
CreateRefOnly
 INTEGER null 
 check (CreateRefOnly in ( -1/* Да */
, 0/* Нет */ )) /* Только создание объекта */
go
if  not exists(select * from syscolumns where name='IsAutoNumber' and id=object_id(N'FIELD'))
alter table FIELD add 
IsAutoNumber
 INTEGER null 
 check (IsAutoNumber in ( -1/* Да */
, 0/* Нет */ )) /* Автонумерация */
go
if  not exists(select * from syscolumns where name='TheNumerator' and id=object_id(N'FIELD'))
alter table FIELD add 
TheNumerator
 UNIQUEIDENTIFIER null /* Нумератор */
go
if  not exists(select * from syscolumns where name='ZoneTemplate' and id=object_id(N'FIELD'))
alter table FIELD add 
ZoneTemplate
 VARCHAR (255) null /* Шаблон зоны нумерации */
go
if  not exists(select * from syscolumns where name='NumberDateField' and id=object_id(N'FIELD'))
alter table FIELD add 
NumberDateField
 UNIQUEIDENTIFIER null /* Поле для расчета даты */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'FIELD'))
alter table FIELD add 
TheComment
 TEXT null /* Описание */
go
if  not exists(select * from syscolumns where name='shablonBrief' and id=object_id(N'FIELD'))
alter table FIELD add 
shablonBrief
 VARCHAR (100) null /* Шаблон для краткого отображения */
go
if  not exists(select * from syscolumns where name='theNameClass' and id=object_id(N'FIELD'))
alter table FIELD add 
theNameClass
 VARCHAR (100) null /* Имя класса для мастера строк */
go
if  not exists(select * from syscolumns where name='TheMask' and id=object_id(N'FIELD'))
alter table FIELD add 
TheMask
 VARCHAR (64) null /* Маска */
go
go
-- drop extra columns from generated table: FIELD
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELD')
and name not in('PARTID','FIELDID','TabName','FieldGroupBox','Sequence','Caption','Name','FieldType','IsBrief','IsTabBrief','AllowNull','DataSize','ReferenceType','RefToType','RefToPart','TheStyle','InternalReference','CreateRefOnly','IsAutoNumber','TheNumerator','ZoneTemplate','NumberDateField','TheComment','shablonBrief','theNameClass','TheMask')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELD drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELD') and xtype='PK' and type='K')
ALTER TABLE FIELD DROP CONSTRAINT pk_FIELD
GO
alter table FIELD add constraint pk_FIELD primary key (FIELDID)

GO
/*Интерфейсы расширения*/
if not exists (select * from sysobjects where id = object_id(N'FldExtenders') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FldExtenders/**/ (
FIELDID uniqueidentifier not null,
FldExtendersid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheName' and id=object_id(N'FldExtenders'))
alter table FldExtenders add 
TheName
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TargetPlatform' and id=object_id(N'FldExtenders'))
alter table FldExtenders add 
TargetPlatform
 UNIQUEIDENTIFIER null /* Целевая платформа */
go
if  not exists(select * from syscolumns where name='TheObject' and id=object_id(N'FldExtenders'))
alter table FldExtenders add 
TheObject
 VARCHAR (255) null /* Объект */
go
if  not exists(select * from syscolumns where name='TheConfig' and id=object_id(N'FldExtenders'))
alter table FldExtenders add 
TheConfig
 VARCHAR (512) null /* Конфиг */
go
go
-- drop extra columns from generated table: FldExtenders
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FldExtenders')
and name not in('FIELDID','FldExtendersID','TheName','TargetPlatform','TheObject','TheConfig')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FldExtenders drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FldExtenders') and xtype='PK' and type='K')
ALTER TABLE FldExtenders DROP CONSTRAINT pk_FldExtenders
GO
alter table FldExtenders add constraint pk_FldExtenders primary key (FldExtendersID)

GO
/*Описание источника данных*/
if not exists (select * from sysobjects where id = object_id(N'FIELDSRCDEF') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDSRCDEF/*Описание источника данных для полей типа ReferenceSQL */ (
FIELDID uniqueidentifier not null,
FIELDSRCDEFid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Provider' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
Provider
 VARCHAR (128) null /* Провайдер */
go
if  not exists(select * from syscolumns where name='ConnectionString' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
ConnectionString
 VARCHAR (512) null /* Строка соединения с источником */
go
if  not exists(select * from syscolumns where name='DataSource' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
DataSource
 VARCHAR (512) null /* Источник данных */
go
if  not exists(select * from syscolumns where name='IDField' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
IDField
 VARCHAR (128) null /* ID */
go
if  not exists(select * from syscolumns where name='BriefString' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
BriefString
 VARCHAR (512) null /* Источник краткой информации */
go
if  not exists(select * from syscolumns where name='FilterString' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
FilterString
 VARCHAR (512) null /* Фильтр источника данных */
go
if  not exists(select * from syscolumns where name='SortField' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
SortField
 VARCHAR (512) null /* Сортировка источника данных */
go
if  not exists(select * from syscolumns where name='DescriptionString' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
DescriptionString
 TEXT null /* Примечания */
go
if  not exists(select * from syscolumns where name='DontShowDialog' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
DontShowDialog
 integer null 
 check (DontShowDialog in ( 1/* Да */
, 0/* Нет */ )) /* Не показывать форму выбора */
go
go
-- drop extra columns from generated table: FIELDSRCDEF
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDSRCDEF')
and name not in('FIELDID','FIELDSRCDEFID','Provider','ConnectionString','DataSource','IDField','BriefString','FilterString','SortField','DescriptionString','DontShowDialog')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDSRCDEF drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDSRCDEF') and xtype='PK' and type='K')
ALTER TABLE FIELDSRCDEF DROP CONSTRAINT pk_FIELDSRCDEF
GO
alter table FIELDSRCDEF add constraint pk_FIELDSRCDEF primary key (FIELDSRCDEFID)

GO
/*Динамический фильтр*/
if not exists (select * from sysobjects where id = object_id(N'DINAMICFILTERSCRIPT') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table DINAMICFILTERSCRIPT/*Выражение для построения дополнительного фильтра для ссылочных полей*/ (
FIELDID uniqueidentifier not null,
DINAMICFILTERSCRIPTid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'DINAMICFILTERSCRIPT'))
alter table DINAMICFILTERSCRIPT add 
Target
 UNIQUEIDENTIFIER null /* Целевая платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'DINAMICFILTERSCRIPT'))
alter table DINAMICFILTERSCRIPT add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: DINAMICFILTERSCRIPT
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('DINAMICFILTERSCRIPT')
and name not in('FIELDID','DINAMICFILTERSCRIPTID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table DINAMICFILTERSCRIPT drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_DINAMICFILTERSCRIPT') and xtype='PK' and type='K')
ALTER TABLE DINAMICFILTERSCRIPT DROP CONSTRAINT pk_DINAMICFILTERSCRIPT
GO
alter table DINAMICFILTERSCRIPT add constraint pk_DINAMICFILTERSCRIPT primary key (DINAMICFILTERSCRIPTID)

GO
/*Значение по умолчанию*/
if not exists (select * from sysobjects where id = object_id(N'FIELDEXPRESSION') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDEXPRESSION/*Выражение для вычисления поля
или значение по умолчанию*/ (
FIELDID uniqueidentifier not null,
FIELDEXPRESSIONid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'FIELDEXPRESSION'))
alter table FIELDEXPRESSION add 
Target
 UNIQUEIDENTIFIER null /* Платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'FIELDEXPRESSION'))
alter table FIELDEXPRESSION add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: FIELDEXPRESSION
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDEXPRESSION')
and name not in('FIELDID','FIELDEXPRESSIONID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDEXPRESSION drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDEXPRESSION') and xtype='PK' and type='K')
ALTER TABLE FIELDEXPRESSION DROP CONSTRAINT pk_FIELDEXPRESSION
GO
alter table FIELDEXPRESSION add constraint pk_FIELDEXPRESSION primary key (FIELDEXPRESSIONID)

GO
/*Логика поля на форме*/
if not exists (select * from sysobjects where id = object_id(N'FIELDVALIDATOR') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDVALIDATOR/*Логика взаимосвязей на форме при изменении поля*/ (
FIELDID uniqueidentifier not null,
FIELDVALIDATORid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'FIELDVALIDATOR'))
alter table FIELDVALIDATOR add 
Target
 UNIQUEIDENTIFIER null /* Платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'FIELDVALIDATOR'))
alter table FIELDVALIDATOR add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: FIELDVALIDATOR
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDVALIDATOR')
and name not in('FIELDID','FIELDVALIDATORID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDVALIDATOR drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDVALIDATOR') and xtype='PK' and type='K')
ALTER TABLE FIELDVALIDATOR DROP CONSTRAINT pk_FIELDVALIDATOR
GO
alter table FIELDVALIDATOR add constraint pk_FIELDVALIDATOR primary key (FIELDVALIDATORID)

GO
/*Методы поля*/
if not exists (select * from sysobjects where id = object_id(N'FIELDMENU') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDMENU/*Методы, ассоциированные с полем*/ (
FIELDID uniqueidentifier not null,
FIELDMENUid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
Caption
 VARCHAR (80) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='ToolTip' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
ToolTip
 VARCHAR (80) null /* Подсказка */
go
if  not exists(select * from syscolumns where name='ActionID' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
ActionID
 UNIQUEIDENTIFIER null /* Идентификатор вызываемого метода */
go
if  not exists(select * from syscolumns where name='IsMenuItem' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
IsMenuItem
 INTEGER null 
 check (IsMenuItem in ( -1/* Да */
, 0/* Нет */ )) /* В меню */
go
if  not exists(select * from syscolumns where name='IsToolBarButton' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
IsToolBarButton
 INTEGER null 
 check (IsToolBarButton in ( -1/* Да */
, 0/* Нет */ )) /* В тулбар */
go
if  not exists(select * from syscolumns where name='HotKey' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
HotKey
 VARCHAR (20) null /* Горячая клавиша */
go
go
-- drop extra columns from generated table: FIELDMENU
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDMENU')
and name not in('FIELDID','FIELDMENUID','Name','Caption','ToolTip','ActionID','IsMenuItem','IsToolBarButton','HotKey')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDMENU drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDMENU') and xtype='PK' and type='K')
ALTER TABLE FIELDMENU DROP CONSTRAINT pk_FIELDMENU
GO
alter table FIELDMENU add constraint pk_FIELDMENU primary key (FIELDMENUID)

GO
/*Отображение параметров*/
if not exists (select * from sysobjects where id = object_id(N'FIELDPARAMMAP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDPARAMMAP/*Отображение значений на параметры метода*/ (
FIELDMENUID uniqueidentifier not null,
FIELDPARAMMAPid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='FieldName' and id=object_id(N'FIELDPARAMMAP'))
alter table FIELDPARAMMAP add 
FieldName
 VARCHAR (255) null /* Поле (значение) */
go
if  not exists(select * from syscolumns where name='ParamName' and id=object_id(N'FIELDPARAMMAP'))
alter table FIELDPARAMMAP add 
ParamName
 VARCHAR (80) null /* Параметр */
go
if  not exists(select * from syscolumns where name='NoEdit' and id=object_id(N'FIELDPARAMMAP'))
alter table FIELDPARAMMAP add 
NoEdit
 INTEGER null 
 check (NoEdit in ( -1/* Да */
, 0/* Нет */ )) /* Редактировать параметр нельзя */
go
go
-- drop extra columns from generated table: FIELDPARAMMAP
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDPARAMMAP')
and name not in('FIELDMENUID','FIELDPARAMMAPID','FieldName','ParamName','NoEdit')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDPARAMMAP drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDPARAMMAP') and xtype='PK' and type='K')
ALTER TABLE FIELDPARAMMAP DROP CONSTRAINT pk_FIELDPARAMMAP
GO
alter table FIELDPARAMMAP add constraint pk_FIELDPARAMMAP primary key (FIELDPARAMMAPID)

GO
/*Приложение*/
if not exists (select * from sysobjects where id = object_id(N'MTZAPP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table MTZAPP/*Группа взаимосвязных документов*/ (
MTZAPPid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'MTZAPP'))
alter table MTZAPP add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='DBName' and id=object_id(N'MTZAPP'))
alter table MTZAPP add 
DBName
 VARCHAR (64) null /* База данных */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'MTZAPP'))
alter table MTZAPP add 
TheComment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: MTZAPP
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('MTZAPP')
and name not in('MTZAPPID','Name','DBName','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table MTZAPP drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_MTZAPP') and xtype='PK' and type='K')
ALTER TABLE MTZAPP DROP CONSTRAINT pk_MTZAPP
GO
alter table MTZAPP add constraint pk_MTZAPP primary key (MTZAPPID)

GO
/*Обязательные приложения*/
if not exists (select * from sysobjects where id = object_id(N'ParentPackage') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ParentPackage/*Приложения от которых зависит данное приложение*/ (
MTZAPPID uniqueidentifier not null,
ParentPackageid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Package' and id=object_id(N'ParentPackage'))
alter table ParentPackage add 
Package
 UNIQUEIDENTIFIER null /* Приложение */
go
go
-- drop extra columns from generated table: ParentPackage
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ParentPackage')
and name not in('MTZAPPID','ParentPackageID','Package')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ParentPackage drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ParentPackage') and xtype='PK' and type='K')
ALTER TABLE ParentPackage DROP CONSTRAINT pk_ParentPackage
GO
alter table ParentPackage add constraint pk_ParentPackage primary key (ParentPackageID)

GO
/* TYPE=MTZSystem (Спец.: Системные данные) */
GO
/*Сессия пользователя*/
if not exists (select * from sysobjects where id = object_id(N'the_Session') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table the_Session/*Зарегистрированные сессии пользователей*/ (
the_Sessionid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='ApplicationID' and id=object_id(N'the_Session'))
alter table the_Session add 
ApplicationID
 UNIQUEIDENTIFIER null /* Приложение */
go
if  not exists(select * from syscolumns where name='UserRole' and id=object_id(N'the_Session'))
alter table the_Session add 
UserRole
 UNIQUEIDENTIFIER null /* Текущая роль пользователя */
go
if  not exists(select * from syscolumns where name='ClosedAt' and id=object_id(N'the_Session'))
alter table the_Session add 
ClosedAt
 DATETIME null /* Момент закрытия */
go
if  not exists(select * from syscolumns where name='Closed' and id=object_id(N'the_Session'))
alter table the_Session add 
Closed
 integer null 
 check (Closed in ( 1/* Да */
, 0/* Нет */ )) /* Закрыта */
go
if  not exists(select * from syscolumns where name='Usersid' and id=object_id(N'the_Session'))
alter table the_Session add 
Usersid
 UNIQUEIDENTIFIER null /* Пользователь */
go
if  not exists(select * from syscolumns where name='LastAccess' and id=object_id(N'the_Session'))
alter table the_Session add 
LastAccess
 DATETIME null /* Последнее подтверждение */
go
if  not exists(select * from syscolumns where name='StartAt' and id=object_id(N'the_Session'))
alter table the_Session add 
StartAt
 DATETIME null /* Момент открытия */
go
if  not exists(select * from syscolumns where name='Lang' and id=object_id(N'the_Session'))
alter table the_Session add 
Lang
 VARCHAR (25) null /* Локализация */
go
if  not exists(select * from syscolumns where name='Login' and id=object_id(N'the_Session'))
alter table the_Session add 
Login
 VARCHAR (255) null /* Login */
go
go
-- drop extra columns from generated table: the_Session
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('the_Session')
and name not in('the_SessionID','ApplicationID','UserRole','ClosedAt','Closed','Usersid','LastAccess','StartAt','Lang','Login')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table the_Session drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_the_Session') and xtype='PK' and type='K')
ALTER TABLE the_Session DROP CONSTRAINT pk_the_Session
GO
alter table the_Session add constraint pk_the_Session primary key (the_SessionID)

GO
/*Разрешенные владельцы*/
if not exists (select * from sysobjects where id = object_id(N'SysRefCache') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table SysRefCache/*владельцы информации для к объектам которых
разрешен достуа для  текущей сесии*/ (
SysRefCacheid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='CacheType' and id=object_id(N'SysRefCache'))
alter table SysRefCache add 
CacheType
 integer null 
 check (CacheType in ( 4/* Space */
, 3/* Mark */
, 2/* Odd */
, 0/* None */
, 1/* Even */ )) /* Тип кеширования */
go
if  not exists(select * from syscolumns where name='ObjectOwnerID' and id=object_id(N'SysRefCache'))
alter table SysRefCache add 
ObjectOwnerID
 uniqueidentifier null /* Идентификатор владельца */
go
if  not exists(select * from syscolumns where name='SessionID' and id=object_id(N'SysRefCache'))
alter table SysRefCache add 
SessionID
 UNIQUEIDENTIFIER null /* Сессия */
go
if  not exists(select * from syscolumns where name='modulename' and id=object_id(N'SysRefCache'))
alter table SysRefCache add 
modulename
 VARCHAR (40) null /* модуль */
go
go
-- drop extra columns from generated table: SysRefCache
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('SysRefCache')
and name not in('SysRefCacheID','CacheType','ObjectOwnerID','SessionID','modulename')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table SysRefCache drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_SysRefCache') and xtype='PK' and type='K')
ALTER TABLE SysRefCache DROP CONSTRAINT pk_SysRefCache
GO
alter table SysRefCache add constraint pk_SysRefCache primary key (SysRefCacheID)

GO
/*Журнал событий*/
if not exists (select * from sysobjects where id = object_id(N'SysLog') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table SysLog/*Журнал событий, которые произошли в системе*/ (
SysLogid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheSession' and id=object_id(N'SysLog'))
alter table SysLog add 
TheSession
 UNIQUEIDENTIFIER null /* Сессия */
go
if  not exists(select * from syscolumns where name='the_Resource' and id=object_id(N'SysLog'))
alter table SysLog add 
the_Resource
 VARCHAR (255) null /* Ресурс */
go
if  not exists(select * from syscolumns where name='LogStructID' and id=object_id(N'SysLog'))
alter table SysLog add 
LogStructID
 VARCHAR (255) null /* Раздел с которым происхоит действие */
go
if  not exists(select * from syscolumns where name='VERB' and id=object_id(N'SysLog'))
alter table SysLog add 
VERB
 VARCHAR (80) null /* Действие */
go
if  not exists(select * from syscolumns where name='LogInstanceID' and id=object_id(N'SysLog'))
alter table SysLog add 
LogInstanceID
 uniqueidentifier null /* Идентификатор документа */
go
go
-- drop extra columns from generated table: SysLog
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('SysLog')
and name not in('SysLogID','TheSession','the_Resource','LogStructID','VERB','LogInstanceID')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table SysLog drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_SysLog') and xtype='PK' and type='K')
ALTER TABLE SysLog DROP CONSTRAINT pk_SysLog
GO
alter table SysLog add constraint pk_SysLog primary key (SysLogID)

GO
/* TYPE=XDict (Справочник) */
GO
/*Уровень сложности*/
if not exists (select * from sysobjects where id = object_id(N'XLevel') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XLevel/*Уровень сложности */ (
XLevelid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XLevel'))
alter table XLevel add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: XLevel
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XLevel')
and name not in('XLevelID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XLevel drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XLevel') and xtype='PK' and type='K')
ALTER TABLE XLevel DROP CONSTRAINT pk_XLevel
GO
alter table XLevel add constraint pk_XLevel primary key (XLevelID)

GO
/*Предмет*/
if not exists (select * from sysobjects where id = object_id(N'XSubject') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XSubject/*Предмет*/ (
XSubjectid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XSubject'))
alter table XSubject add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: XSubject
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XSubject')
and name not in('XSubjectID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XSubject drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XSubject') and xtype='PK' and type='K')
ALTER TABLE XSubject DROP CONSTRAINT pk_XSubject
GO
alter table XSubject add constraint pk_XSubject primary key (XSubjectID)

GO
/*Владелец*/
if not exists (select * from sysobjects where id = object_id(N'XVendor') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XVendor/*Владелец курса*/ (
XVendorid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XVendor'))
alter table XVendor add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: XVendor
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XVendor')
and name not in('XVendorID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XVendor drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XVendor') and xtype='PK' and type='K')
ALTER TABLE XVendor DROP CONSTRAINT pk_XVendor
GO
alter table XVendor add constraint pk_XVendor primary key (XVendorID)

GO
/*Статус инструктора*/
if not exists (select * from sysobjects where id = object_id(N'XStatus') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XStatus/*Звание, категория инструктора и т.п.*/ (
XStatusid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XStatus'))
alter table XStatus add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: XStatus
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XStatus')
and name not in('XStatusID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XStatus drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XStatus') and xtype='PK' and type='K')
ALTER TABLE XStatus DROP CONSTRAINT pk_XStatus
GO
alter table XStatus add constraint pk_XStatus primary key (XStatusID)

GO
/*Тип подписки*/
if not exists (select * from sysobjects where id = object_id(N'XSubscriptionType') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table XSubscriptionType/*Тип подписки*/ (
XSubscriptionTypeid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'XSubscriptionType'))
alter table XSubscriptionType add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: XSubscriptionType
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('XSubscriptionType')
and name not in('XSubscriptionTypeID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table XSubscriptionType drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_XSubscriptionType') and xtype='PK' and type='K')
ALTER TABLE XSubscriptionType DROP CONSTRAINT pk_XSubscriptionType
GO
alter table XSubscriptionType add constraint pk_XSubscriptionType primary key (XSubscriptionTypeID)

GO
/* TYPE=MTZUsers (Справочник: пользователи) */
GO
/*Пользователи*/
if not exists (select * from sysobjects where id = object_id(N'Users') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Users/*Пользователи*/ (
Usersid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Family' and id=object_id(N'Users'))
alter table Users add 
Family
 VARCHAR (255) null /* Фамилия */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Users'))
alter table Users add 
Name
 VARCHAR (64) null /* Имя */
go
if  not exists(select * from syscolumns where name='SurName' and id=object_id(N'Users'))
alter table Users add 
SurName
 VARCHAR (255) null /* Отчество */
go
if  not exists(select * from syscolumns where name='Login' and id=object_id(N'Users'))
alter table Users add 
Login
 VARCHAR (64) null /* Имя для входа */
go
if  not exists(select * from syscolumns where name='Password' and id=object_id(N'Users'))
alter table Users add 
Password varchar(80) null /* Пароль */
go
if  not exists(select * from syscolumns where name='DomaiName' and id=object_id(N'Users'))
alter table Users add 
DomaiName
 VARCHAR (255) null /* Доменное имя */
go
if  not exists(select * from syscolumns where name='EMail' and id=object_id(N'Users'))
alter table Users add 
EMail varchar(255) null /* e-mail */
go
if  not exists(select * from syscolumns where name='Phone' and id=object_id(N'Users'))
alter table Users add 
Phone
 VARCHAR (20) null /* Телефон */
go
if  not exists(select * from syscolumns where name='LocalPhone' and id=object_id(N'Users'))
alter table Users add 
LocalPhone
 VARCHAR (20) null /* Местный телефон */
go
go
-- drop extra columns from generated table: Users
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Users')
and name not in('UsersID','Family','Name','SurName','Login','Password','DomaiName','EMail','Phone','LocalPhone')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Users drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Users') and xtype='PK' and type='K')
ALTER TABLE Users DROP CONSTRAINT pk_Users
GO
alter table Users add constraint pk_Users primary key (UsersID)

GO
/*Группы*/
if not exists (select * from sysobjects where id = object_id(N'Groups') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Groups/*Группы*/ (
Groupsid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Groups'))
alter table Groups add 
Name
 VARCHAR (80) null /* Название */
go
if  not exists(select * from syscolumns where name='ADGroup' and id=object_id(N'Groups'))
alter table Groups add 
ADGroup
 VARCHAR (255) null /* Группа AD */
go
go
-- drop extra columns from generated table: Groups
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Groups')
and name not in('GroupsID','Name','ADGroup')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Groups drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Groups') and xtype='PK' and type='K')
ALTER TABLE Groups DROP CONSTRAINT pk_Groups
GO
alter table Groups add constraint pk_Groups primary key (GroupsID)

GO
/*Состав группы*/
if not exists (select * from sysobjects where id = object_id(N'GroupUser') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GroupUser/*Состав группы*/ (
GroupsID uniqueidentifier not null,
GroupUserid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheUser' and id=object_id(N'GroupUser'))
alter table GroupUser add 
TheUser
 UNIQUEIDENTIFIER null /* Пользователь */
go
go
-- drop extra columns from generated table: GroupUser
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GroupUser')
and name not in('GroupsID','GroupUserID','TheUser')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GroupUser drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GroupUser') and xtype='PK' and type='K')
ALTER TABLE GroupUser DROP CONSTRAINT pk_GroupUser
GO
alter table GroupUser add constraint pk_GroupUser primary key (GroupUserID)

GO
/* TYPE=Dictionary (Справочники) */
GO
/*Группа тестов*/
if not exists (select * from sysobjects where id = object_id(N'TestGroup') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestGroup/*Группа тестов*/ (
TestGroupid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'TestGroup'))
alter table TestGroup add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: TestGroup
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestGroup')
and name not in('TestGroupID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestGroup drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestGroup') and xtype='PK' and type='K')
ALTER TABLE TestGroup DROP CONSTRAINT pk_TestGroup
GO
alter table TestGroup add constraint pk_TestGroup primary key (TestGroupID)

GO
/*Тип блока*/
if not exists (select * from sysobjects where id = object_id(N'TestBlockType') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestBlockType/*Справочник типов блоков*/ (
TestBlockTypeid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'TestBlockType'))
alter table TestBlockType add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: TestBlockType
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestBlockType')
and name not in('TestBlockTypeID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestBlockType drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestBlockType') and xtype='PK' and type='K')
ALTER TABLE TestBlockType DROP CONSTRAINT pk_TestBlockType
GO
alter table TestBlockType add constraint pk_TestBlockType primary key (TestBlockTypeID)

GO
/*Уровень сложности*/
if not exists (select * from sysobjects where id = object_id(N'testLevelName') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table testLevelName/*Уровень сложности теста*/ (
testLevelNameid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'testLevelName'))
alter table testLevelName add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: testLevelName
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('testLevelName')
and name not in('testLevelNameID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table testLevelName drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_testLevelName') and xtype='PK' and type='K')
ALTER TABLE testLevelName DROP CONSTRAINT pk_testLevelName
GO
alter table testLevelName add constraint pk_testLevelName primary key (testLevelNameID)

GO
/*Тип файла*/
if not exists (select * from sysobjects where id = object_id(N'TestFileType') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestFileType/*Тип файла для формирования вопроса теста*/ (
TestFileTypeid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'TestFileType'))
alter table TestFileType add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: TestFileType
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestFileType')
and name not in('TestFileTypeID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestFileType drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestFileType') and xtype='PK' and type='K')
ALTER TABLE TestFileType DROP CONSTRAINT pk_TestFileType
GO
alter table TestFileType add constraint pk_TestFileType primary key (TestFileTypeID)

GO
/*Проигрыватель теста*/
if not exists (select * from sysobjects where id = object_id(N'testPlayer') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table testPlayer/*Модуль для обработки данных теста*/ (
testPlayerid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'testPlayer'))
alter table testPlayer add 
name
 VARCHAR (256) null /* Название */
go
go
-- drop extra columns from generated table: testPlayer
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('testPlayer')
and name not in('testPlayerID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table testPlayer drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_testPlayer') and xtype='PK' and type='K')
ALTER TABLE testPlayer DROP CONSTRAINT pk_testPlayer
GO
alter table testPlayer add constraint pk_testPlayer primary key (testPlayerID)

GO
/*Тип вопроса*/
if not exists (select * from sysobjects where id = object_id(N'TestQuestionType') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestQuestionType/*Тип вопроса*/ (
TestQuestionTypeid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'TestQuestionType'))
alter table TestQuestionType add 
name
 VARCHAR (256) null /* Название */
go
if  not exists(select * from syscolumns where name='answerFromList' and id=object_id(N'TestQuestionType'))
alter table TestQuestionType add 
answerFromList
 integer null 
 check (answerFromList in ( -1/* Не существенно */
, 1/* Да */
, 0/* Нет */ )) /* Ответы из списка */
go
if  not exists(select * from syscolumns where name='onlyOneAnswer' and id=object_id(N'TestQuestionType'))
alter table TestQuestionType add 
onlyOneAnswer
 integer null 
 check (onlyOneAnswer in ( -1/* Не существенно */
, 1/* Да */
, 0/* Нет */ )) /* Только один ответ */
go
if  not exists(select * from syscolumns where name='audioQuestion' and id=object_id(N'TestQuestionType'))
alter table TestQuestionType add 
audioQuestion
 integer null 
 check (audioQuestion in ( 1/* Да */
, 0/* Нет */ )) /* Аудио вопрос */
go
if  not exists(select * from syscolumns where name='allowOtherFiled' and id=object_id(N'TestQuestionType'))
alter table TestQuestionType add 
allowOtherFiled
 integer null 
 check (allowOtherFiled in ( -1/* Не существенно */
, 1/* Да */
, 0/* Нет */ )) /* Разрешить поле дополнительно */
go
if  not exists(select * from syscolumns where name='answerAsText' and id=object_id(N'TestQuestionType'))
alter table TestQuestionType add 
answerAsText
 integer null 
 check (answerAsText in ( -1/* Не существенно */
, 1/* Да */
, 0/* Нет */ )) /* Ответ как текст */
go
if  not exists(select * from syscolumns where name='answerAsFile' and id=object_id(N'TestQuestionType'))
alter table TestQuestionType add 
answerAsFile
 integer null 
 check (answerAsFile in ( -1/* Не существенно */
, 1/* Да */
, 0/* Нет */ )) /* Ответ как файл */
go
if  not exists(select * from syscolumns where name='answerAsAudio' and id=object_id(N'TestQuestionType'))
alter table TestQuestionType add 
answerAsAudio
 integer null 
 check (answerAsAudio in ( -1/* Не существенно */
, 1/* Да */
, 0/* Нет */ )) /* Ответ как аудио */
go
go
-- drop extra columns from generated table: TestQuestionType
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestQuestionType')
and name not in('TestQuestionTypeID','name','answerFromList','onlyOneAnswer','audioQuestion','allowOtherFiled','answerAsText','answerAsFile','answerAsAudio')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestQuestionType drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestQuestionType') and xtype='PK' and type='K')
ALTER TABLE TestQuestionType DROP CONSTRAINT pk_TestQuestionType
GO
alter table TestQuestionType add constraint pk_TestQuestionType primary key (TestQuestionTypeID)

GO
/* TYPE=Test (Структура теста) */
GO
/*Описание теста*/
if not exists (select * from sysobjects where id = object_id(N'TestDescription') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestDescription/*Описание теста*/ (
TestDescriptionid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'TestDescription'))
alter table TestDescription add 
name
 VARCHAR (255) null /* Название теста */
go
if  not exists(select * from syscolumns where name='theGroup' and id=object_id(N'TestDescription'))
alter table TestDescription add 
theGroup
 UNIQUEIDENTIFIER null /* Группа */
go
if  not exists(select * from syscolumns where name='info' and id=object_id(N'TestDescription'))
alter table TestDescription add 
info
 VARCHAR (4096) null /* Описание теста */
go
if  not exists(select * from syscolumns where name='testLevel' and id=object_id(N'TestDescription'))
alter table TestDescription add 
testLevel
 UNIQUEIDENTIFIER null /* Уровень сложности */
go
if  not exists(select * from syscolumns where name='testCost' and id=object_id(N'TestDescription'))
alter table TestDescription add 
testCost
 integer null /* Мин. проходной бал */
go
if  not exists(select * from syscolumns where name='readyForUse' and id=object_id(N'TestDescription'))
alter table TestDescription add 
readyForUse
 integer null 
 check (readyForUse in ( 1/* Да */
, 0/* Нет */ )) /* Разработка завершена */
go
if  not exists(select * from syscolumns where name='isPublic' and id=object_id(N'TestDescription'))
alter table TestDescription add 
isPublic
 integer null 
 check (isPublic in ( 1/* Да */
, 0/* Нет */ )) /* Публичный тест */
go
go
-- drop extra columns from generated table: TestDescription
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestDescription')
and name not in('TestDescriptionID','name','theGroup','info','testLevel','testCost','readyForUse','isPublic')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestDescription drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestDescription') and xtype='PK' and type='K')
ALTER TABLE TestDescription DROP CONSTRAINT pk_TestDescription
GO
alter table TestDescription add constraint pk_TestDescription primary key (TestDescriptionID)

GO
/*Субтест*/
if not exists (select * from sysobjects where id = object_id(N'TestModuleDefinition') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestModuleDefinition/*Описание субтеста*/ (
TestModuleDefinitionid uniqueidentifier not null rowguidcol default ( newid())  
,TestDescriptionID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'TestModuleDefinition'))
alter table TestModuleDefinition add 
name
 VARCHAR (256) null /* Название */
go
if  not exists(select * from syscolumns where name='reglament' and id=object_id(N'TestModuleDefinition'))
alter table TestModuleDefinition add 
reglament
 VARCHAR (4096) null /* Регламент */
go
if  not exists(select * from syscolumns where name='moduleTime' and id=object_id(N'TestModuleDefinition'))
alter table TestModuleDefinition add 
moduleTime
 integer null /* Время на прохождение субтеста */
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'TestModuleDefinition'))
alter table TestModuleDefinition add 
sequence
 integer null /* Порядок следования */
go
if  not exists(select * from syscolumns where name='moduleCost' and id=object_id(N'TestModuleDefinition'))
alter table TestModuleDefinition add 
moduleCost
 integer null /* Мин. проходной бал */
go
if  not exists(select * from syscolumns where name='moduleCost2' and id=object_id(N'TestModuleDefinition'))
alter table TestModuleDefinition add 
moduleCost2
 integer null /* Мин. проходной бал 2 */
go
go
-- drop extra columns from generated table: TestModuleDefinition
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestModuleDefinition')
and name not in('TestModuleDefinitionID','TestDescriptionID','name','reglament','moduleTime','sequence','moduleCost','moduleCost2')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestModuleDefinition drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestModuleDefinition') and xtype='PK' and type='K')
ALTER TABLE TestModuleDefinition DROP CONSTRAINT pk_TestModuleDefinition
GO
alter table TestModuleDefinition add constraint pk_TestModuleDefinition primary key (TestModuleDefinitionID)

GO
/*Состав варианта*/
if not exists (select * from sysobjects where id = object_id(N'TestModuleContent') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TestModuleContent/*Описывает сколько блоков каждого раздела должно входить в тест*/ (
TestModuleDefinitionID uniqueidentifier not null,
TestModuleContentid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='BlockType' and id=object_id(N'TestModuleContent'))
alter table TestModuleContent add 
BlockType
 UNIQUEIDENTIFIER null /* Тип блока */
go
if  not exists(select * from syscolumns where name='blockCount' and id=object_id(N'TestModuleContent'))
alter table TestModuleContent add 
blockCount
 integer null /* Количество блоков этого типа в варианте */
go
go
-- drop extra columns from generated table: TestModuleContent
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TestModuleContent')
and name not in('TestModuleDefinitionID','TestModuleContentID','BlockType','blockCount')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TestModuleContent drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TestModuleContent') and xtype='PK' and type='K')
ALTER TABLE TestModuleContent DROP CONSTRAINT pk_TestModuleContent
GO
alter table TestModuleContent add constraint pk_TestModuleContent primary key (TestModuleContentID)

GO
/* TYPE=CheckForm (Форма оценки) */
GO
/*Форма для оценки*/
if not exists (select * from sysobjects where id = object_id(N'CheckFormInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table CheckFormInfo/*Форма для оценки вопроса*/ (
CheckFormInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'CheckFormInfo'))
alter table CheckFormInfo add 
name
 VARCHAR (255) null /* Название */
go
go
-- drop extra columns from generated table: CheckFormInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('CheckFormInfo')
and name not in('CheckFormInfoID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table CheckFormInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_CheckFormInfo') and xtype='PK' and type='K')
ALTER TABLE CheckFormInfo DROP CONSTRAINT pk_CheckFormInfo
GO
alter table CheckFormInfo add constraint pk_CheckFormInfo primary key (CheckFormInfoID)

GO
/*Критерии*/
if not exists (select * from sysobjects where id = object_id(N'CheckFormField') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table CheckFormField/*Критерии для оценки вопроса*/ (
CheckFormFieldid uniqueidentifier not null rowguidcol default ( newid())  
,CheckFormInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'CheckFormField'))
alter table CheckFormField add 
sequence
 integer null /* Порядок следования */
go
if  not exists(select * from syscolumns where name='fName' and id=object_id(N'CheckFormField'))
alter table CheckFormField add 
fName
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='maxCnt' and id=object_id(N'CheckFormField'))
alter table CheckFormField add 
maxCnt
 integer null /* Максимальное  количество */
go
if  not exists(select * from syscolumns where name='itemCost' and id=object_id(N'CheckFormField'))
alter table CheckFormField add 
itemCost
 float null /* Стоимость  единицы */
go
if  not exists(select * from syscolumns where name='ismain' and id=object_id(N'CheckFormField'))
alter table CheckFormField add 
ismain
 integer null 
 check (ismain in ( 1/* Да */
, 0/* Нет */ )) /* Главное поле */
go
go
-- drop extra columns from generated table: CheckFormField
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('CheckFormField')
and name not in('CheckFormFieldID','CheckFormInfoID','sequence','fName','maxCnt','itemCost','ismain')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table CheckFormField drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_CheckFormField') and xtype='PK' and type='K')
ALTER TABLE CheckFormField DROP CONSTRAINT pk_CheckFormField
GO
alter table CheckFormField add constraint pk_CheckFormField primary key (CheckFormFieldID)

GO
/* TYPE=Exam (Экзамен) */
GO
/*Файлы к экзамену*/
if not exists (select * from sysobjects where id = object_id(N'examFiles') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table examFiles/*Файлы к экзамену, видео записи в аудитории и т.п.*/ (
examFilesid uniqueidentifier not null rowguidcol default ( newid())  
,examInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='originalName' and id=object_id(N'examFiles'))
alter table examFiles add 
originalName
 VARCHAR (255) null /* Имя файла */
go
if  not exists(select * from syscolumns where name='filePath' and id=object_id(N'examFiles'))
alter table examFiles add 
filePath
 VARCHAR (255) null /* Путь к файлу в хранилище */
go
if  not exists(select * from syscolumns where name='fileType' and id=object_id(N'examFiles'))
alter table examFiles add 
fileType
 UNIQUEIDENTIFIER null /* Тип файла */
go
if  not exists(select * from syscolumns where name='fileComment' and id=object_id(N'examFiles'))
alter table examFiles add 
fileComment
 TEXT null /* Комментарий к файлу */
go
go
-- drop extra columns from generated table: examFiles
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('examFiles')
and name not in('examFilesID','examInfoID','originalName','filePath','fileType','fileComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table examFiles drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_examFiles') and xtype='PK' and type='K')
ALTER TABLE examFiles DROP CONSTRAINT pk_examFiles
GO
alter table examFiles add constraint pk_examFiles primary key (examFilesID)

GO
/*Участники экзамена*/
if not exists (select * from sysobjects where id = object_id(N'examPersons') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table examPersons/*Люди, которые сдают экзамен*/ (
examPersonsid uniqueidentifier not null rowguidcol default ( newid())  
,examInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='testable' and id=object_id(N'examPersons'))
alter table examPersons add 
testable
 UNIQUEIDENTIFIER null /* Тестируемый */
go
if  not exists(select * from syscolumns where name='examPassed' and id=object_id(N'examPersons'))
alter table examPersons add 
examPassed
 integer null 
 check (examPassed in ( 1/* Да */
, 0/* Нет */ )) /* Экзамен пройден */
go
go
-- drop extra columns from generated table: examPersons
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('examPersons')
and name not in('examPersonsID','examInfoID','testable','examPassed')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table examPersons drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_examPersons') and xtype='PK' and type='K')
ALTER TABLE examPersons DROP CONSTRAINT pk_examPersons
GO
alter table examPersons add constraint pk_examPersons primary key (examPersonsID)

GO
/*Оценка тестов*/
if not exists (select * from sysobjects where id = object_id(N'examTestScore') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table examTestScore/*Оценка экзамена*/ (
examPersonsID uniqueidentifier not null,
examTestScoreid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='theTest' and id=object_id(N'examTestScore'))
alter table examTestScore add 
theTest
 UNIQUEIDENTIFIER null /* Тест */
go
if  not exists(select * from syscolumns where name='moduleScore' and id=object_id(N'examTestScore'))
alter table examTestScore add 
moduleScore
 integer null /* Баллы за модуль */
go
if  not exists(select * from syscolumns where name='okScore' and id=object_id(N'examTestScore'))
alter table examTestScore add 
okScore
 integer null /* Балы за правильные ответы */
go
if  not exists(select * from syscolumns where name='maxScore' and id=object_id(N'examTestScore'))
alter table examTestScore add 
maxScore
 integer null /* Максимальный бал за модуль */
go
go
-- drop extra columns from generated table: examTestScore
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('examTestScore')
and name not in('examPersonsID','examTestScoreID','theTest','moduleScore','okScore','maxScore')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table examTestScore drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_examTestScore') and xtype='PK' and type='K')
ALTER TABLE examTestScore DROP CONSTRAINT pk_examTestScore
GO
alter table examTestScore add constraint pk_examTestScore primary key (examTestScoreID)

GO
/*Субтест*/
if not exists (select * from sysobjects where id = object_id(N'examSubtest') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table examSubtest/*Субтесты выданные конкретному человеку для прохождения экзамена*/ (
examPersonsID uniqueidentifier not null,
examSubtestid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='test_name' and id=object_id(N'examSubtest'))
alter table examSubtest add 
test_name
 VARCHAR (255) null /* Модуль */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'examSubtest'))
alter table examSubtest add 
name
 VARCHAR (255) null /* Субтест */
go
if  not exists(select * from syscolumns where name='testJSON' and id=object_id(N'examSubtest'))
alter table examSubtest add 
testJSON
 TEXT null /* Сформированный вариант */
go
if  not exists(select * from syscolumns where name='testPlayer' and id=object_id(N'examSubtest'))
alter table examSubtest add 
testPlayer
 UNIQUEIDENTIFIER null /* Проигрыватель теста */
go
if  not exists(select * from syscolumns where name='subtestAnswers' and id=object_id(N'examSubtest'))
alter table examSubtest add 
subtestAnswers
 TEXT null /* Блок ответов */
go
if  not exists(select * from syscolumns where name='needCheck' and id=object_id(N'examSubtest'))
alter table examSubtest add 
needCheck
 INTEGER null 
 check (needCheck in ( -1/* Да */
, 0/* Нет */ )) /* Требует проверки */
go
if  not exists(select * from syscolumns where name='subtestFinished' and id=object_id(N'examSubtest'))
alter table examSubtest add 
subtestFinished
 integer null 
 check (subtestFinished in ( 1/* Да */
, 0/* Нет */ )) /* Субтест завершен */
go
if  not exists(select * from syscolumns where name='subtestChecked' and id=object_id(N'examSubtest'))
alter table examSubtest add 
subtestChecked
 integer null 
 check (subtestChecked in ( 1/* Да */
, 0/* Нет */ )) /* Субтест проверен */
go
if  not exists(select * from syscolumns where name='checkPerson' and id=object_id(N'examSubtest'))
alter table examSubtest add 
checkPerson
 UNIQUEIDENTIFIER null /* Проверяющий */
go
if  not exists(select * from syscolumns where name='subtestScore' and id=object_id(N'examSubtest'))
alter table examSubtest add 
subtestScore
 integer null /* Процент правильных ответов */
go
if  not exists(select * from syscolumns where name='okScore' and id=object_id(N'examSubtest'))
alter table examSubtest add 
okScore
 integer null /* Балы за правильные ответы */
go
if  not exists(select * from syscolumns where name='maxScore' and id=object_id(N'examSubtest'))
alter table examSubtest add 
maxScore
 integer null /* Максимальный бал за  субтест */
go
if  not exists(select * from syscolumns where name='TestRef' and id=object_id(N'examSubtest'))
alter table examSubtest add 
TestRef
 UNIQUEIDENTIFIER null /* Тест */
go
if  not exists(select * from syscolumns where name='subtest' and id=object_id(N'examSubtest'))
alter table examSubtest add 
subtest
 UNIQUEIDENTIFIER null /* Субтест */
go
if  not exists(select * from syscolumns where name='checkLog' and id=object_id(N'examSubtest'))
alter table examSubtest add 
checkLog
 TEXT null /* Протокол проверки */
go
go
-- drop extra columns from generated table: examSubtest
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('examSubtest')
and name not in('examPersonsID','examSubtestID','test_name','name','testJSON','testPlayer','subtestAnswers','needCheck','subtestFinished','subtestChecked','checkPerson','subtestScore','okScore','maxScore','TestRef','subtest','checkLog')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table examSubtest drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_examSubtest') and xtype='PK' and type='K')
ALTER TABLE examSubtest DROP CONSTRAINT pk_examSubtest
GO
alter table examSubtest add constraint pk_examSubtest primary key (examSubtestID)

GO
/*Файлы к ответам*/
if not exists (select * from sysobjects where id = object_id(N'examAnswerFile') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table examAnswerFile/*Файлы, к ответам*/ (
examSubtestID uniqueidentifier not null,
examAnswerFileid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='originalName' and id=object_id(N'examAnswerFile'))
alter table examAnswerFile add 
originalName
 VARCHAR (255) null /* Имя файла */
go
if  not exists(select * from syscolumns where name='filePath' and id=object_id(N'examAnswerFile'))
alter table examAnswerFile add 
filePath
 VARCHAR (255) null /* Путь к файлу в хранилище */
go
if  not exists(select * from syscolumns where name='fileType' and id=object_id(N'examAnswerFile'))
alter table examAnswerFile add 
fileType
 UNIQUEIDENTIFIER null /* Тип файла */
go
if  not exists(select * from syscolumns where name='fileComment' and id=object_id(N'examAnswerFile'))
alter table examAnswerFile add 
fileComment
 TEXT null /* Комментарий к файлу */
go
if  not exists(select * from syscolumns where name='theCode' and id=object_id(N'examAnswerFile'))
alter table examAnswerFile add 
theCode
 VARCHAR (64) null /* ID вопроса */
go
go
-- drop extra columns from generated table: examAnswerFile
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('examAnswerFile')
and name not in('examSubtestID','examAnswerFileID','originalName','filePath','fileType','fileComment','theCode')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table examAnswerFile drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_examAnswerFile') and xtype='PK' and type='K')
ALTER TABLE examAnswerFile DROP CONSTRAINT pk_examAnswerFile
GO
alter table examAnswerFile add constraint pk_examAnswerFile primary key (examAnswerFileID)

GO
/*Данные об экзамене*/
if not exists (select * from sysobjects where id = object_id(N'examInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table examInfo/*Данные по экзамену*/ (
examInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='theCert' and id=object_id(N'examInfo'))
alter table examInfo add 
theCert
 UNIQUEIDENTIFIER null /* Сертификат */
go
if  not exists(select * from syscolumns where name='examDate' and id=object_id(N'examInfo'))
alter table examInfo add 
examDate
 DATETIME null /* Дата экзамена */
go
if  not exists(select * from syscolumns where name='startTime' and id=object_id(N'examInfo'))
alter table examInfo add 
startTime
 datetime null /* Время начала  */
go
if  not exists(select * from syscolumns where name='allowRecord' and id=object_id(N'examInfo'))
alter table examInfo add 
allowRecord
 integer null 
 check (allowRecord in ( 1/* Да */
, 0/* Нет */ )) /* Разрешена запись */
go
if  not exists(select * from syscolumns where name='examStarted' and id=object_id(N'examInfo'))
alter table examInfo add 
examStarted
 integer null 
 check (examStarted in ( 1/* Да */
, 0/* Нет */ )) /* Экзамен  стартовал */
go
if  not exists(select * from syscolumns where name='examStopped' and id=object_id(N'examInfo'))
alter table examInfo add 
examStopped
 integer null 
 check (examStopped in ( 1/* Да */
, 0/* Нет */ )) /* Экзамен завершен */
go
if  not exists(select * from syscolumns where name='examGroup' and id=object_id(N'examInfo'))
alter table examInfo add 
examGroup
 VARCHAR (255) null /* Номер  группы */
go
if  not exists(select * from syscolumns where name='theORG' and id=object_id(N'examInfo'))
alter table examInfo add 
theORG
 UNIQUEIDENTIFIER null /* Организация владелец */
go
go
-- drop extra columns from generated table: examInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('examInfo')
and name not in('examInfoID','theCert','examDate','startTime','allowRecord','examStarted','examStopped','examGroup','theORG')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table examInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_examInfo') and xtype='PK' and type='K')
ALTER TABLE examInfo DROP CONSTRAINT pk_examInfo
GO
alter table examInfo add constraint pk_examInfo primary key (examInfoID)

GO
/*Тесты экзамена*/
if not exists (select * from sysobjects where id = object_id(N'examTest') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table examTest/*Тесты включенные в экзамен*/ (
examTestid uniqueidentifier not null rowguidcol default ( newid())  
,examInfoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='theTest' and id=object_id(N'examTest'))
alter table examTest add 
theTest
 UNIQUEIDENTIFIER null /* Тест */
go
if  not exists(select * from syscolumns where name='variantsNumber' and id=object_id(N'examTest'))
alter table examTest add 
variantsNumber
 integer null /* Количество вариантов */
go
go
-- drop extra columns from generated table: examTest
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('examTest')
and name not in('examTestID','examInfoID','theTest','variantsNumber')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table examTest drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_examTest') and xtype='PK' and type='K')
ALTER TABLE examTest DROP CONSTRAINT pk_examTest
GO
alter table examTest add constraint pk_examTest primary key (examTestID)

GO
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--ForeignKey" BlockCode=" 
if exists(select * from sysobjects where id=object_id(N'fk_23a399d424a14e4988ac226e1e8708a2') and type='F')
ALTER TABLE TestQuestionAnswers DROP CONSTRAINT fk_23a399d424a14e4988ac226e1e8708a2
GO
alter table TestQuestionAnswers add constraint fk_23a399d424a14e4988ac226e1e8708a2 foreign key(TestQuestionDescrID) references TestQuestionDescr (TestQuestionDescrID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_128ac9a4e5c64ea9a7427f7d98b28e9f') and type='F')
ALTER TABLE XChepter DROP CONSTRAINT fk_128ac9a4e5c64ea9a7427f7d98b28e9f
GO
alter table XChepter add constraint fk_128ac9a4e5c64ea9a7427f7d98b28e9f foreign key(XCourseModuleID) references XCourseModule (XCourseModuleID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_833dc00be8d74d9191032dd084befc1e') and type='F')
ALTER TABLE Num_Values DROP CONSTRAINT fk_833dc00be8d74d9191032dd084befc1e
GO
alter table Num_Values add constraint fk_833dc00be8d74d9191032dd084befc1e foreign key(Num_zonesID) references Num_zones (Num_zonesID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_c2763400be344033b4b5756cd5252cea') and type='F')
ALTER TABLE ARMJRNLREP DROP CONSTRAINT fk_c2763400be344033b4b5756cd5252cea
GO
alter table ARMJRNLREP add constraint fk_c2763400be344033b4b5756cd5252cea foreign key(ARMJournalID) references ARMJournal (ARMJournalID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_4fe8318100a54b599413d06318a119d4') and type='F')
ALTER TABLE ARMJRNLRUN DROP CONSTRAINT fk_4fe8318100a54b599413d06318a119d4
GO
alter table ARMJRNLRUN add constraint fk_4fe8318100a54b599413d06318a119d4 foreign key(ARMJournalID) references ARMJournal (ARMJournalID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_f837abedcae9430a9dee519dbb1b79d5') and type='F')
ALTER TABLE ARMJRNLADD DROP CONSTRAINT fk_f837abedcae9430a9dee519dbb1b79d5
GO
alter table ARMJRNLADD add constraint fk_f837abedcae9430a9dee519dbb1b79d5 foreign key(ARMJournalID) references ARMJournal (ARMJournalID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_d407359f220449699789956215e456e6') and type='F')
ALTER TABLE EPFilterLink DROP CONSTRAINT fk_d407359f220449699789956215e456e6
GO
alter table EPFilterLink add constraint fk_d407359f220449699789956215e456e6 foreign key(EntryPointsID) references EntryPoints (EntryPointsID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_8d8c85ebd15e45d7b13b0b4001eb9ac2') and type='F')
ALTER TABLE JColumnSource DROP CONSTRAINT fk_8d8c85ebd15e45d7b13b0b4001eb9ac2
GO
alter table JColumnSource add constraint fk_8d8c85ebd15e45d7b13b0b4001eb9ac2 foreign key(JournalColumnID) references JournalColumn (JournalColumnID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0c77d0de559e43fcb181156e126543f1') and type='F')
ALTER TABLE RPTFields DROP CONSTRAINT fk_0c77d0de559e43fcb181156e126543f1
GO
alter table RPTFields add constraint fk_0c77d0de559e43fcb181156e126543f1 foreign key(RPTStructID) references RPTStruct (RPTStructID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_f4b3740ce6764b6ea833ede44cb9fa63') and type='F')
ALTER TABLE FileterField DROP CONSTRAINT fk_f4b3740ce6764b6ea833ede44cb9fa63
GO
alter table FileterField add constraint fk_f4b3740ce6764b6ea833ede44cb9fa63 foreign key(FilterFieldGroupID) references FilterFieldGroup (FilterFieldGroupID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_cede351ce7c64f6b94508adf5617f757') and type='F')
ALTER TABLE onlineSubTest DROP CONSTRAINT fk_cede351ce7c64f6b94508adf5617f757
GO
alter table onlineSubTest add constraint fk_cede351ce7c64f6b94508adf5617f757 foreign key(testRequestID) references testRequest (testRequestID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0670efb9512711d58822204c4f4f5020') and type='F')
ALTER TABLE GENERATOR_TARGET DROP CONSTRAINT fk_0670efb9512711d58822204c4f4f5020
GO
alter table GENERATOR_TARGET add constraint fk_0670efb9512711d58822204c4f4f5020 foreign key(GENPACKAGEID) references GENPACKAGE (GENPACKAGEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_673e809bcff64309a52bfe2118ae508e') and type='F')
ALTER TABLE GENREFERENCE DROP CONSTRAINT fk_673e809bcff64309a52bfe2118ae508e
GO
alter table GENREFERENCE add constraint fk_673e809bcff64309a52bfe2118ae508e foreign key(GENERATOR_TARGETID) references GENERATOR_TARGET (GENERATOR_TARGETID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_766993ca7de64ada82168bddf2b0588e') and type='F')
ALTER TABLE GENMANUALCODE DROP CONSTRAINT fk_766993ca7de64ada82168bddf2b0588e
GO
alter table GENMANUALCODE add constraint fk_766993ca7de64ada82168bddf2b0588e foreign key(GENERATOR_TARGETID) references GENERATOR_TARGET (GENERATOR_TARGETID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_04b31cfb6525474a9f16999870d8eaaf') and type='F')
ALTER TABLE GENCONTROLS DROP CONSTRAINT fk_04b31cfb6525474a9f16999870d8eaaf
GO
alter table GENCONTROLS add constraint fk_04b31cfb6525474a9f16999870d8eaaf foreign key(GENERATOR_TARGETID) references GENERATOR_TARGET (GENERATOR_TARGETID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_35f46d2361f8413b924f83792f76e698') and type='F')
ALTER TABLE ENUMITEM DROP CONSTRAINT fk_35f46d2361f8413b924f83792f76e698
GO
alter table ENUMITEM add constraint fk_35f46d2361f8413b924f83792f76e698 foreign key(FIELDTYPEID) references FIELDTYPE (FIELDTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0670efa6512711d58822204c4f4f5020') and type='F')
ALTER TABLE FIELDTYPEMAP DROP CONSTRAINT fk_0670efa6512711d58822204c4f4f5020
GO
alter table FIELDTYPEMAP add constraint fk_0670efa6512711d58822204c4f4f5020 foreign key(FIELDTYPEID) references FIELDTYPE (FIELDTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0670efa3512711d58822204c4f4f5020') and type='F')
ALTER TABLE SCRIPT DROP CONSTRAINT fk_0670efa3512711d58822204c4f4f5020
GO
alter table SCRIPT add constraint fk_0670efa3512711d58822204c4f4f5020 foreign key(SHAREDMETHODID) references SHAREDMETHOD (SHAREDMETHODID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_e598e74ca9de404186fa972e95635600') and type='F')
ALTER TABLE PARAMETERS DROP CONSTRAINT fk_e598e74ca9de404186fa972e95635600
GO
alter table PARAMETERS add constraint fk_e598e74ca9de404186fa972e95635600 foreign key(SCRIPTID) references SCRIPT (SCRIPTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_df46c86638f84ef192e25f899d98bd16') and type='F')
ALTER TABLE OBJSTATUS DROP CONSTRAINT fk_df46c86638f84ef192e25f899d98bd16
GO
alter table OBJSTATUS add constraint fk_df46c86638f84ef192e25f899d98bd16 foreign key(OBJECTTYPEID) references OBJECTTYPE (OBJECTTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_11c1a17929b24ddcbdb71eb21d2ff878') and type='F')
ALTER TABLE NEXTSTATE DROP CONSTRAINT fk_11c1a17929b24ddcbdb71eb21d2ff878
GO
alter table NEXTSTATE add constraint fk_11c1a17929b24ddcbdb71eb21d2ff878 foreign key(OBJSTATUSID) references OBJSTATUS (OBJSTATUSID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_1168296da01c45dbb67d76a07f3ff64c') and type='F')
ALTER TABLE OBJECTMODE DROP CONSTRAINT fk_1168296da01c45dbb67d76a07f3ff64c
GO
alter table OBJECTMODE add constraint fk_1168296da01c45dbb67d76a07f3ff64c foreign key(OBJECTTYPEID) references OBJECTTYPE (OBJECTTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_f448ac333b13489993ee47d3d62962ec') and type='F')
ALTER TABLE STRUCTRESTRICTION DROP CONSTRAINT fk_f448ac333b13489993ee47d3d62962ec
GO
alter table STRUCTRESTRICTION add constraint fk_f448ac333b13489993ee47d3d62962ec foreign key(OBJECTMODEID) references OBJECTMODE (OBJECTMODEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0f7b3070f7094e7d868ccc337e3075d1') and type='F')
ALTER TABLE METHODRESTRICTION DROP CONSTRAINT fk_0f7b3070f7094e7d868ccc337e3075d1
GO
alter table METHODRESTRICTION add constraint fk_0f7b3070f7094e7d868ccc337e3075d1 foreign key(OBJECTMODEID) references OBJECTMODE (OBJECTMODEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_24c5119c5dc94aacbb01b8cf8eba998e') and type='F')
ALTER TABLE FIELDRESTRICTION DROP CONSTRAINT fk_24c5119c5dc94aacbb01b8cf8eba998e
GO
alter table FIELDRESTRICTION add constraint fk_24c5119c5dc94aacbb01b8cf8eba998e foreign key(OBJECTMODEID) references OBJECTMODE (OBJECTMODEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_8776747a743d47b9af1cab00ff81154f') and type='F')
ALTER TABLE TYPEMENU DROP CONSTRAINT fk_8776747a743d47b9af1cab00ff81154f
GO
alter table TYPEMENU add constraint fk_8776747a743d47b9af1cab00ff81154f foreign key(OBJECTTYPEID) references OBJECTTYPE (OBJECTTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_42515bade23340db8f9045dcfce01be6') and type='F')
ALTER TABLE INSTANCEVALIDATOR DROP CONSTRAINT fk_42515bade23340db8f9045dcfce01be6
GO
alter table INSTANCEVALIDATOR add constraint fk_42515bade23340db8f9045dcfce01be6 foreign key(OBJECTTYPEID) references OBJECTTYPE (OBJECTTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0670efb1512711d58822204c4f4f5020') and type='F')
ALTER TABLE PART DROP CONSTRAINT fk_0670efb1512711d58822204c4f4f5020
GO
alter table PART add constraint fk_0670efb1512711d58822204c4f4f5020 foreign key(OBJECTTYPEID) references OBJECTTYPE (OBJECTTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_548e9e2e89f64822a312101ca4a9fe74') and type='F')
ALTER TABLE PARTMENU DROP CONSTRAINT fk_548e9e2e89f64822a312101ca4a9fe74
GO
alter table PARTMENU add constraint fk_548e9e2e89f64822a312101ca4a9fe74 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_f8be6fca595d4f46acdbfb5838a246ca') and type='F')
ALTER TABLE PARTPARAMMAP DROP CONSTRAINT fk_f8be6fca595d4f46acdbfb5838a246ca
GO
alter table PARTPARAMMAP add constraint fk_f8be6fca595d4f46acdbfb5838a246ca foreign key(PARTMENUID) references PARTMENU (PARTMENUID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_d713b64d4ce8466dbe2b448874dc0469') and type='F')
ALTER TABLE PARTVIEW DROP CONSTRAINT fk_d713b64d4ce8466dbe2b448874dc0469
GO
alter table PARTVIEW add constraint fk_d713b64d4ce8466dbe2b448874dc0469 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_3bf43d5e0eb54ddb8efa62df3261a272') and type='F')
ALTER TABLE ViewColumn DROP CONSTRAINT fk_3bf43d5e0eb54ddb8efa62df3261a272
GO
alter table ViewColumn add constraint fk_3bf43d5e0eb54ddb8efa62df3261a272 foreign key(PARTVIEWID) references PARTVIEW (PARTVIEWID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_efad7fa2a77c4a30a0e1ff0ffe0e4a61') and type='F')
ALTER TABLE PARTVIEW_LNK DROP CONSTRAINT fk_efad7fa2a77c4a30a0e1ff0ffe0e4a61
GO
alter table PARTVIEW_LNK add constraint fk_efad7fa2a77c4a30a0e1ff0ffe0e4a61 foreign key(PARTVIEWID) references PARTVIEW (PARTVIEWID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_7d323655bad74d12afc2e7ff3613b4a1') and type='F')
ALTER TABLE VALIDATOR DROP CONSTRAINT fk_7d323655bad74d12afc2e7ff3613b4a1
GO
alter table VALIDATOR add constraint fk_7d323655bad74d12afc2e7ff3613b4a1 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_9caa5c89f1cb4b62b1d0ff2d29a40057') and type='F')
ALTER TABLE UNIQUECONSTRAINT DROP CONSTRAINT fk_9caa5c89f1cb4b62b1d0ff2d29a40057
GO
alter table UNIQUECONSTRAINT add constraint fk_9caa5c89f1cb4b62b1d0ff2d29a40057 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_c70106b1aa9541738097614495d6ef28') and type='F')
ALTER TABLE CONSTRAINTFIELD DROP CONSTRAINT fk_c70106b1aa9541738097614495d6ef28
GO
alter table CONSTRAINTFIELD add constraint fk_c70106b1aa9541738097614495d6ef28 foreign key(UNIQUECONSTRAINTID) references UNIQUECONSTRAINT (UNIQUECONSTRAINTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0fefa9963bad4ebba9ad52ac582cd0a7') and type='F')
ALTER TABLE ExtenderInterface DROP CONSTRAINT fk_0fefa9963bad4ebba9ad52ac582cd0a7
GO
alter table ExtenderInterface add constraint fk_0fefa9963bad4ebba9ad52ac582cd0a7 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0670efa4512711d58822204c4f4f5020') and type='F')
ALTER TABLE FIELD DROP CONSTRAINT fk_0670efa4512711d58822204c4f4f5020
GO
alter table FIELD add constraint fk_0670efa4512711d58822204c4f4f5020 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_5d0b0e1a80364b12b08160139558b594') and type='F')
ALTER TABLE FldExtenders DROP CONSTRAINT fk_5d0b0e1a80364b12b08160139558b594
GO
alter table FldExtenders add constraint fk_5d0b0e1a80364b12b08160139558b594 foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_d3f1af81912c4948a87ddf549ee796e2') and type='F')
ALTER TABLE FIELDSRCDEF DROP CONSTRAINT fk_d3f1af81912c4948a87ddf549ee796e2
GO
alter table FIELDSRCDEF add constraint fk_d3f1af81912c4948a87ddf549ee796e2 foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_23e26182cc8442d6b7a2d8da0026ebee') and type='F')
ALTER TABLE DINAMICFILTERSCRIPT DROP CONSTRAINT fk_23e26182cc8442d6b7a2d8da0026ebee
GO
alter table DINAMICFILTERSCRIPT add constraint fk_23e26182cc8442d6b7a2d8da0026ebee foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_34b08ed0c4b54b9cba59870a4599f52a') and type='F')
ALTER TABLE FIELDEXPRESSION DROP CONSTRAINT fk_34b08ed0c4b54b9cba59870a4599f52a
GO
alter table FIELDEXPRESSION add constraint fk_34b08ed0c4b54b9cba59870a4599f52a foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_b40bbed584c54b0b8679172aa1acdad9') and type='F')
ALTER TABLE FIELDVALIDATOR DROP CONSTRAINT fk_b40bbed584c54b0b8679172aa1acdad9
GO
alter table FIELDVALIDATOR add constraint fk_b40bbed584c54b0b8679172aa1acdad9 foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_4189c3e471c2423da56f4e71cb91b52d') and type='F')
ALTER TABLE FIELDMENU DROP CONSTRAINT fk_4189c3e471c2423da56f4e71cb91b52d
GO
alter table FIELDMENU add constraint fk_4189c3e471c2423da56f4e71cb91b52d foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_54752ae806b04ec68daa692e52a0d36c') and type='F')
ALTER TABLE FIELDPARAMMAP DROP CONSTRAINT fk_54752ae806b04ec68daa692e52a0d36c
GO
alter table FIELDPARAMMAP add constraint fk_54752ae806b04ec68daa692e52a0d36c foreign key(FIELDMENUID) references FIELDMENU (FIELDMENUID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_6ea00756b9804d23b209202389953a13') and type='F')
ALTER TABLE ParentPackage DROP CONSTRAINT fk_6ea00756b9804d23b209202389953a13
GO
alter table ParentPackage add constraint fk_6ea00756b9804d23b209202389953a13 foreign key(MTZAPPID) references MTZAPP (MTZAPPID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_fe2c9352e29a420b91343e3bdd832a6e') and type='F')
ALTER TABLE GroupUser DROP CONSTRAINT fk_fe2c9352e29a420b91343e3bdd832a6e
GO
alter table GroupUser add constraint fk_fe2c9352e29a420b91343e3bdd832a6e foreign key(GroupsID) references Groups (GroupsID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_84c3fb2a71de41b29ebecd489aad797b') and type='F')
ALTER TABLE TestModuleContent DROP CONSTRAINT fk_84c3fb2a71de41b29ebecd489aad797b
GO
alter table TestModuleContent add constraint fk_84c3fb2a71de41b29ebecd489aad797b foreign key(TestModuleDefinitionID) references TestModuleDefinition (TestModuleDefinitionID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_462842571efe47939e17e286c020fbf0') and type='F')
ALTER TABLE examTestScore DROP CONSTRAINT fk_462842571efe47939e17e286c020fbf0
GO
alter table examTestScore add constraint fk_462842571efe47939e17e286c020fbf0 foreign key(examPersonsID) references examPersons (examPersonsID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_c6c53fae487445719d7c6c3f35b5ac3c') and type='F')
ALTER TABLE examSubtest DROP CONSTRAINT fk_c6c53fae487445719d7c6c3f35b5ac3c
GO
alter table examSubtest add constraint fk_c6c53fae487445719d7c6c3f35b5ac3c foreign key(examPersonsID) references examPersons (examPersonsID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_357eedeea5cf4bbba4f0e47360db5fa7') and type='F')
ALTER TABLE examAnswerFile DROP CONSTRAINT fk_357eedeea5cf4bbba4f0e47360db5fa7
GO
alter table examAnswerFile add constraint fk_357eedeea5cf4bbba4f0e47360db5fa7 foreign key(examSubtestID) references examSubtest (examSubtestID)

GO
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--Index" BlockCode=" 
if exists (select * from sysindexes where name = N'parent_TestQuestionAnswers' and id = object_id(N'TestQuestionAnswers'))
drop index TestQuestionAnswers.parent_TestQuestionAnswers
GO
create index parent_TestQuestionAnswers on TestQuestionAnswers(TestQuestionDescrID)

GO
if exists (select * from sysindexes where name = N'parent_XChepter' and id = object_id(N'XChepter'))
drop index XChepter.parent_XChepter
GO
create index parent_XChepter on XChepter(XCourseModuleID)

GO
if exists (select * from sysindexes where name = N'parent_Num_Values' and id = object_id(N'Num_Values'))
drop index Num_Values.parent_Num_Values
GO
create index parent_Num_Values on Num_Values(Num_zonesID)

GO
if exists (select * from sysindexes where name = N'parent_ARMJRNLREP' and id = object_id(N'ARMJRNLREP'))
drop index ARMJRNLREP.parent_ARMJRNLREP
GO
create index parent_ARMJRNLREP on ARMJRNLREP(ARMJournalID)

GO
if exists (select * from sysindexes where name = N'parent_ARMJRNLRUN' and id = object_id(N'ARMJRNLRUN'))
drop index ARMJRNLRUN.parent_ARMJRNLRUN
GO
create index parent_ARMJRNLRUN on ARMJRNLRUN(ARMJournalID)

GO
if exists (select * from sysindexes where name = N'parent_ARMJRNLADD' and id = object_id(N'ARMJRNLADD'))
drop index ARMJRNLADD.parent_ARMJRNLADD
GO
create index parent_ARMJRNLADD on ARMJRNLADD(ARMJournalID)

GO
if exists (select * from sysindexes where name = N'parent_EPFilterLink' and id = object_id(N'EPFilterLink'))
drop index EPFilterLink.parent_EPFilterLink
GO
create index parent_EPFilterLink on EPFilterLink(EntryPointsID)

GO
if exists (select * from sysindexes where name = N'parent_JColumnSource' and id = object_id(N'JColumnSource'))
drop index JColumnSource.parent_JColumnSource
GO
create index parent_JColumnSource on JColumnSource(JournalColumnID)

GO
if exists (select * from sysindexes where name = N'parent_RPTFields' and id = object_id(N'RPTFields'))
drop index RPTFields.parent_RPTFields
GO
create index parent_RPTFields on RPTFields(RPTStructID)

GO
if exists (select * from sysindexes where name = N'parent_FileterField' and id = object_id(N'FileterField'))
drop index FileterField.parent_FileterField
GO
create index parent_FileterField on FileterField(FilterFieldGroupID)

GO
if exists (select * from sysindexes where name = N'parent_onlineSubTest' and id = object_id(N'onlineSubTest'))
drop index onlineSubTest.parent_onlineSubTest
GO
create index parent_onlineSubTest on onlineSubTest(testRequestID)

GO
if exists (select * from sysindexes where name = N'parent_GENERATOR_TARGET' and id = object_id(N'GENERATOR_TARGET'))
drop index GENERATOR_TARGET.parent_GENERATOR_TARGET
GO
create index parent_GENERATOR_TARGET on GENERATOR_TARGET(GENPACKAGEID)

GO
if exists (select * from sysindexes where name = N'parent_GENREFERENCE' and id = object_id(N'GENREFERENCE'))
drop index GENREFERENCE.parent_GENREFERENCE
GO
create index parent_GENREFERENCE on GENREFERENCE(GENERATOR_TARGETID)

GO
if exists (select * from sysindexes where name = N'parent_GENMANUALCODE' and id = object_id(N'GENMANUALCODE'))
drop index GENMANUALCODE.parent_GENMANUALCODE
GO
create index parent_GENMANUALCODE on GENMANUALCODE(GENERATOR_TARGETID)

GO
if exists (select * from sysindexes where name = N'parent_GENCONTROLS' and id = object_id(N'GENCONTROLS'))
drop index GENCONTROLS.parent_GENCONTROLS
GO
create index parent_GENCONTROLS on GENCONTROLS(GENERATOR_TARGETID)

GO
if exists (select * from sysindexes where name = N'parent_ENUMITEM' and id = object_id(N'ENUMITEM'))
drop index ENUMITEM.parent_ENUMITEM
GO
create index parent_ENUMITEM on ENUMITEM(FIELDTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDTYPEMAP' and id = object_id(N'FIELDTYPEMAP'))
drop index FIELDTYPEMAP.parent_FIELDTYPEMAP
GO
create index parent_FIELDTYPEMAP on FIELDTYPEMAP(FIELDTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_SCRIPT' and id = object_id(N'SCRIPT'))
drop index SCRIPT.parent_SCRIPT
GO
create index parent_SCRIPT on SCRIPT(SHAREDMETHODID)

GO
if exists (select * from sysindexes where name = N'parent_PARAMETERS' and id = object_id(N'PARAMETERS'))
drop index PARAMETERS.parent_PARAMETERS
GO
create index parent_PARAMETERS on PARAMETERS(SCRIPTID)

GO
if exists (select * from sysindexes where name = N'parent_OBJSTATUS' and id = object_id(N'OBJSTATUS'))
drop index OBJSTATUS.parent_OBJSTATUS
GO
create index parent_OBJSTATUS on OBJSTATUS(OBJECTTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_NEXTSTATE' and id = object_id(N'NEXTSTATE'))
drop index NEXTSTATE.parent_NEXTSTATE
GO
create index parent_NEXTSTATE on NEXTSTATE(OBJSTATUSID)

GO
if exists (select * from sysindexes where name = N'parent_OBJECTMODE' and id = object_id(N'OBJECTMODE'))
drop index OBJECTMODE.parent_OBJECTMODE
GO
create index parent_OBJECTMODE on OBJECTMODE(OBJECTTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_STRUCTRESTRICTION' and id = object_id(N'STRUCTRESTRICTION'))
drop index STRUCTRESTRICTION.parent_STRUCTRESTRICTION
GO
create index parent_STRUCTRESTRICTION on STRUCTRESTRICTION(OBJECTMODEID)

GO
if exists (select * from sysindexes where name = N'parent_METHODRESTRICTION' and id = object_id(N'METHODRESTRICTION'))
drop index METHODRESTRICTION.parent_METHODRESTRICTION
GO
create index parent_METHODRESTRICTION on METHODRESTRICTION(OBJECTMODEID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDRESTRICTION' and id = object_id(N'FIELDRESTRICTION'))
drop index FIELDRESTRICTION.parent_FIELDRESTRICTION
GO
create index parent_FIELDRESTRICTION on FIELDRESTRICTION(OBJECTMODEID)

GO
if exists (select * from sysindexes where name = N'parent_TYPEMENU' and id = object_id(N'TYPEMENU'))
drop index TYPEMENU.parent_TYPEMENU
GO
create index parent_TYPEMENU on TYPEMENU(OBJECTTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_INSTANCEVALIDATOR' and id = object_id(N'INSTANCEVALIDATOR'))
drop index INSTANCEVALIDATOR.parent_INSTANCEVALIDATOR
GO
create index parent_INSTANCEVALIDATOR on INSTANCEVALIDATOR(OBJECTTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_PART' and id = object_id(N'PART'))
drop index PART.parent_PART
GO
create index parent_PART on PART(OBJECTTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_PARTMENU' and id = object_id(N'PARTMENU'))
drop index PARTMENU.parent_PARTMENU
GO
create index parent_PARTMENU on PARTMENU(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_PARTPARAMMAP' and id = object_id(N'PARTPARAMMAP'))
drop index PARTPARAMMAP.parent_PARTPARAMMAP
GO
create index parent_PARTPARAMMAP on PARTPARAMMAP(PARTMENUID)

GO
if exists (select * from sysindexes where name = N'parent_PARTVIEW' and id = object_id(N'PARTVIEW'))
drop index PARTVIEW.parent_PARTVIEW
GO
create index parent_PARTVIEW on PARTVIEW(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_ViewColumn' and id = object_id(N'ViewColumn'))
drop index ViewColumn.parent_ViewColumn
GO
create index parent_ViewColumn on ViewColumn(PARTVIEWID)

GO
if exists (select * from sysindexes where name = N'parent_PARTVIEW_LNK' and id = object_id(N'PARTVIEW_LNK'))
drop index PARTVIEW_LNK.parent_PARTVIEW_LNK
GO
create index parent_PARTVIEW_LNK on PARTVIEW_LNK(PARTVIEWID)

GO
if exists (select * from sysindexes where name = N'parent_VALIDATOR' and id = object_id(N'VALIDATOR'))
drop index VALIDATOR.parent_VALIDATOR
GO
create index parent_VALIDATOR on VALIDATOR(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_UNIQUECONSTRAINT' and id = object_id(N'UNIQUECONSTRAINT'))
drop index UNIQUECONSTRAINT.parent_UNIQUECONSTRAINT
GO
create index parent_UNIQUECONSTRAINT on UNIQUECONSTRAINT(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_CONSTRAINTFIELD' and id = object_id(N'CONSTRAINTFIELD'))
drop index CONSTRAINTFIELD.parent_CONSTRAINTFIELD
GO
create index parent_CONSTRAINTFIELD on CONSTRAINTFIELD(UNIQUECONSTRAINTID)

GO
if exists (select * from sysindexes where name = N'parent_ExtenderInterface' and id = object_id(N'ExtenderInterface'))
drop index ExtenderInterface.parent_ExtenderInterface
GO
create index parent_ExtenderInterface on ExtenderInterface(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_FIELD' and id = object_id(N'FIELD'))
drop index FIELD.parent_FIELD
GO
create index parent_FIELD on FIELD(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_FldExtenders' and id = object_id(N'FldExtenders'))
drop index FldExtenders.parent_FldExtenders
GO
create index parent_FldExtenders on FldExtenders(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDSRCDEF' and id = object_id(N'FIELDSRCDEF'))
drop index FIELDSRCDEF.parent_FIELDSRCDEF
GO
create index parent_FIELDSRCDEF on FIELDSRCDEF(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_DINAMICFILTERSCRIPT' and id = object_id(N'DINAMICFILTERSCRIPT'))
drop index DINAMICFILTERSCRIPT.parent_DINAMICFILTERSCRIPT
GO
create index parent_DINAMICFILTERSCRIPT on DINAMICFILTERSCRIPT(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDEXPRESSION' and id = object_id(N'FIELDEXPRESSION'))
drop index FIELDEXPRESSION.parent_FIELDEXPRESSION
GO
create index parent_FIELDEXPRESSION on FIELDEXPRESSION(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDVALIDATOR' and id = object_id(N'FIELDVALIDATOR'))
drop index FIELDVALIDATOR.parent_FIELDVALIDATOR
GO
create index parent_FIELDVALIDATOR on FIELDVALIDATOR(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDMENU' and id = object_id(N'FIELDMENU'))
drop index FIELDMENU.parent_FIELDMENU
GO
create index parent_FIELDMENU on FIELDMENU(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDPARAMMAP' and id = object_id(N'FIELDPARAMMAP'))
drop index FIELDPARAMMAP.parent_FIELDPARAMMAP
GO
create index parent_FIELDPARAMMAP on FIELDPARAMMAP(FIELDMENUID)

GO
if exists (select * from sysindexes where name = N'parent_ParentPackage' and id = object_id(N'ParentPackage'))
drop index ParentPackage.parent_ParentPackage
GO
create index parent_ParentPackage on ParentPackage(MTZAPPID)

GO
if exists (select * from sysindexes where name = N'parent_GroupUser' and id = object_id(N'GroupUser'))
drop index GroupUser.parent_GroupUser
GO
create index parent_GroupUser on GroupUser(GroupsID)

GO
if exists (select * from sysindexes where name = N'parent_TestModuleContent' and id = object_id(N'TestModuleContent'))
drop index TestModuleContent.parent_TestModuleContent
GO
create index parent_TestModuleContent on TestModuleContent(TestModuleDefinitionID)

GO
if exists (select * from sysindexes where name = N'parent_examTestScore' and id = object_id(N'examTestScore'))
drop index examTestScore.parent_examTestScore
GO
create index parent_examTestScore on examTestScore(examPersonsID)

GO
if exists (select * from sysindexes where name = N'parent_examSubtest' and id = object_id(N'examSubtest'))
drop index examSubtest.parent_examSubtest
GO
create index parent_examSubtest on examSubtest(examPersonsID)

GO
if exists (select * from sysindexes where name = N'parent_examAnswerFile' and id = object_id(N'examAnswerFile'))
drop index examAnswerFile.parent_examAnswerFile
GO
create index parent_examAnswerFile on examAnswerFile(examSubtestID)

GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--FunctionsHeader" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 

if exists (select * from sysobjects where id = object_id(N'TestQuestionDescr_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestQuestionDescr_BRIEF_F
GO
create function TestQuestionDescr_BRIEF_F  (
 @TestQuestionDescrid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestQuestionDescr_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestQuestionDescr_MREF_F
GO
create function TestQuestionDescr_MREF_F  (
 @TestQuestionDescr_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestQuestionAnswers_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestQuestionAnswers_BRIEF_F
GO
create function TestQuestionAnswers_BRIEF_F  (
 @TestQuestionAnswersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestQuestionAnswers_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestQuestionAnswers_MREF_F
GO
create function TestQuestionAnswers_MREF_F  (
 @TestQuestionAnswers_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestModuleGroup_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestModuleGroup_BRIEF_F
GO
create function TestModuleGroup_BRIEF_F  (
 @TestModuleGroupid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestModuleGroup_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestModuleGroup_MREF_F
GO
create function TestModuleGroup_MREF_F  (
 @TestModuleGroup_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestBlockUsage_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestBlockUsage_BRIEF_F
GO
create function TestBlockUsage_BRIEF_F  (
 @TestBlockUsageid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestBlockUsage_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestBlockUsage_MREF_F
GO
create function TestBlockUsage_MREF_F  (
 @TestBlockUsage_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestGroupFiles_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestGroupFiles_BRIEF_F
GO
create function TestGroupFiles_BRIEF_F  (
 @TestGroupFilesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestGroupFiles_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestGroupFiles_MREF_F
GO
create function TestGroupFiles_MREF_F  (
 @TestGroupFiles_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'VariantDescr_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function VariantDescr_BRIEF_F
GO
create function VariantDescr_BRIEF_F  (
 @VariantDescrid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'VariantDescr_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function VariantDescr_MREF_F
GO
create function VariantDescr_MREF_F  (
 @VariantDescr_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'VariantSubtest_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function VariantSubtest_BRIEF_F
GO
create function VariantSubtest_BRIEF_F  (
 @VariantSubtestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'VariantSubtest_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function VariantSubtest_MREF_F
GO
create function VariantSubtest_MREF_F  (
 @VariantSubtest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XInstructorInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XInstructorInfo_BRIEF_F
GO
create function XInstructorInfo_BRIEF_F  (
 @XInstructorInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XInstructorInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XInstructorInfo_MREF_F
GO
create function XInstructorInfo_MREF_F  (
 @XInstructorInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XInstructorStatus_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XInstructorStatus_BRIEF_F
GO
create function XInstructorStatus_BRIEF_F  (
 @XInstructorStatusid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XInstructorStatus_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XInstructorStatus_MREF_F
GO
create function XInstructorStatus_MREF_F  (
 @XInstructorStatus_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCourseDesc_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCourseDesc_BRIEF_F
GO
create function XCourseDesc_BRIEF_F  (
 @XCourseDescid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCourseDesc_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCourseDesc_MREF_F
GO
create function XCourseDesc_MREF_F  (
 @XCourseDesc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCourseModule_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCourseModule_BRIEF_F
GO
create function XCourseModule_BRIEF_F  (
 @XCourseModuleid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XCourseModule_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XCourseModule_MREF_F
GO
create function XCourseModule_MREF_F  (
 @XCourseModule_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XChepter_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XChepter_BRIEF_F
GO
create function XChepter_BRIEF_F  (
 @XChepterid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XChepter_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XChepter_MREF_F
GO
create function XChepter_MREF_F  (
 @XChepter_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_zones_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_zones_BRIEF_F
GO
create function Num_zones_BRIEF_F  (
 @Num_zonesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_zones_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_zones_MREF_F
GO
create function Num_zones_MREF_F  (
 @Num_zones_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_Values_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_Values_BRIEF_F
GO
create function Num_Values_BRIEF_F  (
 @Num_Valuesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_Values_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_Values_MREF_F
GO
create function Num_Values_MREF_F  (
 @Num_Values_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_head_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_head_BRIEF_F
GO
create function Num_head_BRIEF_F  (
 @Num_headid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_head_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_head_MREF_F
GO
create function Num_head_MREF_F  (
 @Num_head_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJournal_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJournal_BRIEF_F
GO
create function ARMJournal_BRIEF_F  (
 @ARMJournalid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJournal_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJournal_MREF_F
GO
create function ARMJournal_MREF_F  (
 @ARMJournal_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLREP_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLREP_BRIEF_F
GO
create function ARMJRNLREP_BRIEF_F  (
 @ARMJRNLREPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLREP_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLREP_MREF_F
GO
create function ARMJRNLREP_MREF_F  (
 @ARMJRNLREP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLRUN_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLRUN_BRIEF_F
GO
create function ARMJRNLRUN_BRIEF_F  (
 @ARMJRNLRUNid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLRUN_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLRUN_MREF_F
GO
create function ARMJRNLRUN_MREF_F  (
 @ARMJRNLRUN_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLADD_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLADD_BRIEF_F
GO
create function ARMJRNLADD_BRIEF_F  (
 @ARMJRNLADDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLADD_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLADD_MREF_F
GO
create function ARMJRNLADD_MREF_F  (
 @ARMJRNLADD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'EntryPoints_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function EntryPoints_BRIEF_F
GO
create function EntryPoints_BRIEF_F  (
 @EntryPointsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'EntryPoints_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function EntryPoints_MREF_F
GO
create function EntryPoints_MREF_F  (
 @EntryPoints_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'EPFilterLink_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function EPFilterLink_BRIEF_F
GO
create function EPFilterLink_BRIEF_F  (
 @EPFilterLinkid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'EPFilterLink_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function EPFilterLink_MREF_F
GO
create function EPFilterLink_MREF_F  (
 @EPFilterLink_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'WorkPlace_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function WorkPlace_BRIEF_F
GO
create function WorkPlace_BRIEF_F  (
 @WorkPlaceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'WorkPlace_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function WorkPlace_MREF_F
GO
create function WorkPlace_MREF_F  (
 @WorkPlace_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMTypes_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMTypes_BRIEF_F
GO
create function ARMTypes_BRIEF_F  (
 @ARMTypesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMTypes_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMTypes_MREF_F
GO
create function ARMTypes_MREF_F  (
 @ARMTypes_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JournalColumn_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JournalColumn_BRIEF_F
GO
create function JournalColumn_BRIEF_F  (
 @JournalColumnid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JournalColumn_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JournalColumn_MREF_F
GO
create function JournalColumn_MREF_F  (
 @JournalColumn_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JColumnSource_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JColumnSource_BRIEF_F
GO
create function JColumnSource_BRIEF_F  (
 @JColumnSourceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JColumnSource_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JColumnSource_MREF_F
GO
create function JColumnSource_MREF_F  (
 @JColumnSource_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JournalSrc_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JournalSrc_BRIEF_F
GO
create function JournalSrc_BRIEF_F  (
 @JournalSrcid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JournalSrc_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JournalSrc_MREF_F
GO
create function JournalSrc_MREF_F  (
 @JournalSrc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Journal_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Journal_BRIEF_F
GO
create function Journal_BRIEF_F  (
 @Journalid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Journal_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Journal_MREF_F
GO
create function Journal_MREF_F  (
 @Journal_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTStruct_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTStruct_BRIEF_F
GO
create function RPTStruct_BRIEF_F  (
 @RPTStructid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTStruct_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTStruct_MREF_F
GO
create function RPTStruct_MREF_F  (
 @RPTStruct_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTFields_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTFields_BRIEF_F
GO
create function RPTFields_BRIEF_F  (
 @RPTFieldsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTFields_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTFields_MREF_F
GO
create function RPTFields_MREF_F  (
 @RPTFields_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTFormula_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTFormula_BRIEF_F
GO
create function RPTFormula_BRIEF_F  (
 @RPTFormulaid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTFormula_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTFormula_MREF_F
GO
create function RPTFormula_MREF_F  (
 @RPTFormula_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Reports_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Reports_BRIEF_F
GO
create function Reports_BRIEF_F  (
 @Reportsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Reports_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Reports_MREF_F
GO
create function Reports_MREF_F  (
 @Reports_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FilterFieldGroup_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FilterFieldGroup_BRIEF_F
GO
create function FilterFieldGroup_BRIEF_F  (
 @FilterFieldGroupid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FilterFieldGroup_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FilterFieldGroup_MREF_F
GO
create function FilterFieldGroup_MREF_F  (
 @FilterFieldGroup_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FileterField_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FileterField_BRIEF_F
GO
create function FileterField_BRIEF_F  (
 @FileterFieldid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FileterField_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FileterField_MREF_F
GO
create function FileterField_MREF_F  (
 @FileterField_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Filters_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Filters_BRIEF_F
GO
create function Filters_BRIEF_F  (
 @Filtersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Filters_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Filters_MREF_F
GO
create function Filters_MREF_F  (
 @Filters_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OrganizationInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OrganizationInfo_BRIEF_F
GO
create function OrganizationInfo_BRIEF_F  (
 @OrganizationInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OrganizationInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OrganizationInfo_MREF_F
GO
create function OrganizationInfo_MREF_F  (
 @OrganizationInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examRequest_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examRequest_BRIEF_F
GO
create function examRequest_BRIEF_F  (
 @examRequestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examRequest_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examRequest_MREF_F
GO
create function examRequest_MREF_F  (
 @examRequest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestPersonInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestPersonInfo_BRIEF_F
GO
create function TestPersonInfo_BRIEF_F  (
 @TestPersonInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestPersonInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestPersonInfo_MREF_F
GO
create function TestPersonInfo_MREF_F  (
 @TestPersonInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'testRequest_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function testRequest_BRIEF_F
GO
create function testRequest_BRIEF_F  (
 @testRequestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'testRequest_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function testRequest_MREF_F
GO
create function testRequest_MREF_F  (
 @testRequest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'onlineSubTest_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function onlineSubTest_BRIEF_F
GO
create function onlineSubTest_BRIEF_F  (
 @onlineSubTestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'onlineSubTest_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function onlineSubTest_MREF_F
GO
create function onlineSubTest_MREF_F  (
 @onlineSubTest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserInfo_BRIEF_F
GO
create function XUserInfo_BRIEF_F  (
 @XUserInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserInfo_MREF_F
GO
create function XUserInfo_MREF_F  (
 @XUserInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubscription_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubscription_BRIEF_F
GO
create function XSubscription_BRIEF_F  (
 @XSubscriptionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubscription_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubscription_MREF_F
GO
create function XSubscription_MREF_F  (
 @XSubscription_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserPurchase_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserPurchase_BRIEF_F
GO
create function XUserPurchase_BRIEF_F  (
 @XUserPurchaseid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserPurchase_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserPurchase_MREF_F
GO
create function XUserPurchase_MREF_F  (
 @XUserPurchase_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserProfile_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserProfile_BRIEF_F
GO
create function XUserProfile_BRIEF_F  (
 @XUserProfileid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserProfile_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserProfile_MREF_F
GO
create function XUserProfile_MREF_F  (
 @XUserProfile_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserRegistartion_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserRegistartion_BRIEF_F
GO
create function XUserRegistartion_BRIEF_F  (
 @XUserRegistartionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserRegistartion_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserRegistartion_MREF_F
GO
create function XUserRegistartion_MREF_F  (
 @XUserRegistartion_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserCart_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserCart_BRIEF_F
GO
create function XUserCart_BRIEF_F  (
 @XUserCartid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XUserCart_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XUserCart_MREF_F
GO
create function XUserCart_MREF_F  (
 @XUserCart_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XScheduleItem_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XScheduleItem_BRIEF_F
GO
create function XScheduleItem_BRIEF_F  (
 @XScheduleItemid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XScheduleItem_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XScheduleItem_MREF_F
GO
create function XScheduleItem_MREF_F  (
 @XScheduleItem_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZExt_def_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZExt_def_BRIEF_F
GO
create function MTZExt_def_BRIEF_F  (
 @MTZExt_defid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZExt_def_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZExt_def_MREF_F
GO
create function MTZExt_def_MREF_F  (
 @MTZExt_def_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZExtRel_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZExtRel_BRIEF_F
GO
create function MTZExtRel_BRIEF_F  (
 @MTZExtRelid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZExtRel_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZExtRel_MREF_F
GO
create function MTZExtRel_MREF_F  (
 @MTZExtRel_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'certModules_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function certModules_BRIEF_F
GO
create function certModules_BRIEF_F  (
 @certModulesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'certModules_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function certModules_MREF_F
GO
create function certModules_MREF_F  (
 @certModules_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'certInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function certInfo_BRIEF_F
GO
create function certInfo_BRIEF_F  (
 @certInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'certInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function certInfo_MREF_F
GO
create function certInfo_MREF_F  (
 @certInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENPACKAGE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENPACKAGE_BRIEF_F
GO
create function GENPACKAGE_BRIEF_F  (
 @GENPACKAGEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENPACKAGE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENPACKAGE_MREF_F
GO
create function GENPACKAGE_MREF_F  (
 @GENPACKAGE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENERATOR_TARGET_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENERATOR_TARGET_BRIEF_F
GO
create function GENERATOR_TARGET_BRIEF_F  (
 @GENERATOR_TARGETid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENERATOR_TARGET_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENERATOR_TARGET_MREF_F
GO
create function GENERATOR_TARGET_MREF_F  (
 @GENERATOR_TARGET_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENREFERENCE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENREFERENCE_BRIEF_F
GO
create function GENREFERENCE_BRIEF_F  (
 @GENREFERENCEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENREFERENCE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENREFERENCE_MREF_F
GO
create function GENREFERENCE_MREF_F  (
 @GENREFERENCE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENMANUALCODE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENMANUALCODE_BRIEF_F
GO
create function GENMANUALCODE_BRIEF_F  (
 @GENMANUALCODEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENMANUALCODE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENMANUALCODE_MREF_F
GO
create function GENMANUALCODE_MREF_F  (
 @GENMANUALCODE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENCONTROLS_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENCONTROLS_BRIEF_F
GO
create function GENCONTROLS_BRIEF_F  (
 @GENCONTROLSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENCONTROLS_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENCONTROLS_MREF_F
GO
create function GENCONTROLS_MREF_F  (
 @GENCONTROLS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'LocalizeInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function LocalizeInfo_BRIEF_F
GO
create function LocalizeInfo_BRIEF_F  (
 @LocalizeInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'LocalizeInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function LocalizeInfo_MREF_F
GO
create function LocalizeInfo_MREF_F  (
 @LocalizeInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDTYPE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDTYPE_BRIEF_F
GO
create function FIELDTYPE_BRIEF_F  (
 @FIELDTYPEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDTYPE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDTYPE_MREF_F
GO
create function FIELDTYPE_MREF_F  (
 @FIELDTYPE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ENUMITEM_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ENUMITEM_BRIEF_F
GO
create function ENUMITEM_BRIEF_F  (
 @ENUMITEMid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ENUMITEM_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ENUMITEM_MREF_F
GO
create function ENUMITEM_MREF_F  (
 @ENUMITEM_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDTYPEMAP_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDTYPEMAP_BRIEF_F
GO
create function FIELDTYPEMAP_BRIEF_F  (
 @FIELDTYPEMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDTYPEMAP_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDTYPEMAP_MREF_F
GO
create function FIELDTYPEMAP_MREF_F  (
 @FIELDTYPEMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SHAREDMETHOD_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SHAREDMETHOD_BRIEF_F
GO
create function SHAREDMETHOD_BRIEF_F  (
 @SHAREDMETHODid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SHAREDMETHOD_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SHAREDMETHOD_MREF_F
GO
create function SHAREDMETHOD_MREF_F  (
 @SHAREDMETHOD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SCRIPT_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SCRIPT_BRIEF_F
GO
create function SCRIPT_BRIEF_F  (
 @SCRIPTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SCRIPT_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SCRIPT_MREF_F
GO
create function SCRIPT_MREF_F  (
 @SCRIPT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARAMETERS_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARAMETERS_BRIEF_F
GO
create function PARAMETERS_BRIEF_F  (
 @PARAMETERSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARAMETERS_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARAMETERS_MREF_F
GO
create function PARAMETERS_MREF_F  (
 @PARAMETERS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJECTTYPE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJECTTYPE_BRIEF_F
GO
create function OBJECTTYPE_BRIEF_F  (
 @OBJECTTYPEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJECTTYPE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJECTTYPE_MREF_F
GO
create function OBJECTTYPE_MREF_F  (
 @OBJECTTYPE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJSTATUS_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJSTATUS_BRIEF_F
GO
create function OBJSTATUS_BRIEF_F  (
 @OBJSTATUSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJSTATUS_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJSTATUS_MREF_F
GO
create function OBJSTATUS_MREF_F  (
 @OBJSTATUS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'NEXTSTATE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function NEXTSTATE_BRIEF_F
GO
create function NEXTSTATE_BRIEF_F  (
 @NEXTSTATEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'NEXTSTATE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function NEXTSTATE_MREF_F
GO
create function NEXTSTATE_MREF_F  (
 @NEXTSTATE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJECTMODE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJECTMODE_BRIEF_F
GO
create function OBJECTMODE_BRIEF_F  (
 @OBJECTMODEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJECTMODE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJECTMODE_MREF_F
GO
create function OBJECTMODE_MREF_F  (
 @OBJECTMODE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'STRUCTRESTRICTION_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function STRUCTRESTRICTION_BRIEF_F
GO
create function STRUCTRESTRICTION_BRIEF_F  (
 @STRUCTRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'STRUCTRESTRICTION_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function STRUCTRESTRICTION_MREF_F
GO
create function STRUCTRESTRICTION_MREF_F  (
 @STRUCTRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'METHODRESTRICTION_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function METHODRESTRICTION_BRIEF_F
GO
create function METHODRESTRICTION_BRIEF_F  (
 @METHODRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'METHODRESTRICTION_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function METHODRESTRICTION_MREF_F
GO
create function METHODRESTRICTION_MREF_F  (
 @METHODRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDRESTRICTION_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDRESTRICTION_BRIEF_F
GO
create function FIELDRESTRICTION_BRIEF_F  (
 @FIELDRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDRESTRICTION_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDRESTRICTION_MREF_F
GO
create function FIELDRESTRICTION_MREF_F  (
 @FIELDRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TYPEMENU_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TYPEMENU_BRIEF_F
GO
create function TYPEMENU_BRIEF_F  (
 @TYPEMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TYPEMENU_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TYPEMENU_MREF_F
GO
create function TYPEMENU_MREF_F  (
 @TYPEMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'INSTANCEVALIDATOR_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function INSTANCEVALIDATOR_BRIEF_F
GO
create function INSTANCEVALIDATOR_BRIEF_F  (
 @INSTANCEVALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'INSTANCEVALIDATOR_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function INSTANCEVALIDATOR_MREF_F
GO
create function INSTANCEVALIDATOR_MREF_F  (
 @INSTANCEVALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PART_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PART_BRIEF_F
GO
create function PART_BRIEF_F  (
 @PARTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PART_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PART_MREF_F
GO
create function PART_MREF_F  (
 @PART_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTMENU_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTMENU_BRIEF_F
GO
create function PARTMENU_BRIEF_F  (
 @PARTMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTMENU_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTMENU_MREF_F
GO
create function PARTMENU_MREF_F  (
 @PARTMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTPARAMMAP_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTPARAMMAP_BRIEF_F
GO
create function PARTPARAMMAP_BRIEF_F  (
 @PARTPARAMMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTPARAMMAP_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTPARAMMAP_MREF_F
GO
create function PARTPARAMMAP_MREF_F  (
 @PARTPARAMMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTVIEW_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTVIEW_BRIEF_F
GO
create function PARTVIEW_BRIEF_F  (
 @PARTVIEWid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTVIEW_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTVIEW_MREF_F
GO
create function PARTVIEW_MREF_F  (
 @PARTVIEW_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ViewColumn_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ViewColumn_BRIEF_F
GO
create function ViewColumn_BRIEF_F  (
 @ViewColumnid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ViewColumn_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ViewColumn_MREF_F
GO
create function ViewColumn_MREF_F  (
 @ViewColumn_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTVIEW_LNK_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTVIEW_LNK_BRIEF_F
GO
create function PARTVIEW_LNK_BRIEF_F  (
 @PARTVIEW_LNKid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTVIEW_LNK_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTVIEW_LNK_MREF_F
GO
create function PARTVIEW_LNK_MREF_F  (
 @PARTVIEW_LNK_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'VALIDATOR_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function VALIDATOR_BRIEF_F
GO
create function VALIDATOR_BRIEF_F  (
 @VALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'VALIDATOR_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function VALIDATOR_MREF_F
GO
create function VALIDATOR_MREF_F  (
 @VALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'UNIQUECONSTRAINT_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function UNIQUECONSTRAINT_BRIEF_F
GO
create function UNIQUECONSTRAINT_BRIEF_F  (
 @UNIQUECONSTRAINTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'UNIQUECONSTRAINT_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function UNIQUECONSTRAINT_MREF_F
GO
create function UNIQUECONSTRAINT_MREF_F  (
 @UNIQUECONSTRAINT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'CONSTRAINTFIELD_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function CONSTRAINTFIELD_BRIEF_F
GO
create function CONSTRAINTFIELD_BRIEF_F  (
 @CONSTRAINTFIELDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'CONSTRAINTFIELD_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function CONSTRAINTFIELD_MREF_F
GO
create function CONSTRAINTFIELD_MREF_F  (
 @CONSTRAINTFIELD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ExtenderInterface_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ExtenderInterface_BRIEF_F
GO
create function ExtenderInterface_BRIEF_F  (
 @ExtenderInterfaceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ExtenderInterface_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ExtenderInterface_MREF_F
GO
create function ExtenderInterface_MREF_F  (
 @ExtenderInterface_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELD_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELD_BRIEF_F
GO
create function FIELD_BRIEF_F  (
 @FIELDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELD_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELD_MREF_F
GO
create function FIELD_MREF_F  (
 @FIELD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FldExtenders_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FldExtenders_BRIEF_F
GO
create function FldExtenders_BRIEF_F  (
 @FldExtendersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FldExtenders_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FldExtenders_MREF_F
GO
create function FldExtenders_MREF_F  (
 @FldExtenders_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDSRCDEF_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDSRCDEF_BRIEF_F
GO
create function FIELDSRCDEF_BRIEF_F  (
 @FIELDSRCDEFid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDSRCDEF_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDSRCDEF_MREF_F
GO
create function FIELDSRCDEF_MREF_F  (
 @FIELDSRCDEF_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'DINAMICFILTERSCRIPT_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function DINAMICFILTERSCRIPT_BRIEF_F
GO
create function DINAMICFILTERSCRIPT_BRIEF_F  (
 @DINAMICFILTERSCRIPTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'DINAMICFILTERSCRIPT_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function DINAMICFILTERSCRIPT_MREF_F
GO
create function DINAMICFILTERSCRIPT_MREF_F  (
 @DINAMICFILTERSCRIPT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDEXPRESSION_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDEXPRESSION_BRIEF_F
GO
create function FIELDEXPRESSION_BRIEF_F  (
 @FIELDEXPRESSIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDEXPRESSION_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDEXPRESSION_MREF_F
GO
create function FIELDEXPRESSION_MREF_F  (
 @FIELDEXPRESSION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDVALIDATOR_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDVALIDATOR_BRIEF_F
GO
create function FIELDVALIDATOR_BRIEF_F  (
 @FIELDVALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDVALIDATOR_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDVALIDATOR_MREF_F
GO
create function FIELDVALIDATOR_MREF_F  (
 @FIELDVALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDMENU_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDMENU_BRIEF_F
GO
create function FIELDMENU_BRIEF_F  (
 @FIELDMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDMENU_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDMENU_MREF_F
GO
create function FIELDMENU_MREF_F  (
 @FIELDMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDPARAMMAP_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDPARAMMAP_BRIEF_F
GO
create function FIELDPARAMMAP_BRIEF_F  (
 @FIELDPARAMMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDPARAMMAP_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDPARAMMAP_MREF_F
GO
create function FIELDPARAMMAP_MREF_F  (
 @FIELDPARAMMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZAPP_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZAPP_BRIEF_F
GO
create function MTZAPP_BRIEF_F  (
 @MTZAPPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZAPP_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZAPP_MREF_F
GO
create function MTZAPP_MREF_F  (
 @MTZAPP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ParentPackage_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ParentPackage_BRIEF_F
GO
create function ParentPackage_BRIEF_F  (
 @ParentPackageid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ParentPackage_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ParentPackage_MREF_F
GO
create function ParentPackage_MREF_F  (
 @ParentPackage_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'the_Session_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function the_Session_BRIEF_F
GO
create function the_Session_BRIEF_F  (
 @the_Sessionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'the_Session_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function the_Session_MREF_F
GO
create function the_Session_MREF_F  (
 @the_Session_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SysRefCache_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SysRefCache_BRIEF_F
GO
create function SysRefCache_BRIEF_F  (
 @SysRefCacheid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SysRefCache_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SysRefCache_MREF_F
GO
create function SysRefCache_MREF_F  (
 @SysRefCache_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SysLog_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SysLog_BRIEF_F
GO
create function SysLog_BRIEF_F  (
 @SysLogid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SysLog_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SysLog_MREF_F
GO
create function SysLog_MREF_F  (
 @SysLog_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XLevel_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XLevel_BRIEF_F
GO
create function XLevel_BRIEF_F  (
 @XLevelid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XLevel_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XLevel_MREF_F
GO
create function XLevel_MREF_F  (
 @XLevel_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubject_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubject_BRIEF_F
GO
create function XSubject_BRIEF_F  (
 @XSubjectid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubject_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubject_MREF_F
GO
create function XSubject_MREF_F  (
 @XSubject_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XVendor_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XVendor_BRIEF_F
GO
create function XVendor_BRIEF_F  (
 @XVendorid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XVendor_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XVendor_MREF_F
GO
create function XVendor_MREF_F  (
 @XVendor_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XStatus_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XStatus_BRIEF_F
GO
create function XStatus_BRIEF_F  (
 @XStatusid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XStatus_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XStatus_MREF_F
GO
create function XStatus_MREF_F  (
 @XStatus_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubscriptionType_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubscriptionType_BRIEF_F
GO
create function XSubscriptionType_BRIEF_F  (
 @XSubscriptionTypeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'XSubscriptionType_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function XSubscriptionType_MREF_F
GO
create function XSubscriptionType_MREF_F  (
 @XSubscriptionType_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Users_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Users_BRIEF_F
GO
create function Users_BRIEF_F  (
 @Usersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Users_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Users_MREF_F
GO
create function Users_MREF_F  (
 @Users_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Groups_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Groups_BRIEF_F
GO
create function Groups_BRIEF_F  (
 @Groupsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Groups_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Groups_MREF_F
GO
create function Groups_MREF_F  (
 @Groups_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GroupUser_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GroupUser_BRIEF_F
GO
create function GroupUser_BRIEF_F  (
 @GroupUserid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GroupUser_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GroupUser_MREF_F
GO
create function GroupUser_MREF_F  (
 @GroupUser_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestGroup_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestGroup_BRIEF_F
GO
create function TestGroup_BRIEF_F  (
 @TestGroupid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestGroup_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestGroup_MREF_F
GO
create function TestGroup_MREF_F  (
 @TestGroup_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestBlockType_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestBlockType_BRIEF_F
GO
create function TestBlockType_BRIEF_F  (
 @TestBlockTypeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestBlockType_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestBlockType_MREF_F
GO
create function TestBlockType_MREF_F  (
 @TestBlockType_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'testLevelName_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function testLevelName_BRIEF_F
GO
create function testLevelName_BRIEF_F  (
 @testLevelNameid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'testLevelName_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function testLevelName_MREF_F
GO
create function testLevelName_MREF_F  (
 @testLevelName_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestFileType_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestFileType_BRIEF_F
GO
create function TestFileType_BRIEF_F  (
 @TestFileTypeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestFileType_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestFileType_MREF_F
GO
create function TestFileType_MREF_F  (
 @TestFileType_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'testPlayer_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function testPlayer_BRIEF_F
GO
create function testPlayer_BRIEF_F  (
 @testPlayerid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'testPlayer_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function testPlayer_MREF_F
GO
create function testPlayer_MREF_F  (
 @testPlayer_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestQuestionType_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestQuestionType_BRIEF_F
GO
create function TestQuestionType_BRIEF_F  (
 @TestQuestionTypeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestQuestionType_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestQuestionType_MREF_F
GO
create function TestQuestionType_MREF_F  (
 @TestQuestionType_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestDescription_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestDescription_BRIEF_F
GO
create function TestDescription_BRIEF_F  (
 @TestDescriptionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestDescription_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestDescription_MREF_F
GO
create function TestDescription_MREF_F  (
 @TestDescription_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestModuleDefinition_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestModuleDefinition_BRIEF_F
GO
create function TestModuleDefinition_BRIEF_F  (
 @TestModuleDefinitionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestModuleDefinition_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestModuleDefinition_MREF_F
GO
create function TestModuleDefinition_MREF_F  (
 @TestModuleDefinition_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestModuleContent_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestModuleContent_BRIEF_F
GO
create function TestModuleContent_BRIEF_F  (
 @TestModuleContentid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TestModuleContent_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TestModuleContent_MREF_F
GO
create function TestModuleContent_MREF_F  (
 @TestModuleContent_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'CheckFormInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function CheckFormInfo_BRIEF_F
GO
create function CheckFormInfo_BRIEF_F  (
 @CheckFormInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'CheckFormInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function CheckFormInfo_MREF_F
GO
create function CheckFormInfo_MREF_F  (
 @CheckFormInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'CheckFormField_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function CheckFormField_BRIEF_F
GO
create function CheckFormField_BRIEF_F  (
 @CheckFormFieldid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'CheckFormField_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function CheckFormField_MREF_F
GO
create function CheckFormField_MREF_F  (
 @CheckFormField_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examFiles_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examFiles_BRIEF_F
GO
create function examFiles_BRIEF_F  (
 @examFilesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examFiles_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examFiles_MREF_F
GO
create function examFiles_MREF_F  (
 @examFiles_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examPersons_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examPersons_BRIEF_F
GO
create function examPersons_BRIEF_F  (
 @examPersonsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examPersons_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examPersons_MREF_F
GO
create function examPersons_MREF_F  (
 @examPersons_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examTestScore_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examTestScore_BRIEF_F
GO
create function examTestScore_BRIEF_F  (
 @examTestScoreid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examTestScore_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examTestScore_MREF_F
GO
create function examTestScore_MREF_F  (
 @examTestScore_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examSubtest_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examSubtest_BRIEF_F
GO
create function examSubtest_BRIEF_F  (
 @examSubtestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examSubtest_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examSubtest_MREF_F
GO
create function examSubtest_MREF_F  (
 @examSubtest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examAnswerFile_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examAnswerFile_BRIEF_F
GO
create function examAnswerFile_BRIEF_F  (
 @examAnswerFileid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examAnswerFile_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examAnswerFile_MREF_F
GO
create function examAnswerFile_MREF_F  (
 @examAnswerFile_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examInfo_BRIEF_F
GO
create function examInfo_BRIEF_F  (
 @examInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examInfo_MREF_F
GO
create function examInfo_MREF_F  (
 @examInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examTest_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examTest_BRIEF_F
GO
create function examTest_BRIEF_F  (
 @examTestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'examTest_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function examTest_MREF_F
GO
create function examTest_MREF_F  (
 @examTest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Functions" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 

alter function TestQuestionDescr_BRIEF_F  (
 @TestQuestionDescrid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestQuestionDescrid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestQuestionDescr where TestQuestionDescrID=@TestQuestionDescrID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  questType
  from TestQuestionDescr  where  TestQuestionDescrID = @TestQuestionDescrID 
 select @tmpBrief= dbo.TestQuestionType_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestQuestionDescr_MREF_F  (
 @TestQuestionDescr_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestQuestionDescr_BRIEF_F(TestQuestionDescrID, @Lang)  from TestQuestionDescr
where @TestQuestionDescr_ref like '%'+convert(varchar(38),TestQuestionDescrID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestQuestionAnswers_BRIEF_F  (
 @TestQuestionAnswersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestQuestionAnswersid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestQuestionAnswers where TestQuestionAnswersID=@TestQuestionAnswersID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), theCode),'')) + '; '
  from TestQuestionAnswers  where  TestQuestionAnswersID = @TestQuestionAnswersID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from TestQuestionAnswers  where  TestQuestionAnswersID = @TestQuestionAnswersID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), sequence),'')) + '; '
  from TestQuestionAnswers  where  TestQuestionAnswersID = @TestQuestionAnswersID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestQuestionAnswers_MREF_F  (
 @TestQuestionAnswers_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestQuestionAnswers_BRIEF_F(TestQuestionAnswersID, @Lang)  from TestQuestionAnswers
where @TestQuestionAnswers_ref like '%'+convert(varchar(38),TestQuestionAnswersID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestModuleGroup_BRIEF_F  (
 @TestModuleGroupid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestModuleGroupid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestModuleGroup where TestModuleGroupID=@TestModuleGroupID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from TestModuleGroup  where  TestModuleGroupID = @TestModuleGroupID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestModuleGroup_MREF_F  (
 @TestModuleGroup_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestModuleGroup_BRIEF_F(TestModuleGroupID, @Lang)  from TestModuleGroup
where @TestModuleGroup_ref like '%'+convert(varchar(38),TestModuleGroupID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestBlockUsage_BRIEF_F  (
 @TestBlockUsageid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestBlockUsageid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestBlockUsage where TestBlockUsageID=@TestBlockUsageID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  BlockType
  from TestBlockUsage  where  TestBlockUsageID = @TestBlockUsageID 
 select @tmpBrief= dbo.TestBlockType_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestBlockUsage_MREF_F  (
 @TestBlockUsage_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestBlockUsage_BRIEF_F(TestBlockUsageID, @Lang)  from TestBlockUsage
where @TestBlockUsage_ref like '%'+convert(varchar(38),TestBlockUsageID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestGroupFiles_BRIEF_F  (
 @TestGroupFilesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestGroupFilesid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestGroupFiles where TestGroupFilesID=@TestGroupFilesID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  fileType
  from TestGroupFiles  where  TestGroupFilesID = @TestGroupFilesID 
 select @tmpBrief= dbo.TestFileType_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), originalName),'')) + '; '
  from TestGroupFiles  where  TestGroupFilesID = @TestGroupFilesID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestGroupFiles_MREF_F  (
 @TestGroupFiles_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestGroupFiles_BRIEF_F(TestGroupFilesID, @Lang)  from TestGroupFiles
where @TestGroupFiles_ref like '%'+convert(varchar(38),TestGroupFilesID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function VariantDescr_BRIEF_F  (
 @VariantDescrid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @VariantDescrid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from VariantDescr where VariantDescrID=@VariantDescrID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), variantNum),'')) + '; '
  from VariantDescr  where  VariantDescrID = @VariantDescrID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function VariantDescr_MREF_F  (
 @VariantDescr_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.VariantDescr_BRIEF_F(VariantDescrID, @Lang)  from VariantDescr
where @VariantDescr_ref like '%'+convert(varchar(38),VariantDescrID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function VariantSubtest_BRIEF_F  (
 @VariantSubtestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @VariantSubtestid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from VariantSubtest where VariantSubtestID=@VariantSubtestID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from VariantSubtest  where  VariantSubtestID = @VariantSubtestID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function VariantSubtest_MREF_F  (
 @VariantSubtest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.VariantSubtest_BRIEF_F(VariantSubtestID, @Lang)  from VariantSubtest
where @VariantSubtest_ref like '%'+convert(varchar(38),VariantSubtestID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XInstructorInfo_BRIEF_F  (
 @XInstructorInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XInstructorInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XInstructorInfo where XInstructorInfoID=@XInstructorInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Family),'')) + '; '
  from XInstructorInfo  where  XInstructorInfoID = @XInstructorInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from XInstructorInfo  where  XInstructorInfoID = @XInstructorInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), SurName),'')) + '; '
  from XInstructorInfo  where  XInstructorInfoID = @XInstructorInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XInstructorInfo_MREF_F  (
 @XInstructorInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XInstructorInfo_BRIEF_F(XInstructorInfoID, @Lang)  from XInstructorInfo
where @XInstructorInfo_ref like '%'+convert(varchar(38),XInstructorInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XInstructorStatus_BRIEF_F  (
 @XInstructorStatusid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XInstructorStatusid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XInstructorStatus where XInstructorStatusID=@XInstructorStatusID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theStatus
  from XInstructorStatus  where  XInstructorStatusID = @XInstructorStatusID 
 select @tmpBrief= dbo.XStatus_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XInstructorStatus_MREF_F  (
 @XInstructorStatus_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XInstructorStatus_BRIEF_F(XInstructorStatusID, @Lang)  from XInstructorStatus
where @XInstructorStatus_ref like '%'+convert(varchar(38),XInstructorStatusID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XCourseDesc_BRIEF_F  (
 @XCourseDescid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XCourseDescid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XCourseDesc where XCourseDescID=@XCourseDescID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XCourseDesc  where  XCourseDescID = @XCourseDescID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), CourseDescription),'')) + '; '
  from XCourseDesc  where  XCourseDescID = @XCourseDescID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XCourseDesc_MREF_F  (
 @XCourseDesc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XCourseDesc_BRIEF_F(XCourseDescID, @Lang)  from XCourseDesc
where @XCourseDesc_ref like '%'+convert(varchar(38),XCourseDescID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XCourseModule_BRIEF_F  (
 @XCourseModuleid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XCourseModuleid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XCourseModule where XCourseModuleID=@XCourseModuleID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XCourseModule  where  XCourseModuleID = @XCourseModuleID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XCourseModule_MREF_F  (
 @XCourseModule_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XCourseModule_BRIEF_F(XCourseModuleID, @Lang)  from XCourseModule
where @XCourseModule_ref like '%'+convert(varchar(38),XCourseModuleID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XChepter_BRIEF_F  (
 @XChepterid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XChepterid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XChepter where XChepterID=@XChepterID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XChepter  where  XChepterID = @XChepterID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XChepter_MREF_F  (
 @XChepter_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XChepter_BRIEF_F(XChepterID, @Lang)  from XChepter
where @XChepter_ref like '%'+convert(varchar(38),XChepterID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Num_zones_BRIEF_F  (
 @Num_zonesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Num_zonesid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Num_zones where Num_zonesID=@Num_zonesID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ZoneMask),'')) + '; '
  from Num_zones  where  Num_zonesID = @Num_zonesID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Num_zones_MREF_F  (
 @Num_zones_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Num_zones_BRIEF_F(Num_zonesID, @Lang)  from Num_zones
where @Num_zones_ref like '%'+convert(varchar(38),Num_zonesID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Num_Values_BRIEF_F  (
 @Num_Valuesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Num_Valuesid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Num_Values where Num_ValuesID=@Num_ValuesID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), the_Value),'')) + '; '
  from Num_Values  where  Num_ValuesID = @Num_ValuesID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Num_Values_MREF_F  (
 @Num_Values_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Num_Values_BRIEF_F(Num_ValuesID, @Lang)  from Num_Values
where @Num_Values_ref like '%'+convert(varchar(38),Num_ValuesID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Num_head_BRIEF_F  (
 @Num_headid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Num_headid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Num_head where Num_headID=@Num_headID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Num_head  where  Num_headID = @Num_headID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Num_head_MREF_F  (
 @Num_head_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Num_head_BRIEF_F(Num_headID, @Lang)  from Num_head
where @Num_head_ref like '%'+convert(varchar(38),Num_headID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ARMJournal_BRIEF_F  (
 @ARMJournalid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ARMJournalid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ARMJournal where ARMJournalID=@ARMJournalID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheJournal
  from ARMJournal  where  ARMJournalID = @ARMJournalID 
 select @tmpBrief= ' не поддерживается '
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ARMJournal_MREF_F  (
 @ARMJournal_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ARMJournal_BRIEF_F(ARMJournalID, @Lang)  from ARMJournal
where @ARMJournal_ref like '%'+convert(varchar(38),ARMJournalID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ARMJRNLREP_BRIEF_F  (
 @ARMJRNLREPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ARMJRNLREPid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ARMJRNLREP where ARMJRNLREPID=@ARMJRNLREPID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), repname),'')) + '; '
  from ARMJRNLREP  where  ARMJRNLREPID = @ARMJRNLREPID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ARMJRNLREP_MREF_F  (
 @ARMJRNLREP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ARMJRNLREP_BRIEF_F(ARMJRNLREPID, @Lang)  from ARMJRNLREP
where @ARMJRNLREP_ref like '%'+convert(varchar(38),ARMJRNLREPID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ARMJRNLRUN_BRIEF_F  (
 @ARMJRNLRUNid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ARMJRNLRUNid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ARMJRNLRUN where ARMJRNLRUNID=@ARMJRNLRUNID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from ARMJRNLRUN  where  ARMJRNLRUNID = @ARMJRNLRUNID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ARMJRNLRUN_MREF_F  (
 @ARMJRNLRUN_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ARMJRNLRUN_BRIEF_F(ARMJRNLRUNID, @Lang)  from ARMJRNLRUN
where @ARMJRNLRUN_ref like '%'+convert(varchar(38),ARMJRNLRUNID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ARMJRNLADD_BRIEF_F  (
 @ARMJRNLADDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ARMJRNLADDid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ARMJRNLADD where ARMJRNLADDID=@ARMJRNLADDID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from ARMJRNLADD  where  ARMJRNLADDID = @ARMJRNLADDID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ARMJRNLADD_MREF_F  (
 @ARMJRNLADD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ARMJRNLADD_BRIEF_F(ARMJRNLADDID, @Lang)  from ARMJRNLADD
where @ARMJRNLADD_ref like '%'+convert(varchar(38),ARMJRNLADDID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function EntryPoints_BRIEF_F  (
 @EntryPointsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @EntryPointsid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from EntryPoints where EntryPointsID=@EntryPointsID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from EntryPoints  where  EntryPointsID = @EntryPointsID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from EntryPoints  where  EntryPointsID = @EntryPointsID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function EntryPoints_MREF_F  (
 @EntryPoints_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.EntryPoints_BRIEF_F(EntryPointsID, @Lang)  from EntryPoints
where @EntryPoints_ref like '%'+convert(varchar(38),EntryPointsID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function EPFilterLink_BRIEF_F  (
 @EPFilterLinkid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @EPFilterLinkid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from EPFilterLink where EPFilterLinkID=@EPFilterLinkID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), RowSource),'')) + '; '
  from EPFilterLink  where  EPFilterLinkID = @EPFilterLinkID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function EPFilterLink_MREF_F  (
 @EPFilterLink_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.EPFilterLink_BRIEF_F(EPFilterLinkID, @Lang)  from EPFilterLink
where @EPFilterLink_ref like '%'+convert(varchar(38),EPFilterLinkID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function WorkPlace_BRIEF_F  (
 @WorkPlaceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @WorkPlaceid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from WorkPlace where WorkPlaceID=@WorkPlaceID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from WorkPlace  where  WorkPlaceID = @WorkPlaceID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function WorkPlace_MREF_F  (
 @WorkPlace_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.WorkPlace_BRIEF_F(WorkPlaceID, @Lang)  from WorkPlace
where @WorkPlace_ref like '%'+convert(varchar(38),WorkPlaceID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ARMTypes_BRIEF_F  (
 @ARMTypesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ARMTypesid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ARMTypes where ARMTypesID=@ARMTypesID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheDocumentType
  from ARMTypes  where  ARMTypesID = @ARMTypesID 
 select @tmpBrief= dbo.OBJECTTYPE_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ARMTypes_MREF_F  (
 @ARMTypes_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ARMTypes_BRIEF_F(ARMTypesID, @Lang)  from ARMTypes
where @ARMTypes_ref like '%'+convert(varchar(38),ARMTypesID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function JournalColumn_BRIEF_F  (
 @JournalColumnid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @JournalColumnid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from JournalColumn where JournalColumnID=@JournalColumnID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from JournalColumn  where  JournalColumnID = @JournalColumnID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function JournalColumn_MREF_F  (
 @JournalColumn_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.JournalColumn_BRIEF_F(JournalColumnID, @Lang)  from JournalColumn
where @JournalColumn_ref like '%'+convert(varchar(38),JournalColumnID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function JColumnSource_BRIEF_F  (
 @JColumnSourceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @JColumnSourceid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from JColumnSource where JColumnSourceID=@JColumnSourceID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ViewField),'')) + '; '
  from JColumnSource  where  JColumnSourceID = @JColumnSourceID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function JColumnSource_MREF_F  (
 @JColumnSource_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.JColumnSource_BRIEF_F(JColumnSourceID, @Lang)  from JColumnSource
where @JColumnSource_ref like '%'+convert(varchar(38),JColumnSourceID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function JournalSrc_BRIEF_F  (
 @JournalSrcid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @JournalSrcid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from JournalSrc where JournalSrcID=@JournalSrcID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), PartView),'')) + '; '
  from JournalSrc  where  JournalSrcID = @JournalSrcID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function JournalSrc_MREF_F  (
 @JournalSrc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.JournalSrc_BRIEF_F(JournalSrcID, @Lang)  from JournalSrc
where @JournalSrc_ref like '%'+convert(varchar(38),JournalSrcID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Journal_BRIEF_F  (
 @Journalid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Journalid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Journal where JournalID=@JournalID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Journal  where  JournalID = @JournalID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Journal_MREF_F  (
 @Journal_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Journal_BRIEF_F(JournalID, @Lang)  from Journal
where @Journal_ref like '%'+convert(varchar(38),JournalID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function RPTStruct_BRIEF_F  (
 @RPTStructid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @RPTStructid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from RPTStruct where RPTStructID=@RPTStructID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from RPTStruct  where  RPTStructID = @RPTStructID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function RPTStruct_MREF_F  (
 @RPTStruct_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.RPTStruct_BRIEF_F(RPTStructID, @Lang)  from RPTStruct
where @RPTStruct_ref like '%'+convert(varchar(38),RPTStructID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function RPTFields_BRIEF_F  (
 @RPTFieldsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @RPTFieldsid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from RPTFields where RPTFieldsID=@RPTFieldsID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from RPTFields  where  RPTFieldsID = @RPTFieldsID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function RPTFields_MREF_F  (
 @RPTFields_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.RPTFields_BRIEF_F(RPTFieldsID, @Lang)  from RPTFields
where @RPTFields_ref like '%'+convert(varchar(38),RPTFieldsID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function RPTFormula_BRIEF_F  (
 @RPTFormulaid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @RPTFormulaid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from RPTFormula where RPTFormulaID=@RPTFormulaID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from RPTFormula  where  RPTFormulaID = @RPTFormulaID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function RPTFormula_MREF_F  (
 @RPTFormula_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.RPTFormula_BRIEF_F(RPTFormulaID, @Lang)  from RPTFormula
where @RPTFormula_ref like '%'+convert(varchar(38),RPTFormulaID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Reports_BRIEF_F  (
 @Reportsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Reportsid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Reports where ReportsID=@ReportsID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Reports  where  ReportsID = @ReportsID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Reports_MREF_F  (
 @Reports_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Reports_BRIEF_F(ReportsID, @Lang)  from Reports
where @Reports_ref like '%'+convert(varchar(38),ReportsID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FilterFieldGroup_BRIEF_F  (
 @FilterFieldGroupid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FilterFieldGroupid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FilterFieldGroup where FilterFieldGroupID=@FilterFieldGroupID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from FilterFieldGroup  where  FilterFieldGroupID = @FilterFieldGroupID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from FilterFieldGroup  where  FilterFieldGroupID = @FilterFieldGroupID 
  select @BRIEF= @BRIEF +
  case AllowIgnore 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from FilterFieldGroup where FilterFieldGroupID=@FilterFieldGroupID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FilterFieldGroup_MREF_F  (
 @FilterFieldGroup_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FilterFieldGroup_BRIEF_F(FilterFieldGroupID, @Lang)  from FilterFieldGroup
where @FilterFieldGroup_ref like '%'+convert(varchar(38),FilterFieldGroupID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FileterField_BRIEF_F  (
 @FileterFieldid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FileterFieldid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FileterField where FileterFieldID=@FileterFieldID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from FileterField  where  FileterFieldID = @FileterFieldID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from FileterField  where  FileterFieldID = @FileterFieldID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FileterField_MREF_F  (
 @FileterField_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FileterField_BRIEF_F(FileterFieldID, @Lang)  from FileterField
where @FileterField_ref like '%'+convert(varchar(38),FileterFieldID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Filters_BRIEF_F  (
 @Filtersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Filtersid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Filters where FiltersID=@FiltersID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Filters  where  FiltersID = @FiltersID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Filters_MREF_F  (
 @Filters_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Filters_BRIEF_F(FiltersID, @Lang)  from Filters
where @Filters_ref like '%'+convert(varchar(38),FiltersID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function OrganizationInfo_BRIEF_F  (
 @OrganizationInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @OrganizationInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from OrganizationInfo where OrganizationInfoID=@OrganizationInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from OrganizationInfo  where  OrganizationInfoID = @OrganizationInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function OrganizationInfo_MREF_F  (
 @OrganizationInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.OrganizationInfo_BRIEF_F(OrganizationInfoID, @Lang)  from OrganizationInfo
where @OrganizationInfo_ref like '%'+convert(varchar(38),OrganizationInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function examRequest_BRIEF_F  (
 @examRequestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @examRequestid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from examRequest where examRequestID=@examRequestID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), requestDate),'')) + '; '
  from examRequest  where  examRequestID = @examRequestID 
select @tmpID =  theExam
  from examRequest  where  examRequestID = @examRequestID 
 select @tmpBrief= dbo.examInfo_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function examRequest_MREF_F  (
 @examRequest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.examRequest_BRIEF_F(examRequestID, @Lang)  from examRequest
where @examRequest_ref like '%'+convert(varchar(38),examRequestID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestPersonInfo_BRIEF_F  (
 @TestPersonInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestPersonInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestPersonInfo where TestPersonInfoID=@TestPersonInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), lastName),'')) + '; '
  from TestPersonInfo  where  TestPersonInfoID = @TestPersonInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), firstName),'')) + '; '
  from TestPersonInfo  where  TestPersonInfoID = @TestPersonInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), middleName),'')) + '; '
  from TestPersonInfo  where  TestPersonInfoID = @TestPersonInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestPersonInfo_MREF_F  (
 @TestPersonInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestPersonInfo_BRIEF_F(TestPersonInfoID, @Lang)  from TestPersonInfo
where @TestPersonInfo_ref like '%'+convert(varchar(38),TestPersonInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function testRequest_BRIEF_F  (
 @testRequestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @testRequestid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from testRequest where testRequestID=@testRequestID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), requestDate),'')) + '; '
  from testRequest  where  testRequestID = @testRequestID 
select @tmpID =  theTest
  from testRequest  where  testRequestID = @testRequestID 
 select @tmpBrief= dbo.TestDescription_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function testRequest_MREF_F  (
 @testRequest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.testRequest_BRIEF_F(testRequestID, @Lang)  from testRequest
where @testRequest_ref like '%'+convert(varchar(38),testRequestID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function onlineSubTest_BRIEF_F  (
 @onlineSubTestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @onlineSubTestid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from onlineSubTest where onlineSubTestID=@onlineSubTestID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from onlineSubTest  where  onlineSubTestID = @onlineSubTestID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function onlineSubTest_MREF_F  (
 @onlineSubTest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.onlineSubTest_BRIEF_F(onlineSubTestID, @Lang)  from onlineSubTest
where @onlineSubTest_ref like '%'+convert(varchar(38),onlineSubTestID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserInfo_BRIEF_F  (
 @XUserInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserInfo where XUserInfoID=@XUserInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Family),'')) + '; '
  from XUserInfo  where  XUserInfoID = @XUserInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), SurName),'')) + '; '
  from XUserInfo  where  XUserInfoID = @XUserInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from XUserInfo  where  XUserInfoID = @XUserInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserInfo_MREF_F  (
 @XUserInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserInfo_BRIEF_F(XUserInfoID, @Lang)  from XUserInfo
where @XUserInfo_ref like '%'+convert(varchar(38),XUserInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XSubscription_BRIEF_F  (
 @XSubscriptionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XSubscriptionid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XSubscription where XSubscriptionID=@XSubscriptionID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  SubscriptionType
  from XSubscription  where  XSubscriptionID = @XSubscriptionID 
 select @tmpBrief= dbo.XSubscriptionType_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XSubscription_MREF_F  (
 @XSubscription_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XSubscription_BRIEF_F(XSubscriptionID, @Lang)  from XSubscription
where @XSubscription_ref like '%'+convert(varchar(38),XSubscriptionID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserPurchase_BRIEF_F  (
 @XUserPurchaseid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserPurchaseid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserPurchase where XUserPurchaseID=@XUserPurchaseID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCourse
  from XUserPurchase  where  XUserPurchaseID = @XUserPurchaseID 
 select @tmpBrief= dbo.XCourseDesc_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserPurchase_MREF_F  (
 @XUserPurchase_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserPurchase_BRIEF_F(XUserPurchaseID, @Lang)  from XUserPurchase
where @XUserPurchase_ref like '%'+convert(varchar(38),XUserPurchaseID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserProfile_BRIEF_F  (
 @XUserProfileid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserProfileid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserProfile where XUserProfileID=@XUserProfileID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCourse
  from XUserProfile  where  XUserProfileID = @XUserProfileID 
 select @tmpBrief= dbo.XCourseDesc_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserProfile_MREF_F  (
 @XUserProfile_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserProfile_BRIEF_F(XUserProfileID, @Lang)  from XUserProfile
where @XUserProfile_ref like '%'+convert(varchar(38),XUserProfileID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserRegistartion_BRIEF_F  (
 @XUserRegistartionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserRegistartionid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserRegistartion where XUserRegistartionID=@XUserRegistartionID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCourseSchedule
  from XUserRegistartion  where  XUserRegistartionID = @XUserRegistartionID 
 select @tmpBrief= dbo.XScheduleItem_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserRegistartion_MREF_F  (
 @XUserRegistartion_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserRegistartion_BRIEF_F(XUserRegistartionID, @Lang)  from XUserRegistartion
where @XUserRegistartion_ref like '%'+convert(varchar(38),XUserRegistartionID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XUserCart_BRIEF_F  (
 @XUserCartid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XUserCartid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XUserCart where XUserCartID=@XUserCartID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCourse
  from XUserCart  where  XUserCartID = @XUserCartID 
 select @tmpBrief= dbo.XCourseDesc_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
select @tmpID =  SubscriptionType
  from XUserCart  where  XUserCartID = @XUserCartID 
 select @tmpBrief= dbo.XSubscriptionType_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XUserCart_MREF_F  (
 @XUserCart_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XUserCart_BRIEF_F(XUserCartID, @Lang)  from XUserCart
where @XUserCart_ref like '%'+convert(varchar(38),XUserCartID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XScheduleItem_BRIEF_F  (
 @XScheduleItemid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XScheduleItemid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XScheduleItem where XScheduleItemID=@XScheduleItemID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCourse
  from XScheduleItem  where  XScheduleItemID = @XScheduleItemID 
 select @tmpBrief= dbo.XCourseDesc_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
select @tmpID =  theInstructor
  from XScheduleItem  where  XScheduleItemID = @XScheduleItemID 
 select @tmpBrief= dbo.XInstructorInfo_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XScheduleItem_MREF_F  (
 @XScheduleItem_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XScheduleItem_BRIEF_F(XScheduleItemID, @Lang)  from XScheduleItem
where @XScheduleItem_ref like '%'+convert(varchar(38),XScheduleItemID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function MTZExt_def_BRIEF_F  (
 @MTZExt_defid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @MTZExt_defid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from MTZExt_def where MTZExt_defID=@MTZExt_defID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from MTZExt_def  where  MTZExt_defID = @MTZExt_defID 
  select @BRIEF= @BRIEF +
  case ExtType 
when 6 then 
 'VerifyRowExt; '
when 7 then 
 'CodeGenerator; '
when 5 then 
 'DefaultExt; '
when 0 then 
 'StatusExt; '
when 4 then 
 'JrnlRunExt; '
when 2 then 
 'CustomExt; '
when 8 then 
 'ARMGenerator; '
when 1 then 
 'OnFormExt; '
when 3 then 
 'JrnlAddExt; '
  end  from MTZExt_def where MTZExt_defID=@MTZExt_defID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function MTZExt_def_MREF_F  (
 @MTZExt_def_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.MTZExt_def_BRIEF_F(MTZExt_defID, @Lang)  from MTZExt_def
where @MTZExt_def_ref like '%'+convert(varchar(38),MTZExt_defID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function MTZExtRel_BRIEF_F  (
 @MTZExtRelid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @MTZExtRelid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from MTZExtRel where MTZExtRelID=@MTZExtRelID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF +
  case ThePlatform 
when 3 then 
 'OTHER; '
when 1 then 
 'DOTNET; '
when 2 then 
 'JAVA; '
when 0 then 
 'VB6; '
  end  from MTZExtRel where MTZExtRelID=@MTZExtRelID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function MTZExtRel_MREF_F  (
 @MTZExtRel_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.MTZExtRel_BRIEF_F(MTZExtRelID, @Lang)  from MTZExtRel
where @MTZExtRel_ref like '%'+convert(varchar(38),MTZExtRelID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function certModules_BRIEF_F  (
 @certModulesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @certModulesid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from certModules where certModulesID=@certModulesID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theTest
  from certModules  where  certModulesID = @certModulesID 
 select @tmpBrief= dbo.TestDescription_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function certModules_MREF_F  (
 @certModules_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.certModules_BRIEF_F(certModulesID, @Lang)  from certModules
where @certModules_ref like '%'+convert(varchar(38),certModulesID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function certInfo_BRIEF_F  (
 @certInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @certInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from certInfo where certInfoID=@certInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from certInfo  where  certInfoID = @certInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Info),'')) + '; '
  from certInfo  where  certInfoID = @certInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function certInfo_MREF_F  (
 @certInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.certInfo_BRIEF_F(certInfoID, @Lang)  from certInfo
where @certInfo_ref like '%'+convert(varchar(38),certInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GENPACKAGE_BRIEF_F  (
 @GENPACKAGEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GENPACKAGEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GENPACKAGE where GENPACKAGEID=@GENPACKAGEID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from GENPACKAGE  where  GENPACKAGEID = @GENPACKAGEID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GENPACKAGE_MREF_F  (
 @GENPACKAGE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GENPACKAGE_BRIEF_F(GENPACKAGEID, @Lang)  from GENPACKAGE
where @GENPACKAGE_ref like '%'+convert(varchar(38),GENPACKAGEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GENERATOR_TARGET_BRIEF_F  (
 @GENERATOR_TARGETid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GENERATOR_TARGETid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GENERATOR_TARGET where GENERATOR_TARGETID=@GENERATOR_TARGETID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from GENERATOR_TARGET  where  GENERATOR_TARGETID = @GENERATOR_TARGETID 
  select @BRIEF= @BRIEF +
  case TargetType 
when 0 then 
 'СУБД; '
when 3 then 
 'Документация; '
when 1 then 
 'МОДЕЛЬ; '
when 2 then 
 'Приложение; '
when 4 then 
 'АРМ; '
  end  from GENERATOR_TARGET where GENERATOR_TARGETID=@GENERATOR_TARGETID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GENERATOR_TARGET_MREF_F  (
 @GENERATOR_TARGET_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GENERATOR_TARGET_BRIEF_F(GENERATOR_TARGETID, @Lang)  from GENERATOR_TARGET
where @GENERATOR_TARGET_ref like '%'+convert(varchar(38),GENERATOR_TARGETID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GENREFERENCE_BRIEF_F  (
 @GENREFERENCEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GENREFERENCEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GENREFERENCE where GENREFERENCEID=@GENREFERENCEID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from GENREFERENCE  where  GENREFERENCEID = @GENREFERENCEID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GENREFERENCE_MREF_F  (
 @GENREFERENCE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GENREFERENCE_BRIEF_F(GENREFERENCEID, @Lang)  from GENREFERENCE
where @GENREFERENCE_ref like '%'+convert(varchar(38),GENREFERENCEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GENMANUALCODE_BRIEF_F  (
 @GENMANUALCODEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GENMANUALCODEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GENMANUALCODE where GENMANUALCODEID=@GENMANUALCODEID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from GENMANUALCODE  where  GENMANUALCODEID = @GENMANUALCODEID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GENMANUALCODE_MREF_F  (
 @GENMANUALCODE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GENMANUALCODE_BRIEF_F(GENMANUALCODEID, @Lang)  from GENMANUALCODE
where @GENMANUALCODE_ref like '%'+convert(varchar(38),GENMANUALCODEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GENCONTROLS_BRIEF_F  (
 @GENCONTROLSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GENCONTROLSid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GENCONTROLS where GENCONTROLSID=@GENCONTROLSID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ControlProgID),'')) + '; '
  from GENCONTROLS  where  GENCONTROLSID = @GENCONTROLSID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GENCONTROLS_MREF_F  (
 @GENCONTROLS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GENCONTROLS_BRIEF_F(GENCONTROLSID, @Lang)  from GENCONTROLS
where @GENCONTROLS_ref like '%'+convert(varchar(38),GENCONTROLSID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function LocalizeInfo_BRIEF_F  (
 @LocalizeInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @LocalizeInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from LocalizeInfo where LocalizeInfoID=@LocalizeInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), LangFull),'')) + '; '
  from LocalizeInfo  where  LocalizeInfoID = @LocalizeInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), LangShort),'')) + '; '
  from LocalizeInfo  where  LocalizeInfoID = @LocalizeInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function LocalizeInfo_MREF_F  (
 @LocalizeInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.LocalizeInfo_BRIEF_F(LocalizeInfoID, @Lang)  from LocalizeInfo
where @LocalizeInfo_ref like '%'+convert(varchar(38),LocalizeInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDTYPE_BRIEF_F  (
 @FIELDTYPEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDTYPEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDTYPE where FIELDTYPEID=@FIELDTYPEID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from FIELDTYPE  where  FIELDTYPEID = @FIELDTYPEID 
  select @BRIEF= @BRIEF +
  case TypeStyle 
when 4 then 
 'Ссылка; '
when 1 then 
 'Выражение; '
when 5 then 
 'Элемент оформления; '
when 3 then 
 'Интервал; '
when 2 then 
 'Перечисление; '
when 0 then 
 'Скалярный тип; '
  end  from FIELDTYPE where FIELDTYPEID=@FIELDTYPEID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDTYPE_MREF_F  (
 @FIELDTYPE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDTYPE_BRIEF_F(FIELDTYPEID, @Lang)  from FIELDTYPE
where @FIELDTYPE_ref like '%'+convert(varchar(38),FIELDTYPEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ENUMITEM_BRIEF_F  (
 @ENUMITEMid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ENUMITEMid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ENUMITEM where ENUMITEMID=@ENUMITEMID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from ENUMITEM  where  ENUMITEMID = @ENUMITEMID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), NameValue),'')) + '; '
  from ENUMITEM  where  ENUMITEMID = @ENUMITEMID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ENUMITEM_MREF_F  (
 @ENUMITEM_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ENUMITEM_BRIEF_F(ENUMITEMID, @Lang)  from ENUMITEM
where @ENUMITEM_ref like '%'+convert(varchar(38),ENUMITEMID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDTYPEMAP_BRIEF_F  (
 @FIELDTYPEMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDTYPEMAPid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDTYPEMAP where FIELDTYPEMAPID=@FIELDTYPEMAPID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from FIELDTYPEMAP  where  FIELDTYPEMAPID = @FIELDTYPEMAPID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), StoageType),'')) + '; '
  from FIELDTYPEMAP  where  FIELDTYPEMAPID = @FIELDTYPEMAPID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDTYPEMAP_MREF_F  (
 @FIELDTYPEMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDTYPEMAP_BRIEF_F(FIELDTYPEMAPID, @Lang)  from FIELDTYPEMAP
where @FIELDTYPEMAP_ref like '%'+convert(varchar(38),FIELDTYPEMAPID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function SHAREDMETHOD_BRIEF_F  (
 @SHAREDMETHODid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @SHAREDMETHODid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from SHAREDMETHOD where SHAREDMETHODID=@SHAREDMETHODID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from SHAREDMETHOD  where  SHAREDMETHODID = @SHAREDMETHODID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function SHAREDMETHOD_MREF_F  (
 @SHAREDMETHOD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.SHAREDMETHOD_BRIEF_F(SHAREDMETHODID, @Lang)  from SHAREDMETHOD
where @SHAREDMETHOD_ref like '%'+convert(varchar(38),SHAREDMETHODID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function SCRIPT_BRIEF_F  (
 @SCRIPTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @SCRIPTid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from SCRIPT where SCRIPTID=@SCRIPTID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from SCRIPT  where  SCRIPTID = @SCRIPTID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function SCRIPT_MREF_F  (
 @SCRIPT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.SCRIPT_BRIEF_F(SCRIPTID, @Lang)  from SCRIPT
where @SCRIPT_ref like '%'+convert(varchar(38),SCRIPTID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PARAMETERS_BRIEF_F  (
 @PARAMETERSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARAMETERSid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PARAMETERS where PARAMETERSID=@PARAMETERSID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from PARAMETERS  where  PARAMETERSID = @PARAMETERSID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from PARAMETERS  where  PARAMETERSID = @PARAMETERSID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PARAMETERS_MREF_F  (
 @PARAMETERS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PARAMETERS_BRIEF_F(PARAMETERSID, @Lang)  from PARAMETERS
where @PARAMETERS_ref like '%'+convert(varchar(38),PARAMETERSID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function OBJECTTYPE_BRIEF_F  (
 @OBJECTTYPEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @OBJECTTYPEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from OBJECTTYPE where OBJECTTYPEID=@OBJECTTYPEID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Package
  from OBJECTTYPE  where  OBJECTTYPEID = @OBJECTTYPEID 
 select @tmpBrief= dbo.MTZAPP_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), the_Comment),'')) + '; '
  from OBJECTTYPE  where  OBJECTTYPEID = @OBJECTTYPEID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function OBJECTTYPE_MREF_F  (
 @OBJECTTYPE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.OBJECTTYPE_BRIEF_F(OBJECTTYPEID, @Lang)  from OBJECTTYPE
where @OBJECTTYPE_ref like '%'+convert(varchar(38),OBJECTTYPEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function OBJSTATUS_BRIEF_F  (
 @OBJSTATUSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @OBJSTATUSid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from OBJSTATUS where OBJSTATUSID=@OBJSTATUSID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from OBJSTATUS  where  OBJSTATUSID = @OBJSTATUSID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function OBJSTATUS_MREF_F  (
 @OBJSTATUS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.OBJSTATUS_BRIEF_F(OBJSTATUSID, @Lang)  from OBJSTATUS
where @OBJSTATUS_ref like '%'+convert(varchar(38),OBJSTATUSID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function NEXTSTATE_BRIEF_F  (
 @NEXTSTATEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @NEXTSTATEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from NEXTSTATE where NEXTSTATEID=@NEXTSTATEID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheState
  from NEXTSTATE  where  NEXTSTATEID = @NEXTSTATEID 
 select @tmpBrief= dbo.OBJSTATUS_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function NEXTSTATE_MREF_F  (
 @NEXTSTATE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.NEXTSTATE_BRIEF_F(NEXTSTATEID, @Lang)  from NEXTSTATE
where @NEXTSTATE_ref like '%'+convert(varchar(38),NEXTSTATEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function OBJECTMODE_BRIEF_F  (
 @OBJECTMODEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @OBJECTMODEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from OBJECTMODE where OBJECTMODEID=@OBJECTMODEID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from OBJECTMODE  where  OBJECTMODEID = @OBJECTMODEID 
  select @BRIEF= @BRIEF +
  case DefaultMode 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from OBJECTMODE where OBJECTMODEID=@OBJECTMODEID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function OBJECTMODE_MREF_F  (
 @OBJECTMODE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.OBJECTMODE_BRIEF_F(OBJECTMODEID, @Lang)  from OBJECTMODE
where @OBJECTMODE_ref like '%'+convert(varchar(38),OBJECTMODEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function STRUCTRESTRICTION_BRIEF_F  (
 @STRUCTRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @STRUCTRESTRICTIONid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from STRUCTRESTRICTION where STRUCTRESTRICTIONID=@STRUCTRESTRICTIONID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Struct
  from STRUCTRESTRICTION  where  STRUCTRESTRICTIONID = @STRUCTRESTRICTIONID 
 select @tmpBrief= dbo.PART_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF +
  case AllowRead 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from STRUCTRESTRICTION where STRUCTRESTRICTIONID=@STRUCTRESTRICTIONID
  select @BRIEF= @BRIEF +
  case AllowAdd 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from STRUCTRESTRICTION where STRUCTRESTRICTIONID=@STRUCTRESTRICTIONID
  select @BRIEF= @BRIEF +
  case AllowEdit 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from STRUCTRESTRICTION where STRUCTRESTRICTIONID=@STRUCTRESTRICTIONID
  select @BRIEF= @BRIEF +
  case AllowDelete 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from STRUCTRESTRICTION where STRUCTRESTRICTIONID=@STRUCTRESTRICTIONID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function STRUCTRESTRICTION_MREF_F  (
 @STRUCTRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.STRUCTRESTRICTION_BRIEF_F(STRUCTRESTRICTIONID, @Lang)  from STRUCTRESTRICTION
where @STRUCTRESTRICTION_ref like '%'+convert(varchar(38),STRUCTRESTRICTIONID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function METHODRESTRICTION_BRIEF_F  (
 @METHODRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @METHODRESTRICTIONid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from METHODRESTRICTION where METHODRESTRICTIONID=@METHODRESTRICTIONID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Method
  from METHODRESTRICTION  where  METHODRESTRICTIONID = @METHODRESTRICTIONID 
 select @tmpBrief= dbo.SHAREDMETHOD_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF +
  case IsRestricted 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from METHODRESTRICTION where METHODRESTRICTIONID=@METHODRESTRICTIONID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function METHODRESTRICTION_MREF_F  (
 @METHODRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.METHODRESTRICTION_BRIEF_F(METHODRESTRICTIONID, @Lang)  from METHODRESTRICTION
where @METHODRESTRICTION_ref like '%'+convert(varchar(38),METHODRESTRICTIONID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDRESTRICTION_BRIEF_F  (
 @FIELDRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDRESTRICTIONid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDRESTRICTION where FIELDRESTRICTIONID=@FIELDRESTRICTIONID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  ThePart
  from FIELDRESTRICTION  where  FIELDRESTRICTIONID = @FIELDRESTRICTIONID 
 select @tmpBrief= dbo.PART_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
select @tmpID =  TheField
  from FIELDRESTRICTION  where  FIELDRESTRICTIONID = @FIELDRESTRICTIONID 
 select @tmpBrief= dbo.FIELD_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF +
  case AllowRead 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from FIELDRESTRICTION where FIELDRESTRICTIONID=@FIELDRESTRICTIONID
  select @BRIEF= @BRIEF +
  case AllowModify 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from FIELDRESTRICTION where FIELDRESTRICTIONID=@FIELDRESTRICTIONID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDRESTRICTION_MREF_F  (
 @FIELDRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDRESTRICTION_BRIEF_F(FIELDRESTRICTIONID, @Lang)  from FIELDRESTRICTION
where @FIELDRESTRICTION_ref like '%'+convert(varchar(38),FIELDRESTRICTIONID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TYPEMENU_BRIEF_F  (
 @TYPEMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TYPEMENUid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TYPEMENU where TYPEMENUID=@TYPEMENUID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from TYPEMENU  where  TYPEMENUID = @TYPEMENUID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TYPEMENU_MREF_F  (
 @TYPEMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TYPEMENU_BRIEF_F(TYPEMENUID, @Lang)  from TYPEMENU
where @TYPEMENU_ref like '%'+convert(varchar(38),TYPEMENUID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function INSTANCEVALIDATOR_BRIEF_F  (
 @INSTANCEVALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @INSTANCEVALIDATORid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from INSTANCEVALIDATOR where INSTANCEVALIDATORID=@INSTANCEVALIDATORID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from INSTANCEVALIDATOR  where  INSTANCEVALIDATORID = @INSTANCEVALIDATORID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function INSTANCEVALIDATOR_MREF_F  (
 @INSTANCEVALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.INSTANCEVALIDATOR_BRIEF_F(INSTANCEVALIDATORID, @Lang)  from INSTANCEVALIDATOR
where @INSTANCEVALIDATOR_ref like '%'+convert(varchar(38),INSTANCEVALIDATORID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PART_BRIEF_F  (
 @PARTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARTid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PART where PARTID=@PARTID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from PART  where  PARTID = @PARTID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from PART  where  PARTID = @PARTID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PART_MREF_F  (
 @PART_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PART_BRIEF_F(PARTID, @Lang)  from PART
where @PART_ref like '%'+convert(varchar(38),PARTID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PARTMENU_BRIEF_F  (
 @PARTMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARTMENUid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PARTMENU where PARTMENUID=@PARTMENUID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from PARTMENU  where  PARTMENUID = @PARTMENUID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PARTMENU_MREF_F  (
 @PARTMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PARTMENU_BRIEF_F(PARTMENUID, @Lang)  from PARTMENU
where @PARTMENU_ref like '%'+convert(varchar(38),PARTMENUID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PARTPARAMMAP_BRIEF_F  (
 @PARTPARAMMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARTPARAMMAPid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PARTPARAMMAP where PARTPARAMMAPID=@PARTPARAMMAPID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), FieldName),'')) + '; '
  from PARTPARAMMAP  where  PARTPARAMMAPID = @PARTPARAMMAPID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ParamName),'')) + '; '
  from PARTPARAMMAP  where  PARTPARAMMAPID = @PARTPARAMMAPID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PARTPARAMMAP_MREF_F  (
 @PARTPARAMMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PARTPARAMMAP_BRIEF_F(PARTPARAMMAPID, @Lang)  from PARTPARAMMAP
where @PARTPARAMMAP_ref like '%'+convert(varchar(38),PARTPARAMMAPID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PARTVIEW_BRIEF_F  (
 @PARTVIEWid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARTVIEWid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PARTVIEW where PARTVIEWID=@PARTVIEWID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from PARTVIEW  where  PARTVIEWID = @PARTVIEWID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PARTVIEW_MREF_F  (
 @PARTVIEW_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PARTVIEW_BRIEF_F(PARTVIEWID, @Lang)  from PARTVIEW
where @PARTVIEW_ref like '%'+convert(varchar(38),PARTVIEWID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ViewColumn_BRIEF_F  (
 @ViewColumnid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ViewColumnid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ViewColumn where ViewColumnID=@ViewColumnID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from ViewColumn  where  ViewColumnID = @ViewColumnID 
select @tmpID =  FromPart
  from ViewColumn  where  ViewColumnID = @ViewColumnID 
 select @tmpBrief= dbo.PART_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF +
  case Aggregation 
when 3 then 
 'SUM; '
when 1 then 
 'AVG; '
when 6 then 
 'CUSTOM; '
when 0 then 
 'none; '
when 2 then 
 'COUNT; '
when 5 then 
 'MAX; '
when 4 then 
 'MIN; '
  end  from ViewColumn where ViewColumnID=@ViewColumnID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ViewColumn_MREF_F  (
 @ViewColumn_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ViewColumn_BRIEF_F(ViewColumnID, @Lang)  from ViewColumn
where @ViewColumn_ref like '%'+convert(varchar(38),ViewColumnID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PARTVIEW_LNK_BRIEF_F  (
 @PARTVIEW_LNKid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARTVIEW_LNKid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PARTVIEW_LNK where PARTVIEW_LNKID=@PARTVIEW_LNKID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheView
  from PARTVIEW_LNK  where  PARTVIEW_LNKID = @PARTVIEW_LNKID 
 select @tmpBrief= dbo.PARTVIEW_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PARTVIEW_LNK_MREF_F  (
 @PARTVIEW_LNK_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PARTVIEW_LNK_BRIEF_F(PARTVIEW_LNKID, @Lang)  from PARTVIEW_LNK
where @PARTVIEW_LNK_ref like '%'+convert(varchar(38),PARTVIEW_LNKID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function VALIDATOR_BRIEF_F  (
 @VALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @VALIDATORid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from VALIDATOR where VALIDATORID=@VALIDATORID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from VALIDATOR  where  VALIDATORID = @VALIDATORID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function VALIDATOR_MREF_F  (
 @VALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.VALIDATOR_BRIEF_F(VALIDATORID, @Lang)  from VALIDATOR
where @VALIDATOR_ref like '%'+convert(varchar(38),VALIDATORID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function UNIQUECONSTRAINT_BRIEF_F  (
 @UNIQUECONSTRAINTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @UNIQUECONSTRAINTid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from UNIQUECONSTRAINT where UNIQUECONSTRAINTID=@UNIQUECONSTRAINTID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from UNIQUECONSTRAINT  where  UNIQUECONSTRAINTID = @UNIQUECONSTRAINTID 
  select @BRIEF= @BRIEF +
  case PerParent 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from UNIQUECONSTRAINT where UNIQUECONSTRAINTID=@UNIQUECONSTRAINTID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function UNIQUECONSTRAINT_MREF_F  (
 @UNIQUECONSTRAINT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.UNIQUECONSTRAINT_BRIEF_F(UNIQUECONSTRAINTID, @Lang)  from UNIQUECONSTRAINT
where @UNIQUECONSTRAINT_ref like '%'+convert(varchar(38),UNIQUECONSTRAINTID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function CONSTRAINTFIELD_BRIEF_F  (
 @CONSTRAINTFIELDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @CONSTRAINTFIELDid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from CONSTRAINTFIELD where CONSTRAINTFIELDID=@CONSTRAINTFIELDID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheField
  from CONSTRAINTFIELD  where  CONSTRAINTFIELDID = @CONSTRAINTFIELDID 
 select @tmpBrief= dbo.FIELD_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function CONSTRAINTFIELD_MREF_F  (
 @CONSTRAINTFIELD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.CONSTRAINTFIELD_BRIEF_F(CONSTRAINTFIELDID, @Lang)  from CONSTRAINTFIELD
where @CONSTRAINTFIELD_ref like '%'+convert(varchar(38),CONSTRAINTFIELDID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ExtenderInterface_BRIEF_F  (
 @ExtenderInterfaceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ExtenderInterfaceid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ExtenderInterface where ExtenderInterfaceID=@ExtenderInterfaceID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), TheName),'')) + '; '
  from ExtenderInterface  where  ExtenderInterfaceID = @ExtenderInterfaceID 
select @tmpID =  TargetPlatform
  from ExtenderInterface  where  ExtenderInterfaceID = @ExtenderInterfaceID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), TheObject),'')) + '; '
  from ExtenderInterface  where  ExtenderInterfaceID = @ExtenderInterfaceID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ExtenderInterface_MREF_F  (
 @ExtenderInterface_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ExtenderInterface_BRIEF_F(ExtenderInterfaceID, @Lang)  from ExtenderInterface
where @ExtenderInterface_ref like '%'+convert(varchar(38),ExtenderInterfaceID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELD_BRIEF_F  (
 @FIELDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELD where FIELDID=@FIELDID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from FIELD  where  FIELDID = @FIELDID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from FIELD  where  FIELDID = @FIELDID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELD_MREF_F  (
 @FIELD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELD_BRIEF_F(FIELDID, @Lang)  from FIELD
where @FIELD_ref like '%'+convert(varchar(38),FIELDID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FldExtenders_BRIEF_F  (
 @FldExtendersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FldExtendersid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FldExtenders where FldExtendersID=@FldExtendersID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), TheName),'')) + '; '
  from FldExtenders  where  FldExtendersID = @FldExtendersID 
select @tmpID =  TargetPlatform
  from FldExtenders  where  FldExtendersID = @FldExtendersID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), TheObject),'')) + '; '
  from FldExtenders  where  FldExtendersID = @FldExtendersID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FldExtenders_MREF_F  (
 @FldExtenders_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FldExtenders_BRIEF_F(FldExtendersID, @Lang)  from FldExtenders
where @FldExtenders_ref like '%'+convert(varchar(38),FldExtendersID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDSRCDEF_BRIEF_F  (
 @FIELDSRCDEFid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDSRCDEFid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDSRCDEF where FIELDSRCDEFID=@FIELDSRCDEFID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), DataSource),'')) + '; '
  from FIELDSRCDEF  where  FIELDSRCDEFID = @FIELDSRCDEFID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDSRCDEF_MREF_F  (
 @FIELDSRCDEF_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDSRCDEF_BRIEF_F(FIELDSRCDEFID, @Lang)  from FIELDSRCDEF
where @FIELDSRCDEF_ref like '%'+convert(varchar(38),FIELDSRCDEFID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function DINAMICFILTERSCRIPT_BRIEF_F  (
 @DINAMICFILTERSCRIPTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @DINAMICFILTERSCRIPTid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from DINAMICFILTERSCRIPT where DINAMICFILTERSCRIPTID=@DINAMICFILTERSCRIPTID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from DINAMICFILTERSCRIPT  where  DINAMICFILTERSCRIPTID = @DINAMICFILTERSCRIPTID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function DINAMICFILTERSCRIPT_MREF_F  (
 @DINAMICFILTERSCRIPT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.DINAMICFILTERSCRIPT_BRIEF_F(DINAMICFILTERSCRIPTID, @Lang)  from DINAMICFILTERSCRIPT
where @DINAMICFILTERSCRIPT_ref like '%'+convert(varchar(38),DINAMICFILTERSCRIPTID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDEXPRESSION_BRIEF_F  (
 @FIELDEXPRESSIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDEXPRESSIONid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDEXPRESSION where FIELDEXPRESSIONID=@FIELDEXPRESSIONID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from FIELDEXPRESSION  where  FIELDEXPRESSIONID = @FIELDEXPRESSIONID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDEXPRESSION_MREF_F  (
 @FIELDEXPRESSION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDEXPRESSION_BRIEF_F(FIELDEXPRESSIONID, @Lang)  from FIELDEXPRESSION
where @FIELDEXPRESSION_ref like '%'+convert(varchar(38),FIELDEXPRESSIONID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDVALIDATOR_BRIEF_F  (
 @FIELDVALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDVALIDATORid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDVALIDATOR where FIELDVALIDATORID=@FIELDVALIDATORID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from FIELDVALIDATOR  where  FIELDVALIDATORID = @FIELDVALIDATORID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDVALIDATOR_MREF_F  (
 @FIELDVALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDVALIDATOR_BRIEF_F(FIELDVALIDATORID, @Lang)  from FIELDVALIDATOR
where @FIELDVALIDATOR_ref like '%'+convert(varchar(38),FIELDVALIDATORID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDMENU_BRIEF_F  (
 @FIELDMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDMENUid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDMENU where FIELDMENUID=@FIELDMENUID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from FIELDMENU  where  FIELDMENUID = @FIELDMENUID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDMENU_MREF_F  (
 @FIELDMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDMENU_BRIEF_F(FIELDMENUID, @Lang)  from FIELDMENU
where @FIELDMENU_ref like '%'+convert(varchar(38),FIELDMENUID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDPARAMMAP_BRIEF_F  (
 @FIELDPARAMMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDPARAMMAPid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDPARAMMAP where FIELDPARAMMAPID=@FIELDPARAMMAPID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), FieldName),'')) + '; '
  from FIELDPARAMMAP  where  FIELDPARAMMAPID = @FIELDPARAMMAPID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ParamName),'')) + '; '
  from FIELDPARAMMAP  where  FIELDPARAMMAPID = @FIELDPARAMMAPID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDPARAMMAP_MREF_F  (
 @FIELDPARAMMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDPARAMMAP_BRIEF_F(FIELDPARAMMAPID, @Lang)  from FIELDPARAMMAP
where @FIELDPARAMMAP_ref like '%'+convert(varchar(38),FIELDPARAMMAPID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function MTZAPP_BRIEF_F  (
 @MTZAPPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @MTZAPPid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from MTZAPP where MTZAPPID=@MTZAPPID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from MTZAPP  where  MTZAPPID = @MTZAPPID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function MTZAPP_MREF_F  (
 @MTZAPP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.MTZAPP_BRIEF_F(MTZAPPID, @Lang)  from MTZAPP
where @MTZAPP_ref like '%'+convert(varchar(38),MTZAPPID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ParentPackage_BRIEF_F  (
 @ParentPackageid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ParentPackageid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ParentPackage where ParentPackageID=@ParentPackageID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Package
  from ParentPackage  where  ParentPackageID = @ParentPackageID 
 select @tmpBrief= dbo.MTZAPP_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ParentPackage_MREF_F  (
 @ParentPackage_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ParentPackage_BRIEF_F(ParentPackageID, @Lang)  from ParentPackage
where @ParentPackage_ref like '%'+convert(varchar(38),ParentPackageID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function the_Session_BRIEF_F  (
 @the_Sessionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @the_Sessionid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from the_Session where the_SessionID=@the_SessionID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  UserRole
  from the_Session  where  the_SessionID = @the_SessionID 
 select @tmpBrief= dbo.Groups_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF +
  case Closed 
when 1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from the_Session where the_SessionID=@the_SessionID
select @tmpID =  Usersid
  from the_Session  where  the_SessionID = @the_SessionID 
 select @tmpBrief= dbo.Users_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function the_Session_MREF_F  (
 @the_Session_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.the_Session_BRIEF_F(the_SessionID, @Lang)  from the_Session
where @the_Session_ref like '%'+convert(varchar(38),the_SessionID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function SysRefCache_BRIEF_F  (
 @SysRefCacheid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @SysRefCacheid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from SysRefCache where SysRefCacheID=@SysRefCacheID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  SessionID
  from SysRefCache  where  SysRefCacheID = @SysRefCacheID 
 select @tmpBrief= dbo.the_Session_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function SysRefCache_MREF_F  (
 @SysRefCache_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.SysRefCache_BRIEF_F(SysRefCacheID, @Lang)  from SysRefCache
where @SysRefCache_ref like '%'+convert(varchar(38),SysRefCacheID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function SysLog_BRIEF_F  (
 @SysLogid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @SysLogid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from SysLog where SysLogID=@SysLogID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheSession
  from SysLog  where  SysLogID = @SysLogID 
 select @tmpBrief= dbo.the_Session_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), LogStructID),'')) + '; '
  from SysLog  where  SysLogID = @SysLogID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), VERB),'')) + '; '
  from SysLog  where  SysLogID = @SysLogID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function SysLog_MREF_F  (
 @SysLog_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.SysLog_BRIEF_F(SysLogID, @Lang)  from SysLog
where @SysLog_ref like '%'+convert(varchar(38),SysLogID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XLevel_BRIEF_F  (
 @XLevelid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XLevelid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XLevel where XLevelID=@XLevelID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XLevel  where  XLevelID = @XLevelID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XLevel_MREF_F  (
 @XLevel_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XLevel_BRIEF_F(XLevelID, @Lang)  from XLevel
where @XLevel_ref like '%'+convert(varchar(38),XLevelID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XSubject_BRIEF_F  (
 @XSubjectid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XSubjectid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XSubject where XSubjectID=@XSubjectID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XSubject  where  XSubjectID = @XSubjectID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XSubject_MREF_F  (
 @XSubject_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XSubject_BRIEF_F(XSubjectID, @Lang)  from XSubject
where @XSubject_ref like '%'+convert(varchar(38),XSubjectID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XVendor_BRIEF_F  (
 @XVendorid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XVendorid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XVendor where XVendorID=@XVendorID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XVendor  where  XVendorID = @XVendorID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XVendor_MREF_F  (
 @XVendor_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XVendor_BRIEF_F(XVendorID, @Lang)  from XVendor
where @XVendor_ref like '%'+convert(varchar(38),XVendorID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XStatus_BRIEF_F  (
 @XStatusid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XStatusid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XStatus where XStatusID=@XStatusID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XStatus  where  XStatusID = @XStatusID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XStatus_MREF_F  (
 @XStatus_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XStatus_BRIEF_F(XStatusID, @Lang)  from XStatus
where @XStatus_ref like '%'+convert(varchar(38),XStatusID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function XSubscriptionType_BRIEF_F  (
 @XSubscriptionTypeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @XSubscriptionTypeid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from XSubscriptionType where XSubscriptionTypeID=@XSubscriptionTypeID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from XSubscriptionType  where  XSubscriptionTypeID = @XSubscriptionTypeID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function XSubscriptionType_MREF_F  (
 @XSubscriptionType_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.XSubscriptionType_BRIEF_F(XSubscriptionTypeID, @Lang)  from XSubscriptionType
where @XSubscriptionType_ref like '%'+convert(varchar(38),XSubscriptionTypeID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Users_BRIEF_F  (
 @Usersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Usersid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Users where UsersID=@UsersID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Family),'')) + '; '
  from Users  where  UsersID = @UsersID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Users  where  UsersID = @UsersID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), SurName),'')) + '; '
  from Users  where  UsersID = @UsersID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Users_MREF_F  (
 @Users_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Users_BRIEF_F(UsersID, @Lang)  from Users
where @Users_ref like '%'+convert(varchar(38),UsersID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Groups_BRIEF_F  (
 @Groupsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Groupsid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Groups where GroupsID=@GroupsID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Groups  where  GroupsID = @GroupsID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Groups_MREF_F  (
 @Groups_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Groups_BRIEF_F(GroupsID, @Lang)  from Groups
where @Groups_ref like '%'+convert(varchar(38),GroupsID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GroupUser_BRIEF_F  (
 @GroupUserid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GroupUserid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GroupUser where GroupUserID=@GroupUserID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheUser
  from GroupUser  where  GroupUserID = @GroupUserID 
 select @tmpBrief= dbo.Users_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GroupUser_MREF_F  (
 @GroupUser_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GroupUser_BRIEF_F(GroupUserID, @Lang)  from GroupUser
where @GroupUser_ref like '%'+convert(varchar(38),GroupUserID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestGroup_BRIEF_F  (
 @TestGroupid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestGroupid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestGroup where TestGroupID=@TestGroupID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from TestGroup  where  TestGroupID = @TestGroupID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestGroup_MREF_F  (
 @TestGroup_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestGroup_BRIEF_F(TestGroupID, @Lang)  from TestGroup
where @TestGroup_ref like '%'+convert(varchar(38),TestGroupID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestBlockType_BRIEF_F  (
 @TestBlockTypeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestBlockTypeid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestBlockType where TestBlockTypeID=@TestBlockTypeID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from TestBlockType  where  TestBlockTypeID = @TestBlockTypeID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestBlockType_MREF_F  (
 @TestBlockType_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestBlockType_BRIEF_F(TestBlockTypeID, @Lang)  from TestBlockType
where @TestBlockType_ref like '%'+convert(varchar(38),TestBlockTypeID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function testLevelName_BRIEF_F  (
 @testLevelNameid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @testLevelNameid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from testLevelName where testLevelNameID=@testLevelNameID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from testLevelName  where  testLevelNameID = @testLevelNameID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function testLevelName_MREF_F  (
 @testLevelName_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.testLevelName_BRIEF_F(testLevelNameID, @Lang)  from testLevelName
where @testLevelName_ref like '%'+convert(varchar(38),testLevelNameID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestFileType_BRIEF_F  (
 @TestFileTypeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestFileTypeid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestFileType where TestFileTypeID=@TestFileTypeID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from TestFileType  where  TestFileTypeID = @TestFileTypeID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestFileType_MREF_F  (
 @TestFileType_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestFileType_BRIEF_F(TestFileTypeID, @Lang)  from TestFileType
where @TestFileType_ref like '%'+convert(varchar(38),TestFileTypeID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function testPlayer_BRIEF_F  (
 @testPlayerid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @testPlayerid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from testPlayer where testPlayerID=@testPlayerID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from testPlayer  where  testPlayerID = @testPlayerID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function testPlayer_MREF_F  (
 @testPlayer_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.testPlayer_BRIEF_F(testPlayerID, @Lang)  from testPlayer
where @testPlayer_ref like '%'+convert(varchar(38),testPlayerID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestQuestionType_BRIEF_F  (
 @TestQuestionTypeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestQuestionTypeid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestQuestionType where TestQuestionTypeID=@TestQuestionTypeID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from TestQuestionType  where  TestQuestionTypeID = @TestQuestionTypeID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestQuestionType_MREF_F  (
 @TestQuestionType_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestQuestionType_BRIEF_F(TestQuestionTypeID, @Lang)  from TestQuestionType
where @TestQuestionType_ref like '%'+convert(varchar(38),TestQuestionTypeID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestDescription_BRIEF_F  (
 @TestDescriptionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestDescriptionid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestDescription where TestDescriptionID=@TestDescriptionID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from TestDescription  where  TestDescriptionID = @TestDescriptionID 
select @tmpID =  theGroup
  from TestDescription  where  TestDescriptionID = @TestDescriptionID 
 select @tmpBrief= dbo.TestGroup_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestDescription_MREF_F  (
 @TestDescription_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestDescription_BRIEF_F(TestDescriptionID, @Lang)  from TestDescription
where @TestDescription_ref like '%'+convert(varchar(38),TestDescriptionID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestModuleDefinition_BRIEF_F  (
 @TestModuleDefinitionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestModuleDefinitionid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestModuleDefinition where TestModuleDefinitionID=@TestModuleDefinitionID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from TestModuleDefinition  where  TestModuleDefinitionID = @TestModuleDefinitionID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestModuleDefinition_MREF_F  (
 @TestModuleDefinition_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestModuleDefinition_BRIEF_F(TestModuleDefinitionID, @Lang)  from TestModuleDefinition
where @TestModuleDefinition_ref like '%'+convert(varchar(38),TestModuleDefinitionID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TestModuleContent_BRIEF_F  (
 @TestModuleContentid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TestModuleContentid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TestModuleContent where TestModuleContentID=@TestModuleContentID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  BlockType
  from TestModuleContent  where  TestModuleContentID = @TestModuleContentID 
 select @tmpBrief= dbo.TestBlockType_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), blockCount),'')) + '; '
  from TestModuleContent  where  TestModuleContentID = @TestModuleContentID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TestModuleContent_MREF_F  (
 @TestModuleContent_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TestModuleContent_BRIEF_F(TestModuleContentID, @Lang)  from TestModuleContent
where @TestModuleContent_ref like '%'+convert(varchar(38),TestModuleContentID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function CheckFormInfo_BRIEF_F  (
 @CheckFormInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @CheckFormInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from CheckFormInfo where CheckFormInfoID=@CheckFormInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from CheckFormInfo  where  CheckFormInfoID = @CheckFormInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function CheckFormInfo_MREF_F  (
 @CheckFormInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.CheckFormInfo_BRIEF_F(CheckFormInfoID, @Lang)  from CheckFormInfo
where @CheckFormInfo_ref like '%'+convert(varchar(38),CheckFormInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function CheckFormField_BRIEF_F  (
 @CheckFormFieldid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @CheckFormFieldid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from CheckFormField where CheckFormFieldID=@CheckFormFieldID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), sequence),'')) + '; '
  from CheckFormField  where  CheckFormFieldID = @CheckFormFieldID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), fName),'')) + '; '
  from CheckFormField  where  CheckFormFieldID = @CheckFormFieldID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function CheckFormField_MREF_F  (
 @CheckFormField_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.CheckFormField_BRIEF_F(CheckFormFieldID, @Lang)  from CheckFormField
where @CheckFormField_ref like '%'+convert(varchar(38),CheckFormFieldID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function examFiles_BRIEF_F  (
 @examFilesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @examFilesid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from examFiles where examFilesID=@examFilesID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), originalName),'')) + '; '
  from examFiles  where  examFilesID = @examFilesID 
select @tmpID =  fileType
  from examFiles  where  examFilesID = @examFilesID 
 select @tmpBrief= dbo.TestFileType_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function examFiles_MREF_F  (
 @examFiles_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.examFiles_BRIEF_F(examFilesID, @Lang)  from examFiles
where @examFiles_ref like '%'+convert(varchar(38),examFilesID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function examPersons_BRIEF_F  (
 @examPersonsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @examPersonsid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from examPersons where examPersonsID=@examPersonsID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  testable
  from examPersons  where  examPersonsID = @examPersonsID 
 select @tmpBrief= dbo.TestPersonInfo_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function examPersons_MREF_F  (
 @examPersons_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.examPersons_BRIEF_F(examPersonsID, @Lang)  from examPersons
where @examPersons_ref like '%'+convert(varchar(38),examPersonsID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function examTestScore_BRIEF_F  (
 @examTestScoreid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @examTestScoreid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from examTestScore where examTestScoreID=@examTestScoreID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theTest
  from examTestScore  where  examTestScoreID = @examTestScoreID 
 select @tmpBrief= dbo.TestDescription_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function examTestScore_MREF_F  (
 @examTestScore_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.examTestScore_BRIEF_F(examTestScoreID, @Lang)  from examTestScore
where @examTestScore_ref like '%'+convert(varchar(38),examTestScoreID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function examSubtest_BRIEF_F  (
 @examSubtestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @examSubtestid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from examSubtest where examSubtestID=@examSubtestID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), test_name),'')) + '; '
  from examSubtest  where  examSubtestID = @examSubtestID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from examSubtest  where  examSubtestID = @examSubtestID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function examSubtest_MREF_F  (
 @examSubtest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.examSubtest_BRIEF_F(examSubtestID, @Lang)  from examSubtest
where @examSubtest_ref like '%'+convert(varchar(38),examSubtestID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function examAnswerFile_BRIEF_F  (
 @examAnswerFileid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @examAnswerFileid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from examAnswerFile where examAnswerFileID=@examAnswerFileID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), originalName),'')) + '; '
  from examAnswerFile  where  examAnswerFileID = @examAnswerFileID 
select @tmpID =  fileType
  from examAnswerFile  where  examAnswerFileID = @examAnswerFileID 
 select @tmpBrief= dbo.TestFileType_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function examAnswerFile_MREF_F  (
 @examAnswerFile_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.examAnswerFile_BRIEF_F(examAnswerFileID, @Lang)  from examAnswerFile
where @examAnswerFile_ref like '%'+convert(varchar(38),examAnswerFileID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function examInfo_BRIEF_F  (
 @examInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @examInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from examInfo where examInfoID=@examInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theCert
  from examInfo  where  examInfoID = @examInfoID 
 select @tmpBrief= dbo.certInfo_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), examDate),'')) + '; '
  from examInfo  where  examInfoID = @examInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function examInfo_MREF_F  (
 @examInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.examInfo_BRIEF_F(examInfoID, @Lang)  from examInfo
where @examInfo_ref like '%'+convert(varchar(38),examInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function examTest_BRIEF_F  (
 @examTestid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @examTestid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from examTest where examTestID=@examTestID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theTest
  from examTest  where  examTestID = @examTestID 
 select @tmpBrief= dbo.TestDescription_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function examTest_MREF_F  (
 @examTest_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.examTest_BRIEF_F(examTestID, @Lang)  from examTest
where @examTest_ref like '%'+convert(varchar(38),examTestID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Views--" File="">
    <BlockHolder BlockName="--Views--" BlockCode=" 
if exists (select * from sysobjects where id = object_id(N'V_TestQuestionDescr') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestQuestionDescr
GO
create view V_TestQuestionDescr as 
select   TestQuestionDescr.TestQuestionDescrId
, TestModuleGroupId 
, 
TestQuestionDescr.theCode 
theCode 
, 
TestQuestionDescr.questionCost 
questionCost 
, 
TestQuestionDescr.mainText 
mainText 
, 
TestQuestionDescr.sequence 
sequence 
, 
TestQuestionDescr.theComment 
theComment 
, 
 TestQuestionDescr.questType  
questType 
, dbo.TestQuestionType_BRIEF_F(TestQuestionDescr.questType, NULL) 
questType_name 
, 
 TestQuestionDescr.checkForm  
checkForm 
, dbo.CheckFormInfo_BRIEF_F(TestQuestionDescr.checkForm, NULL) 
checkForm_name 
, TestQuestionDescr.TestQuestionDescrID ID 
, 'TestQuestionDescr' VIEWBASE 

 from TestQuestionDescr
GO
if exists (select * from sysobjects where id = object_id(N'V_TestQuestionAnswers') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestQuestionAnswers
GO
create view V_TestQuestionAnswers as 
select   TestQuestionAnswers.TestQuestionAnswersId
, TestQuestionDescrId 
, 
TestQuestionAnswers.theCode 
theCode 
, 
TestQuestionAnswers.name 
name 
, 
TestQuestionAnswers.sequence 
sequence 
, 
TestQuestionAnswers.audioRecordDuraton 
audioRecordDuraton 
, 
 TestQuestionAnswers.isCorrect  
isCorrect 
, case TestQuestionAnswers.isCorrect 
when 1 then 'Да'
when 0 then 'Нет'
 end 
isCorrect_name 
, TestQuestionAnswers.TestQuestionAnswersID ID 
, 'TestQuestionAnswers' VIEWBASE 

 from TestQuestionAnswers
GO
if exists (select * from sysobjects where id = object_id(N'V_TestModuleGroup') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestModuleGroup
GO
create view V_TestModuleGroup as 
select   TestModuleGroup.TestModuleGroupId
, 
 TestModuleGroup.testLevel  
testLevel 
, dbo.testLevelName_BRIEF_F(TestModuleGroup.testLevel, NULL) 
testLevel_name 
, 
TestModuleGroup.questionCount 
questionCount 
, 
TestModuleGroup.sequence 
sequence 
, 
TestModuleGroup.blockTime 
blockTime 
, 
 TestModuleGroup.allQuestions  
allQuestions 
, case TestModuleGroup.allQuestions 
when 1 then 'Да'
when 0 then 'Нет'
 end 
allQuestions_name 
, 
TestModuleGroup.name 
name 
, 
TestModuleGroup.mainText 
mainText 
, 
TestModuleGroup.reglament 
reglament 
, TestModuleGroup.TestModuleGroupID ID 
, 'TestModuleGroup' VIEWBASE 

 from TestModuleGroup
GO
if exists (select * from sysobjects where id = object_id(N'V_TestBlockUsage') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestBlockUsage
GO
create view V_TestBlockUsage as 
select   TestBlockUsage.TestBlockUsageId
, TestModuleGroupId 
, 
 TestBlockUsage.BlockType  
BlockType 
, dbo.TestBlockType_BRIEF_F(TestBlockUsage.BlockType, NULL) 
BlockType_name 
, TestBlockUsage.TestBlockUsageID ID 
, 'TestBlockUsage' VIEWBASE 

 from TestBlockUsage
GO
if exists (select * from sysobjects where id = object_id(N'V_TestGroupFiles') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestGroupFiles
GO
create view V_TestGroupFiles as 
select   TestGroupFiles.TestGroupFilesId
, TestModuleGroupId 
, 
TestGroupFiles.filePath 
filePath 
, 
 TestGroupFiles.fileType  
fileType 
, dbo.TestFileType_BRIEF_F(TestGroupFiles.fileType, NULL) 
fileType_name 
, 
TestGroupFiles.fileComment 
fileComment 
, 
TestGroupFiles.originalName 
originalName 
, TestGroupFiles.TestGroupFilesID ID 
, 'TestGroupFiles' VIEWBASE 

 from TestGroupFiles
GO
if exists (select * from sysobjects where id = object_id(N'V_VariantDescr') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_VariantDescr
GO
create view V_VariantDescr as 
select   VariantDescr.VariantDescrId
, 
 VariantDescr.baseTest  
baseTest 
, dbo.TestDescription_BRIEF_F(VariantDescr.baseTest, NULL) 
baseTest_name 
, 
 VariantDescr.onlineTest  
onlineTest 
, case VariantDescr.onlineTest 
when 1 then 'Да'
when 0 then 'Нет'
 end 
onlineTest_name 
, 
 VariantDescr.isPublic  
isPublic 
, case VariantDescr.isPublic 
when 1 then 'Да'
when 0 then 'Нет'
 end 
isPublic_name 
, 
VariantDescr.variantNum 
variantNum 
, 
 VariantDescr.theORG  
theORG 
, dbo.OrganizationInfo_BRIEF_F(VariantDescr.theORG, NULL) 
theORG_name 
, VariantDescr.VariantDescrID ID 
, 'VariantDescr' VIEWBASE 

 from VariantDescr
GO
if exists (select * from sysobjects where id = object_id(N'V_VariantSubtest') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_VariantSubtest
GO
create view V_VariantSubtest as 
select   VariantSubtest.VariantSubtestId
, VariantDescrId 
, 
VariantSubtest.name 
name 
, 
VariantSubtest.testJSON 
testJSON 
, 
 VariantSubtest.testPlayer  
testPlayer 
, dbo.testPlayer_BRIEF_F(VariantSubtest.testPlayer, NULL) 
testPlayer_name 
, VariantSubtest.VariantSubtestID ID 
, 'VariantSubtest' VIEWBASE 

 from VariantSubtest
GO
if exists (select * from sysobjects where id = object_id(N'V_XInstructorInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XInstructorInfo
GO
create view V_XInstructorInfo as 
select   XInstructorInfo.XInstructorInfoId
, 
XInstructorInfo.Family 
Family 
, 
XInstructorInfo.Name 
Name 
, 
XInstructorInfo.SurName 
SurName 
, 
XInstructorInfo.EMail 
EMail 
, 
XInstructorInfo.Phone 
Phone 
, 
XInstructorInfo.LocalPhone 
LocalPhone 
, XInstructorInfo.XInstructorInfoID ID 
, 'XInstructorInfo' VIEWBASE 

 from XInstructorInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_XInstructorStatus') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XInstructorStatus
GO
create view V_XInstructorStatus as 
select   XInstructorStatus.XInstructorStatusId
, XInstructorInfoId 
, 
 XInstructorStatus.theStatus  
theStatus 
, dbo.XStatus_BRIEF_F(XInstructorStatus.theStatus, NULL) 
theStatus_name 
, XInstructorStatus.XInstructorStatusID ID 
, 'XInstructorStatus' VIEWBASE 

 from XInstructorStatus
GO
if exists (select * from sysobjects where id = object_id(N'V_XCourseDesc') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XCourseDesc
GO
create view V_XCourseDesc as 
select   XCourseDesc.XCourseDescId
, 
XCourseDesc.name 
name 
, 
 XCourseDesc.theLevel  
theLevel 
, dbo.XLevel_BRIEF_F(XCourseDesc.theLevel, NULL) 
theLevel_name 
, 
 XCourseDesc.theVendor  
theVendor 
, dbo.XVendor_BRIEF_F(XCourseDesc.theVendor, NULL) 
theVendor_name 
, 
XCourseDesc.CourseDescription 
CourseDescription 
, 
XCourseDesc.StudentGuide 
StudentGuide 
, 
 XCourseDesc.IsActive  
IsActive 
, case XCourseDesc.IsActive 
when 1 then 'Да'
when 0 then 'Нет'
 end 
IsActive_name 
, XCourseDesc.XCourseDescID ID 
, 'XCourseDesc' VIEWBASE 

 from XCourseDesc
GO
if exists (select * from sysobjects where id = object_id(N'V_XCourseModule') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XCourseModule
GO
create view V_XCourseModule as 
select   XCourseModule.XCourseModuleId
, XCourseDescId 
, 
XCourseModule.name 
name 
, 
XCourseModule.info 
info 
, 
XCourseModule.reglament 
reglament 
, XCourseModule.XCourseModuleID ID 
, 'XCourseModule' VIEWBASE 

 from XCourseModule
GO
if exists (select * from sysobjects where id = object_id(N'V_XChepter') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XChepter
GO
create view V_XChepter as 
select   XChepter.XChepterId
, XCourseModuleId 
, 
XChepter.name 
name 
, 
XChepter.mainText 
mainText 
, XChepter.XChepterID ID 
, 'XChepter' VIEWBASE 

 from XChepter
GO
if exists (select * from sysobjects where id = object_id(N'V_Num_zones') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Num_zones
GO
create view V_Num_zones as 
select   Num_zones.Num_zonesId
, 
Num_zones.ZoneMask 
ZoneMask 
, Num_zones.Num_zonesID ID 
, 'Num_zones' VIEWBASE 

 from Num_zones
GO
if exists (select * from sysobjects where id = object_id(N'V_Num_Values') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Num_Values
GO
create view V_Num_Values as 
select   Num_Values.Num_ValuesId
, Num_zonesId 
, 
Num_Values.the_Value 
the_Value 
, 
Num_Values.OwnerPartName 
OwnerPartName 
, 
Num_Values.OwnerRowID 
OwnerRowID 
, Num_Values.Num_ValuesID ID 
, 'Num_Values' VIEWBASE 

 from Num_Values
GO
if exists (select * from sysobjects where id = object_id(N'V_Num_head') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Num_head
GO
create view V_Num_head as 
select   Num_head.Num_headId
, 
Num_head.Name 
Name 
, 
 Num_head.Shema  
Shema 
, case Num_head.Shema 
when 2 then 'По кварталу'
when 3 then 'По месяцу'
when 0 then 'Единая зона'
when 4 then 'По дню'
when 1 then 'По году'
when 10 then 'Произвольные зоны'
 end 
Shema_name 
, Num_head.Num_headID ID 
, 'Num_head' VIEWBASE 

 from Num_head
GO
if exists (select * from sysobjects where id = object_id(N'V_ARMJournal') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ARMJournal
GO
create view V_ARMJournal as 
select   ARMJournal.ARMJournalId
, 
 ARMJournal.TheJournal  
TheJournal 
, 'не поддерживается' 
TheJournal_name 
, ARMJournal.ARMJournalID ID 
, 'ARMJournal' VIEWBASE 

 from ARMJournal
GO
if exists (select * from sysobjects where id = object_id(N'V_ARMJRNLREP') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ARMJRNLREP
GO
create view V_ARMJRNLREP as 
select   ARMJRNLREP.ARMJRNLREPId
, ARMJournalId 
, 
ARMJRNLREP.repname 
repname 
, 
 ARMJRNLREP.TheReport  
TheReport 
, 'не поддерживается' 
TheReport_name 
, ARMJRNLREP.ARMJRNLREPID ID 
, 'ARMJRNLREP' VIEWBASE 

 from ARMJRNLREP
GO
if exists (select * from sysobjects where id = object_id(N'V_ARMJRNLRUN') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ARMJRNLRUN
GO
create view V_ARMJRNLRUN as 
select   ARMJRNLRUN.ARMJRNLRUNId
, ARMJournalId 
, 
ARMJRNLRUN.Name 
Name 
, 
 ARMJRNLRUN.TheExtention  
TheExtention 
, 'не поддерживается' 
TheExtention_name 
, ARMJRNLRUN.ARMJRNLRUNID ID 
, 'ARMJRNLRUN' VIEWBASE 

 from ARMJRNLRUN
GO
if exists (select * from sysobjects where id = object_id(N'V_ARMJRNLADD') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ARMJRNLADD
GO
create view V_ARMJRNLADD as 
select   ARMJRNLADD.ARMJRNLADDId
, ARMJournalId 
, 
ARMJRNLADD.Name 
Name 
, 
 ARMJRNLADD.TheExtention  
TheExtention 
, 'не поддерживается' 
TheExtention_name 
, ARMJRNLADD.ARMJRNLADDID ID 
, 'ARMJRNLADD' VIEWBASE 

 from ARMJRNLADD
GO
if exists (select * from sysobjects where id = object_id(N'V_EntryPoints') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_EntryPoints
GO
create view V_EntryPoints as 
select   EntryPoints.EntryPointsId
, 
EntryPoints.sequence 
sequence 
, 
EntryPoints.Name 
Name 
, 
EntryPoints.Caption 
Caption 
, 
 EntryPoints.AsToolbarItem  
AsToolbarItem 
, case EntryPoints.AsToolbarItem 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AsToolbarItem_name 
, 
 EntryPoints.ActionType  
ActionType 
, case EntryPoints.ActionType 
when 4 then 'Запустить АРМ'
when 2 then 'Выполнить метод'
when 5 then 'Открыть отчет'
when 0 then 'Ничего не делать'
when 1 then 'Открыть документ'
when 3 then 'Открыть журнал'
 end 
ActionType_name 
, 
 EntryPoints.TheFilter  
TheFilter 
, 'не поддерживается' 
TheFilter_name 
, 
 EntryPoints.Journal  
Journal 
, 'не поддерживается' 
Journal_name 
, 
 EntryPoints.Report  
Report 
, 'не поддерживается' 
Report_name 
, 
 EntryPoints.Document  
Document 
, 'не поддерживается' 
Document_name 
, 
 EntryPoints.Method  
Method 
, dbo.SHAREDMETHOD_BRIEF_F(EntryPoints.Method, NULL) 
Method_name 
, 
EntryPoints.IconFile 
IconFile 
, 
 EntryPoints.TheExtention  
TheExtention 
, 'не поддерживается' 
TheExtention_name 
, 
 EntryPoints.ARM  
ARM 
, 'не поддерживается' 
ARM_name 
, 
EntryPoints.TheComment 
TheComment 
, 
 EntryPoints.ObjectType  
ObjectType 
, dbo.OBJECTTYPE_BRIEF_F(EntryPoints.ObjectType, NULL) 
ObjectType_name 
, 
EntryPoints.JournalFixedQuery 
JournalFixedQuery 
, 
 EntryPoints.AllowAdd  
AllowAdd 
, case EntryPoints.AllowAdd 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowAdd_name 
, 
 EntryPoints.AllowEdit  
AllowEdit 
, case EntryPoints.AllowEdit 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowEdit_name 
, 
 EntryPoints.AllowDel  
AllowDel 
, case EntryPoints.AllowDel 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowDel_name 
, 
 EntryPoints.AllowFilter  
AllowFilter 
, case EntryPoints.AllowFilter 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowFilter_name 
, 
 EntryPoints.AllowPrint  
AllowPrint 
, case EntryPoints.AllowPrint 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowPrint_name 
, EntryPoints.EntryPointsID ID 
, 'EntryPoints' VIEWBASE 

 from EntryPoints
GO
if exists (select * from sysobjects where id = object_id(N'V_EPFilterLink') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_EPFilterLink
GO
create view V_EPFilterLink as 
select   EPFilterLink.EPFilterLinkId
, EntryPointsId 
, 
EPFilterLink.RowSource 
RowSource 
, 
EPFilterLink.TheExpression 
TheExpression 
, 
EPFilterLink.FilterField 
FilterField 
, EPFilterLink.EPFilterLinkID ID 
, 'EPFilterLink' VIEWBASE 

 from EPFilterLink
GO
if exists (select * from sysobjects where id = object_id(N'V_WorkPlace') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_WorkPlace
GO
create view V_WorkPlace as 
select   WorkPlace.WorkPlaceId
, 
WorkPlace.Name 
Name 
, 
WorkPlace.Caption 
Caption 
, 
WorkPlace.TheVersion 
TheVersion 
, 
 WorkPlace.ThePlatform  
ThePlatform 
, case WorkPlace.ThePlatform 
when 3 then 'OTHER'
when 1 then 'DOTNET'
when 2 then 'JAVA'
when 0 then 'VB6'
 end 
ThePlatform_name 
, 
WorkPlace.TheComment 
TheComment 
, WorkPlace.WorkPlaceID ID 
, 'WorkPlace' VIEWBASE 

 from WorkPlace
GO
if exists (select * from sysobjects where id = object_id(N'V_ARMTypes') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ARMTypes
GO
create view V_ARMTypes as 
select   ARMTypes.ARMTypesId
, 
 ARMTypes.TheDocumentType  
TheDocumentType 
, dbo.OBJECTTYPE_BRIEF_F(ARMTypes.TheDocumentType, NULL) 
TheDocumentType_name 
, ARMTypes.ARMTypesID ID 
, 'ARMTypes' VIEWBASE 

 from ARMTypes
GO
if exists (select * from sysobjects where id = object_id(N'V_JournalColumn') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_JournalColumn
GO
create view V_JournalColumn as 
select   JournalColumn.JournalColumnId
, 
JournalColumn.sequence 
sequence 
, 
JournalColumn.name 
name 
, 
 JournalColumn.ColumnAlignment  
ColumnAlignment 
, case JournalColumn.ColumnAlignment 
when 6 then 'Right Top'
when 7 then 'Right Center'
when 8 then 'Right Bottom'
when 3 then 'Center Top'
when 0 then 'Left Top'
when 4 then 'Center Center'
when 1 then 'Left Center'
when 5 then 'Center Bottom'
when 2 then 'Left Bottom'
 end 
ColumnAlignment_name 
, 
 JournalColumn.ColSort  
ColSort 
, case JournalColumn.ColSort 
when 0 then 'As String'
when 1 then 'As Numeric'
when 2 then 'As Date'
 end 
ColSort_name 
, 
 JournalColumn.GroupAggregation  
GroupAggregation 
, case JournalColumn.GroupAggregation 
when 3 then 'SUM'
when 1 then 'AVG'
when 6 then 'CUSTOM'
when 0 then 'none'
when 2 then 'COUNT'
when 5 then 'MAX'
when 4 then 'MIN'
 end 
GroupAggregation_name 
, JournalColumn.JournalColumnID ID 
, 'JournalColumn' VIEWBASE 

 from JournalColumn
GO
if exists (select * from sysobjects where id = object_id(N'V_JColumnSource') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_JColumnSource
GO
create view V_JColumnSource as 
select   JColumnSource.JColumnSourceId
, JournalColumnId 
, 
 JColumnSource.SrcPartView  
SrcPartView 
, dbo.JournalSrc_BRIEF_F(JColumnSource.SrcPartView, NULL) 
SrcPartView_name 
, 
JColumnSource.ViewField 
ViewField 
, JColumnSource.JColumnSourceID ID 
, 'JColumnSource' VIEWBASE 

 from JColumnSource
GO
if exists (select * from sysobjects where id = object_id(N'V_JournalSrc') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_JournalSrc
GO
create view V_JournalSrc as 
select   JournalSrc.JournalSrcId
, 
JournalSrc.PartView 
PartView 
, 
 JournalSrc.OnRun  
OnRun 
, case JournalSrc.OnRun 
when 2 then 'Открыть документ'
when 0 then 'Ничего не делать'
when 1 then 'Открыть строку'
 end 
OnRun_name 
, 
JournalSrc.OpenMode 
OpenMode 
, 
JournalSrc.ViewAlias 
ViewAlias 
, JournalSrc.JournalSrcID ID 
, 'JournalSrc' VIEWBASE 

 from JournalSrc
GO
if exists (select * from sysobjects where id = object_id(N'V_Journal') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Journal
GO
create view V_Journal as 
select   Journal.JournalId
, 
Journal.Name 
Name 
, 
Journal.the_Alias 
the_Alias 
, 
Journal.TheComment 
TheComment 
, 
Journal.jrnlIconCls 
jrnlIconCls 
, 
 Journal.UseFavorites  
UseFavorites 
, case Journal.UseFavorites 
when -1 then 'Да'
when 0 then 'Нет'
 end 
UseFavorites_name 
, Journal.JournalID ID 
, 'Journal' VIEWBASE 

 from Journal
GO
if exists (select * from sysobjects where id = object_id(N'V_RPTStruct') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_RPTStruct
GO
create view V_RPTStruct as 
select   RPTStruct.RPTStructId
, 
RPTStruct.Name 
Name 
, 
RPTStruct.Caption 
Caption 
, RPTStruct.RPTStructID ID 
, 'RPTStruct' VIEWBASE 

 from RPTStruct
GO
if exists (select * from sysobjects where id = object_id(N'V_RPTFields') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_RPTFields
GO
create view V_RPTFields as 
select   RPTFields.RPTFieldsId
, RPTStructId 
, 
RPTFields.Name 
Name 
, 
 RPTFields.FieldType  
FieldType 
, dbo.FIELDTYPE_BRIEF_F(RPTFields.FieldType, NULL) 
FieldType_name 
, 
RPTFields.FieldSize 
FieldSize 
, 
RPTFields.Caption 
Caption 
, RPTFields.RPTFieldsID ID 
, 'RPTFields' VIEWBASE 

 from RPTFields
GO
if exists (select * from sysobjects where id = object_id(N'V_RPTFormula') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_RPTFormula
GO
create view V_RPTFormula as 
select   RPTFormula.RPTFormulaId
, 
RPTFormula.Name 
Name 
, 
RPTFormula.Code 
Code 
, 
 RPTFormula.Platform  
Platform 
, dbo.GENERATOR_TARGET_BRIEF_F(RPTFormula.Platform, NULL) 
Platform_name 
, RPTFormula.RPTFormulaID ID 
, 'RPTFormula' VIEWBASE 

 from RPTFormula
GO
if exists (select * from sysobjects where id = object_id(N'V_Reports') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Reports
GO
create view V_Reports as 
select   Reports.ReportsId
, 
Reports.Name 
Name 
, 
Reports.ReportFile 
ReportFile 
, 
Reports.Caption 
Caption 
, 
 Reports.PrepareMethod  
PrepareMethod 
, dbo.SHAREDMETHOD_BRIEF_F(Reports.PrepareMethod, NULL) 
PrepareMethod_name 
, 
 Reports.ReportType  
ReportType 
, case Reports.ReportType 
when 4 then 'Экспорт по Excel шаблону'
when 0 then 'Таблица'
when 3 then 'Экспорт по WORD шаблону'
when 1 then 'Двумерная матрица'
when 2 then 'Только расчет'
 end 
ReportType_name 
, 
 Reports.TheReportExt  
TheReportExt 
, 'не поддерживается' 
TheReportExt_name 
, 
Reports.ReportView 
ReportView 
, 
Reports.TheComment 
TheComment 
, Reports.ReportsID ID 
, 'Reports' VIEWBASE 

 from Reports
GO
if exists (select * from sysobjects where id = object_id(N'V_FilterFieldGroup') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FilterFieldGroup
GO
create view V_FilterFieldGroup as 
select   FilterFieldGroup.FilterFieldGroupId
, 
FilterFieldGroup.sequence 
sequence 
, 
FilterFieldGroup.Name 
Name 
, 
FilterFieldGroup.Caption 
Caption 
, 
 FilterFieldGroup.AllowIgnore  
AllowIgnore 
, case FilterFieldGroup.AllowIgnore 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowIgnore_name 
, FilterFieldGroup.FilterFieldGroupID ID 
, 'FilterFieldGroup' VIEWBASE 

 from FilterFieldGroup
GO
if exists (select * from sysobjects where id = object_id(N'V_FileterField') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FileterField
GO
create view V_FileterField as 
select   FileterField.FileterFieldId
, FilterFieldGroupId 
, 
FileterField.sequence 
sequence 
, 
FileterField.Name 
Name 
, 
FileterField.Caption 
Caption 
, 
 FileterField.FieldType  
FieldType 
, dbo.FIELDTYPE_BRIEF_F(FileterField.FieldType, NULL) 
FieldType_name 
, 
FileterField.FieldSize 
FieldSize 
, 
 FileterField.RefType  
RefType 
, case FileterField.RefType 
when 3 then 'На источник данных'
when 0 then 'Скалярное поле ( не ссылка)'
when 2 then 'На строку раздела'
when 1 then 'На объект '
 end 
RefType_name 
, 
 FileterField.RefToType  
RefToType 
, dbo.OBJECTTYPE_BRIEF_F(FileterField.RefToType, NULL) 
RefToType_name 
, 
 FileterField.RefToPart  
RefToPart 
, dbo.PART_BRIEF_F(FileterField.RefToPart, NULL) 
RefToPart_name 
, 
 FileterField.ValueArray  
ValueArray 
, case FileterField.ValueArray 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ValueArray_name 
, FileterField.FileterFieldID ID 
, 'FileterField' VIEWBASE 

 from FileterField
GO
if exists (select * from sysobjects where id = object_id(N'V_Filters') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Filters
GO
create view V_Filters as 
select   Filters.FiltersId
, 
Filters.Name 
Name 
, 
Filters.TheCaption 
TheCaption 
, 
Filters.TheComment 
TheComment 
, Filters.FiltersID ID 
, 'Filters' VIEWBASE 

 from Filters
GO
if exists (select * from sysobjects where id = object_id(N'V_OrganizationInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_OrganizationInfo
GO
create view V_OrganizationInfo as 
select   OrganizationInfo.OrganizationInfoId
, 
OrganizationInfo.name 
name 
, OrganizationInfo.OrganizationInfoID ID 
, 'OrganizationInfo' VIEWBASE 

 from OrganizationInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_examRequest') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_examRequest
GO
create view V_examRequest as 
select   examRequest.examRequestId
, TestPersonInfoId 
, 
examRequest.requestDate 
requestDate 
, 
 examRequest.theExam  
theExam 
, dbo.examInfo_BRIEF_F(examRequest.theExam, NULL) 
theExam_name 
, 
 examRequest.requestAccepted  
requestAccepted 
, case examRequest.requestAccepted 
when 1 then 'Да'
when 0 then 'Нет'
 end 
requestAccepted_name 
, examRequest.examRequestID ID 
, 'examRequest' VIEWBASE 

 from examRequest
GO
if exists (select * from sysobjects where id = object_id(N'V_TestPersonInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestPersonInfo
GO
create view V_TestPersonInfo as 
select   TestPersonInfo.TestPersonInfoId
, 
TestPersonInfo.lastName 
lastName 
, 
TestPersonInfo.firstName 
firstName 
, 
TestPersonInfo.middleName 
middleName 
, 
TestPersonInfo.email 
email 
, 
TestPersonInfo.Phone 
Phone 
, 
TestPersonInfo.LoginId 
LoginId 
, 
TestPersonInfo.GroupID 
GroupID 
, TestPersonInfo.TestPersonInfoID ID 
, 'TestPersonInfo' VIEWBASE 

 from TestPersonInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_testRequest') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_testRequest
GO
create view V_testRequest as 
select   testRequest.testRequestId
, TestPersonInfoId 
, 
testRequest.requestDate 
requestDate 
, 
 testRequest.theTest  
theTest 
, dbo.TestDescription_BRIEF_F(testRequest.theTest, NULL) 
theTest_name 
, 
 testRequest.testIsReady  
testIsReady 
, case testRequest.testIsReady 
when 1 then 'Да'
when 0 then 'Нет'
 end 
testIsReady_name 
, 
 testRequest.testCompleted  
testCompleted 
, case testRequest.testCompleted 
when 1 then 'Да'
when 0 then 'Нет'
 end 
testCompleted_name 
, 
 testRequest.testFinished  
testFinished 
, case testRequest.testFinished 
when 1 then 'Да'
when 0 then 'Нет'
 end 
testFinished_name 
, 
testRequest.testScore 
testScore 
, testRequest.testRequestID ID 
, 'testRequest' VIEWBASE 

 from testRequest
GO
if exists (select * from sysobjects where id = object_id(N'V_onlineSubTest') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_onlineSubTest
GO
create view V_onlineSubTest as 
select   onlineSubTest.onlineSubTestId
, testRequestId 
, 
onlineSubTest.name 
name 
, 
onlineSubTest.testJSON 
testJSON 
, 
 onlineSubTest.testPlayer  
testPlayer 
, dbo.testPlayer_BRIEF_F(onlineSubTest.testPlayer, NULL) 
testPlayer_name 
, 
onlineSubTest.subtestAnswers 
subtestAnswers 
, 
 onlineSubTest.needCheck  
needCheck 
, case onlineSubTest.needCheck 
when -1 then 'Да'
when 0 then 'Нет'
 end 
needCheck_name 
, 
 onlineSubTest.subtestFinished  
subtestFinished 
, case onlineSubTest.subtestFinished 
when 1 then 'Да'
when 0 then 'Нет'
 end 
subtestFinished_name 
, 
 onlineSubTest.subtestChecked  
subtestChecked 
, case onlineSubTest.subtestChecked 
when 1 then 'Да'
when 0 then 'Нет'
 end 
subtestChecked_name 
, 
 onlineSubTest.checkPerson  
checkPerson 
, dbo.TestPersonInfo_BRIEF_F(onlineSubTest.checkPerson, NULL) 
checkPerson_name 
, 
onlineSubTest.subtestScore 
subtestScore 
, 
onlineSubTest.checkLog 
checkLog 
, 
onlineSubTest.okScore 
okScore 
, 
onlineSubTest.maxScore 
maxScore 
, onlineSubTest.onlineSubTestID ID 
, 'onlineSubTest' VIEWBASE 

 from onlineSubTest
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserInfo
GO
create view V_XUserInfo as 
select   XUserInfo.XUserInfoId
, 
XUserInfo.Family 
Family 
, 
XUserInfo.Login 
Login 
, 
XUserInfo.SurName 
SurName 
, 
XUserInfo.EMail 
EMail 
, 
XUserInfo.Phone 
Phone 
, 
XUserInfo.Name 
Name 
, 
XUserInfo.Password 
Password 
, XUserInfo.XUserInfoID ID 
, 'XUserInfo' VIEWBASE 

 from XUserInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_XSubscription') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XSubscription
GO
create view V_XSubscription as 
select   XSubscription.XSubscriptionId
, XUserInfoId 
, 
 XSubscription.SubscriptionType  
SubscriptionType 
, dbo.XSubscriptionType_BRIEF_F(XSubscription.SubscriptionType, NULL) 
SubscriptionType_name 
, 
XSubscription.FromDate 
FromDate 
, 
XSubscription.ToDate 
ToDate 
, XSubscription.XSubscriptionID ID 
, 'XSubscription' VIEWBASE 

 from XSubscription
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserPurchase') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserPurchase
GO
create view V_XUserPurchase as 
select   XUserPurchase.XUserPurchaseId
, XUserInfoId 
, 
 XUserPurchase.theCourse  
theCourse 
, dbo.XCourseDesc_BRIEF_F(XUserPurchase.theCourse, NULL) 
theCourse_name 
, XUserPurchase.XUserPurchaseID ID 
, 'XUserPurchase' VIEWBASE 

 from XUserPurchase
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserProfile') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserProfile
GO
create view V_XUserProfile as 
select   XUserProfile.XUserProfileId
, XUserInfoId 
, 
 XUserProfile.theCourse  
theCourse 
, dbo.XCourseDesc_BRIEF_F(XUserProfile.theCourse, NULL) 
theCourse_name 
, XUserProfile.XUserProfileID ID 
, 'XUserProfile' VIEWBASE 

 from XUserProfile
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserRegistartion') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserRegistartion
GO
create view V_XUserRegistartion as 
select   XUserRegistartion.XUserRegistartionId
, XUserInfoId 
, 
 XUserRegistartion.theCourseSchedule  
theCourseSchedule 
, dbo.XScheduleItem_BRIEF_F(XUserRegistartion.theCourseSchedule, NULL) 
theCourseSchedule_name 
, XUserRegistartion.XUserRegistartionID ID 
, 'XUserRegistartion' VIEWBASE 

 from XUserRegistartion
GO
if exists (select * from sysobjects where id = object_id(N'V_XUserCart') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XUserCart
GO
create view V_XUserCart as 
select   XUserCart.XUserCartId
, XUserInfoId 
, 
 XUserCart.theCourse  
theCourse 
, dbo.XCourseDesc_BRIEF_F(XUserCart.theCourse, NULL) 
theCourse_name 
, 
 XUserCart.SubscriptionType  
SubscriptionType 
, dbo.XSubscriptionType_BRIEF_F(XUserCart.SubscriptionType, NULL) 
SubscriptionType_name 
, 
XUserCart.FromDate 
FromDate 
, 
XUserCart.ToDate 
ToDate 
, XUserCart.XUserCartID ID 
, 'XUserCart' VIEWBASE 

 from XUserCart
GO
if exists (select * from sysobjects where id = object_id(N'V_XScheduleItem') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XScheduleItem
GO
create view V_XScheduleItem as 
select   XScheduleItem.XScheduleItemId
, 
 XScheduleItem.theCourse  
theCourse 
, dbo.XCourseDesc_BRIEF_F(XScheduleItem.theCourse, NULL) 
theCourse_name 
, 
 XScheduleItem.theInstructor  
theInstructor 
, dbo.XInstructorInfo_BRIEF_F(XScheduleItem.theInstructor, NULL) 
theInstructor_name 
, 
XScheduleItem.FromDate 
FromDate 
, 
XScheduleItem.ToDate 
ToDate 
, XScheduleItem.XScheduleItemID ID 
, 'XScheduleItem' VIEWBASE 

 from XScheduleItem
GO
if exists (select * from sysobjects where id = object_id(N'V_MTZExt_def') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_MTZExt_def
GO
create view V_MTZExt_def as 
select   MTZExt_def.MTZExt_defId
, 
MTZExt_def.Name 
Name 
, 
 MTZExt_def.ExtType  
ExtType 
, case MTZExt_def.ExtType 
when 6 then 'VerifyRowExt'
when 7 then 'CodeGenerator'
when 5 then 'DefaultExt'
when 0 then 'StatusExt'
when 4 then 'JrnlRunExt'
when 2 then 'CustomExt'
when 8 then 'ARMGenerator'
when 1 then 'OnFormExt'
when 3 then 'JrnlAddExt'
 end 
ExtType_name 
, 
MTZExt_def.TheDescription 
TheDescription 
, MTZExt_def.MTZExt_defID ID 
, 'MTZExt_def' VIEWBASE 

 from MTZExt_def
GO
if exists (select * from sysobjects where id = object_id(N'V_MTZExtRel') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_MTZExtRel
GO
create view V_MTZExtRel as 
select   MTZExtRel.MTZExtRelId
, 
 MTZExtRel.ThePlatform  
ThePlatform 
, case MTZExtRel.ThePlatform 
when 3 then 'OTHER'
when 1 then 'DOTNET'
when 2 then 'JAVA'
when 0 then 'VB6'
 end 
ThePlatform_name 
, 
MTZExtRel.TheClassName 
TheClassName 
, 
MTZExtRel.TheLibraryName 
TheLibraryName 
, MTZExtRel.MTZExtRelID ID 
, 'MTZExtRel' VIEWBASE 

 from MTZExtRel
GO
if exists (select * from sysobjects where id = object_id(N'V_certModules') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_certModules
GO
create view V_certModules as 
select   certModules.certModulesId
, certInfoId 
, 
 certModules.theTest  
theTest 
, dbo.TestDescription_BRIEF_F(certModules.theTest, NULL) 
theTest_name 
, 
certModules.passRule 
passRule 
, 
certModules.conditionalRule 
conditionalRule 
, certModules.certModulesID ID 
, 'certModules' VIEWBASE 

 from certModules
GO
if exists (select * from sysobjects where id = object_id(N'V_certInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_certInfo
GO
create view V_certInfo as 
select   certInfo.certInfoId
, 
certInfo.name 
name 
, 
 certInfo.testLevel  
testLevel 
, dbo.testLevelName_BRIEF_F(certInfo.testLevel, NULL) 
testLevel_name 
, 
certInfo.Info 
Info 
, 
 certInfo.certActive  
certActive 
, case certInfo.certActive 
when 1 then 'Да'
when 0 then 'Нет'
 end 
certActive_name 
, 
certInfo.Order 
Order 
, 
 certInfo.theORG  
theORG 
, dbo.OrganizationInfo_BRIEF_F(certInfo.theORG, NULL) 
theORG_name 
, 
certInfo.passRule 
passRule 
, 
certInfo.conditionalRule 
conditionalRule 
, certInfo.certInfoID ID 
, 'certInfo' VIEWBASE 

 from certInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_GENPACKAGE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GENPACKAGE
GO
create view V_GENPACKAGE as 
select   GENPACKAGE.GENPACKAGEId
, 
GENPACKAGE.Name 
Name 
, GENPACKAGE.GENPACKAGEID ID 
, 'GENPACKAGE' VIEWBASE 

 from GENPACKAGE
GO
if exists (select * from sysobjects where id = object_id(N'V_GENERATOR_TARGET') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GENERATOR_TARGET
GO
create view V_GENERATOR_TARGET as 
select   GENERATOR_TARGET.GENERATOR_TARGETId
, GENPACKAGEId 
, 
GENERATOR_TARGET.Name 
Name 
, 
 GENERATOR_TARGET.TargetType  
TargetType 
, case GENERATOR_TARGET.TargetType 
when 0 then 'СУБД'
when 3 then 'Документация'
when 1 then 'МОДЕЛЬ'
when 2 then 'Приложение'
when 4 then 'АРМ'
 end 
TargetType_name 
, 
GENERATOR_TARGET.QueueName 
QueueName 
, 
GENERATOR_TARGET.GeneratorProgID 
GeneratorProgID 
, 
 GENERATOR_TARGET.GeneratorStyle  
GeneratorStyle 
, case GENERATOR_TARGET.GeneratorStyle 
when 0 then 'Один тип'
when 1 then 'Все типы сразу'
 end 
GeneratorStyle_name 
, 
 GENERATOR_TARGET.TheDevelopmentEnv  
TheDevelopmentEnv 
, case GENERATOR_TARGET.TheDevelopmentEnv 
when 3 then 'OTHER'
when 1 then 'DOTNET'
when 2 then 'JAVA'
when 0 then 'VB6'
 end 
TheDevelopmentEnv_name 
, GENERATOR_TARGET.GENERATOR_TARGETID ID 
, 'GENERATOR_TARGET' VIEWBASE 

 from GENERATOR_TARGET
GO
if exists (select * from sysobjects where id = object_id(N'V_GENREFERENCE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GENREFERENCE
GO
create view V_GENREFERENCE as 
select   GENREFERENCE.GENREFERENCEId
, GENERATOR_TARGETId 
, 
GENREFERENCE.Name 
Name 
, 
GENREFERENCE.RefClassID 
RefClassID 
, 
GENREFERENCE.VersionMajor 
VersionMajor 
, 
GENREFERENCE.VersionMinor 
VersionMinor 
, GENREFERENCE.GENREFERENCEID ID 
, 'GENREFERENCE' VIEWBASE 

 from GENREFERENCE
GO
if exists (select * from sysobjects where id = object_id(N'V_GENMANUALCODE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GENMANUALCODE
GO
create view V_GENMANUALCODE as 
select   GENMANUALCODE.GENMANUALCODEId
, GENERATOR_TARGETId 
, 
GENMANUALCODE.Name 
Name 
, 
GENMANUALCODE.the_Alias 
the_Alias 
, 
GENMANUALCODE.Code 
Code 
, GENMANUALCODE.GENMANUALCODEID ID 
, 'GENMANUALCODE' VIEWBASE 

 from GENMANUALCODE
GO
if exists (select * from sysobjects where id = object_id(N'V_GENCONTROLS') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GENCONTROLS
GO
create view V_GENCONTROLS as 
select   GENCONTROLS.GENCONTROLSId
, GENERATOR_TARGETId 
, 
GENCONTROLS.ControlProgID 
ControlProgID 
, 
GENCONTROLS.ControlClassID 
ControlClassID 
, 
GENCONTROLS.VersionMajor 
VersionMajor 
, 
GENCONTROLS.VersionMinor 
VersionMinor 
, GENCONTROLS.GENCONTROLSID ID 
, 'GENCONTROLS' VIEWBASE 

 from GENCONTROLS
GO
if exists (select * from sysobjects where id = object_id(N'V_LocalizeInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_LocalizeInfo
GO
create view V_LocalizeInfo as 
select   LocalizeInfo.LocalizeInfoId
, 
LocalizeInfo.LangFull 
LangFull 
, 
LocalizeInfo.LangShort 
LangShort 
, LocalizeInfo.LocalizeInfoID ID 
, 'LocalizeInfo' VIEWBASE 

 from LocalizeInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDTYPE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDTYPE
GO
create view V_FIELDTYPE as 
select   FIELDTYPE.FIELDTYPEId
, 
FIELDTYPE.Name 
Name 
, 
 FIELDTYPE.TypeStyle  
TypeStyle 
, case FIELDTYPE.TypeStyle 
when 4 then 'Ссылка'
when 1 then 'Выражение'
when 5 then 'Элемент оформления'
when 3 then 'Интервал'
when 2 then 'Перечисление'
when 0 then 'Скалярный тип'
 end 
TypeStyle_name 
, 
FIELDTYPE.the_Comment 
the_Comment 
, 
 FIELDTYPE.AllowSize  
AllowSize 
, case FIELDTYPE.AllowSize 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowSize_name 
, 
FIELDTYPE.Minimum 
Minimum 
, 
FIELDTYPE.Maximum 
Maximum 
, 
 FIELDTYPE.AllowLikeSearch  
AllowLikeSearch 
, case FIELDTYPE.AllowLikeSearch 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowLikeSearch_name 
, 
 FIELDTYPE.GridSortType  
GridSortType 
, case FIELDTYPE.GridSortType 
when 0 then 'As String'
when 1 then 'As Numeric'
when 2 then 'As Date'
 end 
GridSortType_name 
, 
 FIELDTYPE.DelayedSave  
DelayedSave 
, case FIELDTYPE.DelayedSave 
when -1 then 'Да'
when 0 then 'Нет'
 end 
DelayedSave_name 
, FIELDTYPE.FIELDTYPEID ID 
, 'FIELDTYPE' VIEWBASE 

 from FIELDTYPE
GO
if exists (select * from sysobjects where id = object_id(N'V_ENUMITEM') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ENUMITEM
GO
create view V_ENUMITEM as 
select   ENUMITEM.ENUMITEMId
, FIELDTYPEId 
, 
ENUMITEM.Name 
Name 
, 
ENUMITEM.NameValue 
NameValue 
, 
ENUMITEM.NameInCode 
NameInCode 
, ENUMITEM.ENUMITEMID ID 
, 'ENUMITEM' VIEWBASE 

 from ENUMITEM
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDTYPEMAP') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDTYPEMAP
GO
create view V_FIELDTYPEMAP as 
select   FIELDTYPEMAP.FIELDTYPEMAPId
, FIELDTYPEId 
, 
 FIELDTYPEMAP.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(FIELDTYPEMAP.Target, NULL) 
Target_name 
, 
FIELDTYPEMAP.StoageType 
StoageType 
, 
FIELDTYPEMAP.FixedSize 
FixedSize 
, FIELDTYPEMAP.FIELDTYPEMAPID ID 
, 'FIELDTYPEMAP' VIEWBASE 

 from FIELDTYPEMAP
GO
if exists (select * from sysobjects where id = object_id(N'V_SHAREDMETHOD') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_SHAREDMETHOD
GO
create view V_SHAREDMETHOD as 
select   SHAREDMETHOD.SHAREDMETHODId
, 
SHAREDMETHOD.Name 
Name 
, 
SHAREDMETHOD.the_Comment 
the_Comment 
, 
 SHAREDMETHOD.ReturnType  
ReturnType 
, dbo.FIELDTYPE_BRIEF_F(SHAREDMETHOD.ReturnType, NULL) 
ReturnType_name 
, SHAREDMETHOD.SHAREDMETHODID ID 
, 'SHAREDMETHOD' VIEWBASE 

 from SHAREDMETHOD
GO
if exists (select * from sysobjects where id = object_id(N'V_SCRIPT') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_SCRIPT
GO
create view V_SCRIPT as 
select   SCRIPT.SCRIPTId
, SHAREDMETHODId 
, 
 SCRIPT.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(SCRIPT.Target, NULL) 
Target_name 
, 
SCRIPT.Code 
Code 
, SCRIPT.SCRIPTID ID 
, 'SCRIPT' VIEWBASE 

 from SCRIPT
GO
if exists (select * from sysobjects where id = object_id(N'V_PARAMETERS') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PARAMETERS
GO
create view V_PARAMETERS as 
select   PARAMETERS.PARAMETERSId
, SCRIPTId 
, 
PARAMETERS.sequence 
sequence 
, 
PARAMETERS.Name 
Name 
, 
PARAMETERS.Caption 
Caption 
, 
 PARAMETERS.TypeOfParm  
TypeOfParm 
, dbo.FIELDTYPE_BRIEF_F(PARAMETERS.TypeOfParm, NULL) 
TypeOfParm_name 
, 
PARAMETERS.DataSize 
DataSize 
, 
 PARAMETERS.AllowNull  
AllowNull 
, case PARAMETERS.AllowNull 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowNull_name 
, 
 PARAMETERS.OutParam  
OutParam 
, case PARAMETERS.OutParam 
when -1 then 'Да'
when 0 then 'Нет'
 end 
OutParam_name 
, 
 PARAMETERS.ReferenceType  
ReferenceType 
, case PARAMETERS.ReferenceType 
when 3 then 'На источник данных'
when 0 then 'Скалярное поле ( не ссылка)'
when 2 then 'На строку раздела'
when 1 then 'На объект '
 end 
ReferenceType_name 
, 
 PARAMETERS.RefToType  
RefToType 
, dbo.OBJECTTYPE_BRIEF_F(PARAMETERS.RefToType, NULL) 
RefToType_name 
, 
 PARAMETERS.RefToPart  
RefToPart 
, dbo.PART_BRIEF_F(PARAMETERS.RefToPart, NULL) 
RefToPart_name 
, PARAMETERS.PARAMETERSID ID 
, 'PARAMETERS' VIEWBASE 

 from PARAMETERS
GO
if exists (select * from sysobjects where id = object_id(N'V_OBJECTTYPE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_OBJECTTYPE
GO
create view V_OBJECTTYPE as 
select   OBJECTTYPE.OBJECTTYPEId
, 
 OBJECTTYPE.Package  
Package 
, dbo.MTZAPP_BRIEF_F(OBJECTTYPE.Package, NULL) 
Package_name 
, 
OBJECTTYPE.the_Comment 
the_Comment 
, 
OBJECTTYPE.Name 
Name 
, 
 OBJECTTYPE.IsSingleInstance  
IsSingleInstance 
, case OBJECTTYPE.IsSingleInstance 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsSingleInstance_name 
, 
 OBJECTTYPE.ChooseView  
ChooseView 
, dbo.PARTVIEW_BRIEF_F(OBJECTTYPE.ChooseView, NULL) 
ChooseView_name 
, 
 OBJECTTYPE.OnRun  
OnRun 
, dbo.TYPEMENU_BRIEF_F(OBJECTTYPE.OnRun, NULL) 
OnRun_name 
, 
 OBJECTTYPE.OnCreate  
OnCreate 
, dbo.TYPEMENU_BRIEF_F(OBJECTTYPE.OnCreate, NULL) 
OnCreate_name 
, 
 OBJECTTYPE.OnDelete  
OnDelete 
, dbo.TYPEMENU_BRIEF_F(OBJECTTYPE.OnDelete, NULL) 
OnDelete_name 
, 
 OBJECTTYPE.AllowRefToObject  
AllowRefToObject 
, case OBJECTTYPE.AllowRefToObject 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowRefToObject_name 
, 
 OBJECTTYPE.AllowSearch  
AllowSearch 
, case OBJECTTYPE.AllowSearch 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowSearch_name 
, 
 OBJECTTYPE.ReplicaType  
ReplicaType 
, case OBJECTTYPE.ReplicaType 
when 1 then 'Построчно'
when 0 then 'Весь документ'
when 2 then 'Локальный'
 end 
ReplicaType_name 
, 
OBJECTTYPE.TheComment 
TheComment 
, 
 OBJECTTYPE.UseOwnership  
UseOwnership 
, case OBJECTTYPE.UseOwnership 
when -1 then 'Да'
when 0 then 'Нет'
 end 
UseOwnership_name 
, 
 OBJECTTYPE.UseArchiving  
UseArchiving 
, case OBJECTTYPE.UseArchiving 
when -1 then 'Да'
when 0 then 'Нет'
 end 
UseArchiving_name 
, 
 OBJECTTYPE.CommitFullObject  
CommitFullObject 
, case OBJECTTYPE.CommitFullObject 
when -1 then 'Да'
when 0 then 'Нет'
 end 
CommitFullObject_name 
, 
OBJECTTYPE.objIconCls 
objIconCls 
, OBJECTTYPE.OBJECTTYPEID ID 
, 'OBJECTTYPE' VIEWBASE 

 from OBJECTTYPE
GO
if exists (select * from sysobjects where id = object_id(N'V_OBJSTATUS') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_OBJSTATUS
GO
create view V_OBJSTATUS as 
select   OBJSTATUS.OBJSTATUSId
, OBJECTTYPEId 
, 
OBJSTATUS.name 
name 
, 
 OBJSTATUS.isStartup  
isStartup 
, case OBJSTATUS.isStartup 
when -1 then 'Да'
when 0 then 'Нет'
 end 
isStartup_name 
, 
 OBJSTATUS.IsArchive  
IsArchive 
, case OBJSTATUS.IsArchive 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsArchive_name 
, 
OBJSTATUS.the_comment 
the_comment 
, OBJSTATUS.OBJSTATUSID ID 
, 'OBJSTATUS' VIEWBASE 

 from OBJSTATUS
GO
if exists (select * from sysobjects where id = object_id(N'V_NEXTSTATE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_NEXTSTATE
GO
create view V_NEXTSTATE as 
select   NEXTSTATE.NEXTSTATEId
, OBJSTATUSId 
, 
 NEXTSTATE.TheState  
TheState 
, dbo.OBJSTATUS_BRIEF_F(NEXTSTATE.TheState, NULL) 
TheState_name 
, NEXTSTATE.NEXTSTATEID ID 
, 'NEXTSTATE' VIEWBASE 

 from NEXTSTATE
GO
if exists (select * from sysobjects where id = object_id(N'V_OBJECTMODE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_OBJECTMODE
GO
create view V_OBJECTMODE as 
select   OBJECTMODE.OBJECTMODEId
, OBJECTTYPEId 
, 
OBJECTMODE.Name 
Name 
, 
 OBJECTMODE.DefaultMode  
DefaultMode 
, case OBJECTMODE.DefaultMode 
when -1 then 'Да'
when 0 then 'Нет'
 end 
DefaultMode_name 
, 
OBJECTMODE.TheComment 
TheComment 
, OBJECTMODE.OBJECTMODEID ID 
, 'OBJECTMODE' VIEWBASE 

 from OBJECTMODE
GO
if exists (select * from sysobjects where id = object_id(N'V_STRUCTRESTRICTION') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_STRUCTRESTRICTION
GO
create view V_STRUCTRESTRICTION as 
select   STRUCTRESTRICTION.STRUCTRESTRICTIONId
, OBJECTMODEId 
, 
 STRUCTRESTRICTION.Struct  
Struct 
, dbo.PART_BRIEF_F(STRUCTRESTRICTION.Struct, NULL) 
Struct_name 
, 
 STRUCTRESTRICTION.AllowRead  
AllowRead 
, case STRUCTRESTRICTION.AllowRead 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowRead_name 
, 
 STRUCTRESTRICTION.AllowAdd  
AllowAdd 
, case STRUCTRESTRICTION.AllowAdd 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowAdd_name 
, 
 STRUCTRESTRICTION.AllowEdit  
AllowEdit 
, case STRUCTRESTRICTION.AllowEdit 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowEdit_name 
, 
 STRUCTRESTRICTION.AllowDelete  
AllowDelete 
, case STRUCTRESTRICTION.AllowDelete 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowDelete_name 
, STRUCTRESTRICTION.STRUCTRESTRICTIONID ID 
, 'STRUCTRESTRICTION' VIEWBASE 

 from STRUCTRESTRICTION
GO
if exists (select * from sysobjects where id = object_id(N'V_METHODRESTRICTION') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_METHODRESTRICTION
GO
create view V_METHODRESTRICTION as 
select   METHODRESTRICTION.METHODRESTRICTIONId
, OBJECTMODEId 
, 
 METHODRESTRICTION.Part  
Part 
, dbo.PART_BRIEF_F(METHODRESTRICTION.Part, NULL) 
Part_name 
, 
 METHODRESTRICTION.Method  
Method 
, dbo.SHAREDMETHOD_BRIEF_F(METHODRESTRICTION.Method, NULL) 
Method_name 
, 
 METHODRESTRICTION.IsRestricted  
IsRestricted 
, case METHODRESTRICTION.IsRestricted 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsRestricted_name 
, METHODRESTRICTION.METHODRESTRICTIONID ID 
, 'METHODRESTRICTION' VIEWBASE 

 from METHODRESTRICTION
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDRESTRICTION') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDRESTRICTION
GO
create view V_FIELDRESTRICTION as 
select   FIELDRESTRICTION.FIELDRESTRICTIONId
, OBJECTMODEId 
, 
 FIELDRESTRICTION.ThePart  
ThePart 
, dbo.PART_BRIEF_F(FIELDRESTRICTION.ThePart, NULL) 
ThePart_name 
, 
 FIELDRESTRICTION.TheField  
TheField 
, dbo.FIELD_BRIEF_F(FIELDRESTRICTION.TheField, NULL) 
TheField_name 
, 
 FIELDRESTRICTION.AllowRead  
AllowRead 
, case FIELDRESTRICTION.AllowRead 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowRead_name 
, 
 FIELDRESTRICTION.AllowModify  
AllowModify 
, case FIELDRESTRICTION.AllowModify 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowModify_name 
, 
 FIELDRESTRICTION.MandatoryField  
MandatoryField 
, case FIELDRESTRICTION.MandatoryField 
when -1 then 'Не существенно'
when 1 then 'Да'
when 0 then 'Нет'
 end 
MandatoryField_name 
, FIELDRESTRICTION.FIELDRESTRICTIONID ID 
, 'FIELDRESTRICTION' VIEWBASE 

 from FIELDRESTRICTION
GO
if exists (select * from sysobjects where id = object_id(N'V_TYPEMENU') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TYPEMENU
GO
create view V_TYPEMENU as 
select   TYPEMENU.TYPEMENUId
, OBJECTTYPEId 
, 
TYPEMENU.Name 
Name 
, 
TYPEMENU.Caption 
Caption 
, 
TYPEMENU.ToolTip 
ToolTip 
, 
 TYPEMENU.the_Action  
the_Action 
, dbo.SHAREDMETHOD_BRIEF_F(TYPEMENU.the_Action, NULL) 
the_Action_name 
, 
 TYPEMENU.IsMenuItem  
IsMenuItem 
, case TYPEMENU.IsMenuItem 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsMenuItem_name 
, 
 TYPEMENU.IsToolBarButton  
IsToolBarButton 
, case TYPEMENU.IsToolBarButton 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsToolBarButton_name 
, 
TYPEMENU.HotKey 
HotKey 
, TYPEMENU.TYPEMENUID ID 
, 'TYPEMENU' VIEWBASE 

 from TYPEMENU
GO
if exists (select * from sysobjects where id = object_id(N'V_INSTANCEVALIDATOR') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_INSTANCEVALIDATOR
GO
create view V_INSTANCEVALIDATOR as 
select   INSTANCEVALIDATOR.INSTANCEVALIDATORId
, OBJECTTYPEId 
, 
 INSTANCEVALIDATOR.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(INSTANCEVALIDATOR.Target, NULL) 
Target_name 
, 
INSTANCEVALIDATOR.Code 
Code 
, INSTANCEVALIDATOR.INSTANCEVALIDATORID ID 
, 'INSTANCEVALIDATOR' VIEWBASE 

 from INSTANCEVALIDATOR
GO
if exists (select * from sysobjects where id = object_id(N'V_PART') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PART
GO
create view V_PART as 
select   PART.PARTId
, OBJECTTYPEId 
, 
PART.Sequence 
Sequence 
, 
 PART.PartType  
PartType 
, case PART.PartType 
when 1 then 'Коллекция'
when 2 then 'Дерево'
when 0 then 'Строка'
when 4 then 'Расширение с данными'
when 3 then 'Расширение'
 end 
PartType_name 
, 
PART.Caption 
Caption 
, 
PART.Name 
Name 
, 
PART.the_Comment 
the_Comment 
, 
 PART.NoLog  
NoLog 
, case PART.NoLog 
when -1 then 'Да'
when 0 then 'Нет'
 end 
NoLog_name 
, 
 PART.ManualRegister  
ManualRegister 
, case PART.ManualRegister 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ManualRegister_name 
, 
 PART.OnCreate  
OnCreate 
, dbo.PARTMENU_BRIEF_F(PART.OnCreate, NULL) 
OnCreate_name 
, 
 PART.OnSave  
OnSave 
, dbo.PARTMENU_BRIEF_F(PART.OnSave, NULL) 
OnSave_name 
, 
 PART.OnRun  
OnRun 
, dbo.PARTMENU_BRIEF_F(PART.OnRun, NULL) 
OnRun_name 
, 
 PART.OnDelete  
OnDelete 
, dbo.PARTMENU_BRIEF_F(PART.OnDelete, NULL) 
OnDelete_name 
, 
 PART.AddBehaivor  
AddBehaivor 
, case PART.AddBehaivor 
when 0 then 'AddForm'
when 2 then 'RunAction'
when 1 then 'RefreshOnly'
 end 
AddBehaivor_name 
, 
 PART.ExtenderObject  
ExtenderObject 
, 'не поддерживается' 
ExtenderObject_name 
, 
PART.shablonBrief 
shablonBrief 
, 
PART.ruleBrief 
ruleBrief 
, 
 PART.IsJormalChange  
IsJormalChange 
, case PART.IsJormalChange 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsJormalChange_name 
, 
 PART.UseArchiving  
UseArchiving 
, case PART.UseArchiving 
when -1 then 'Да'
when 0 then 'Нет'
 end 
UseArchiving_name 
, 
 PART.integerpkey  
integerpkey 
, case PART.integerpkey 
when -1 then 'Да'
when 0 then 'Нет'
 end 
integerpkey_name 
, 
PART.partIconCls 
partIconCls 
, PART.PARTID ID 
, 'PART' VIEWBASE 

 from PART
GO
if exists (select * from sysobjects where id = object_id(N'V_PARTMENU') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PARTMENU
GO
create view V_PARTMENU as 
select   PARTMENU.PARTMENUId
, PARTId 
, 
PARTMENU.Name 
Name 
, 
PARTMENU.Caption 
Caption 
, 
PARTMENU.ToolTip 
ToolTip 
, 
 PARTMENU.the_Action  
the_Action 
, dbo.SHAREDMETHOD_BRIEF_F(PARTMENU.the_Action, NULL) 
the_Action_name 
, 
 PARTMENU.IsMenuItem  
IsMenuItem 
, case PARTMENU.IsMenuItem 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsMenuItem_name 
, 
 PARTMENU.IsToolBarButton  
IsToolBarButton 
, case PARTMENU.IsToolBarButton 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsToolBarButton_name 
, 
PARTMENU.HotKey 
HotKey 
, PARTMENU.PARTMENUID ID 
, 'PARTMENU' VIEWBASE 

 from PARTMENU
GO
if exists (select * from sysobjects where id = object_id(N'V_PARTPARAMMAP') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PARTPARAMMAP
GO
create view V_PARTPARAMMAP as 
select   PARTPARAMMAP.PARTPARAMMAPId
, PARTMENUId 
, 
PARTPARAMMAP.FieldName 
FieldName 
, 
PARTPARAMMAP.ParamName 
ParamName 
, 
 PARTPARAMMAP.NoEdit  
NoEdit 
, case PARTPARAMMAP.NoEdit 
when -1 then 'Да'
when 0 then 'Нет'
 end 
NoEdit_name 
, PARTPARAMMAP.PARTPARAMMAPID ID 
, 'PARTPARAMMAP' VIEWBASE 

 from PARTPARAMMAP
GO
if exists (select * from sysobjects where id = object_id(N'V_PARTVIEW') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PARTVIEW
GO
create view V_PARTVIEW as 
select   PARTVIEW.PARTVIEWId
, PARTId 
, 
PARTVIEW.Name 
Name 
, 
PARTVIEW.the_Alias 
the_Alias 
, 
 PARTVIEW.ForChoose  
ForChoose 
, case PARTVIEW.ForChoose 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ForChoose_name 
, 
PARTVIEW.FilterField0 
FilterField0 
, 
PARTVIEW.FilterField1 
FilterField1 
, 
PARTVIEW.FilterField2 
FilterField2 
, 
PARTVIEW.FilterField3 
FilterField3 
, PARTVIEW.PARTVIEWID ID 
, 'PARTVIEW' VIEWBASE 

 from PARTVIEW
GO
if exists (select * from sysobjects where id = object_id(N'V_ViewColumn') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ViewColumn
GO
create view V_ViewColumn as 
select   ViewColumn.ViewColumnId
, PARTVIEWId 
, 
ViewColumn.sequence 
sequence 
, 
ViewColumn.Name 
Name 
, 
ViewColumn.the_Alias 
the_Alias 
, 
 ViewColumn.FromPart  
FromPart 
, dbo.PART_BRIEF_F(ViewColumn.FromPart, NULL) 
FromPart_name 
, 
 ViewColumn.Field  
Field 
, dbo.FIELD_BRIEF_F(ViewColumn.Field, NULL) 
Field_name 
, 
 ViewColumn.Aggregation  
Aggregation 
, case ViewColumn.Aggregation 
when 3 then 'SUM'
when 1 then 'AVG'
when 6 then 'CUSTOM'
when 0 then 'none'
when 2 then 'COUNT'
when 5 then 'MAX'
when 4 then 'MIN'
 end 
Aggregation_name 
, 
ViewColumn.Expression 
Expression 
, 
 ViewColumn.ForCombo  
ForCombo 
, case ViewColumn.ForCombo 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ForCombo_name 
, ViewColumn.ViewColumnID ID 
, 'ViewColumn' VIEWBASE 

 from ViewColumn
GO
if exists (select * from sysobjects where id = object_id(N'V_PARTVIEW_LNK') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PARTVIEW_LNK
GO
create view V_PARTVIEW_LNK as 
select   PARTVIEW_LNK.PARTVIEW_LNKId
, PARTVIEWId 
, 
 PARTVIEW_LNK.TheView  
TheView 
, dbo.PARTVIEW_BRIEF_F(PARTVIEW_LNK.TheView, NULL) 
TheView_name 
, 
 PARTVIEW_LNK.TheJoinSource  
TheJoinSource 
, dbo.ViewColumn_BRIEF_F(PARTVIEW_LNK.TheJoinSource, NULL) 
TheJoinSource_name 
, 
 PARTVIEW_LNK.RefType  
RefType 
, case PARTVIEW_LNK.RefType 
when 0 then 'Нет'
when 4 then 'Связка ParentStructRowID  (в передлах объекта)'
when 3 then 'Связка InstanceID (в передлах объекта)'
when 1 then 'Ссылка на объект'
when 2 then 'Ссылка на строку'
 end 
RefType_name 
, 
 PARTVIEW_LNK.TheJoinDestination  
TheJoinDestination 
, dbo.ViewColumn_BRIEF_F(PARTVIEW_LNK.TheJoinDestination, NULL) 
TheJoinDestination_name 
, 
PARTVIEW_LNK.HandJoin 
HandJoin 
, 
PARTVIEW_LNK.SEQ 
SEQ 
, PARTVIEW_LNK.PARTVIEW_LNKID ID 
, 'PARTVIEW_LNK' VIEWBASE 

 from PARTVIEW_LNK
GO
if exists (select * from sysobjects where id = object_id(N'V_VALIDATOR') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_VALIDATOR
GO
create view V_VALIDATOR as 
select   VALIDATOR.VALIDATORId
, PARTId 
, 
 VALIDATOR.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(VALIDATOR.Target, NULL) 
Target_name 
, 
VALIDATOR.Code 
Code 
, VALIDATOR.VALIDATORID ID 
, 'VALIDATOR' VIEWBASE 

 from VALIDATOR
GO
if exists (select * from sysobjects where id = object_id(N'V_UNIQUECONSTRAINT') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_UNIQUECONSTRAINT
GO
create view V_UNIQUECONSTRAINT as 
select   UNIQUECONSTRAINT.UNIQUECONSTRAINTId
, PARTId 
, 
UNIQUECONSTRAINT.Name 
Name 
, 
 UNIQUECONSTRAINT.PerParent  
PerParent 
, case UNIQUECONSTRAINT.PerParent 
when -1 then 'Да'
when 0 then 'Нет'
 end 
PerParent_name 
, 
UNIQUECONSTRAINT.TheComment 
TheComment 
, UNIQUECONSTRAINT.UNIQUECONSTRAINTID ID 
, 'UNIQUECONSTRAINT' VIEWBASE 

 from UNIQUECONSTRAINT
GO
if exists (select * from sysobjects where id = object_id(N'V_CONSTRAINTFIELD') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_CONSTRAINTFIELD
GO
create view V_CONSTRAINTFIELD as 
select   CONSTRAINTFIELD.CONSTRAINTFIELDId
, UNIQUECONSTRAINTId 
, 
 CONSTRAINTFIELD.TheField  
TheField 
, dbo.FIELD_BRIEF_F(CONSTRAINTFIELD.TheField, NULL) 
TheField_name 
, CONSTRAINTFIELD.CONSTRAINTFIELDID ID 
, 'CONSTRAINTFIELD' VIEWBASE 

 from CONSTRAINTFIELD
GO
if exists (select * from sysobjects where id = object_id(N'V_ExtenderInterface') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ExtenderInterface
GO
create view V_ExtenderInterface as 
select   ExtenderInterface.ExtenderInterfaceId
, PARTId 
, 
ExtenderInterface.TheName 
TheName 
, 
 ExtenderInterface.TargetPlatform  
TargetPlatform 
, dbo.GENERATOR_TARGET_BRIEF_F(ExtenderInterface.TargetPlatform, NULL) 
TargetPlatform_name 
, 
ExtenderInterface.TheObject 
TheObject 
, 
ExtenderInterface.TheConfig 
TheConfig 
, ExtenderInterface.ExtenderInterfaceID ID 
, 'ExtenderInterface' VIEWBASE 

 from ExtenderInterface
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELD') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELD
GO
create view V_FIELD as 
select   FIELD.FIELDId
, PARTId 
, 
FIELD.TabName 
TabName 
, 
FIELD.FieldGroupBox 
FieldGroupBox 
, 
FIELD.Sequence 
Sequence 
, 
FIELD.Caption 
Caption 
, 
FIELD.Name 
Name 
, 
 FIELD.FieldType  
FieldType 
, dbo.FIELDTYPE_BRIEF_F(FIELD.FieldType, NULL) 
FieldType_name 
, 
 FIELD.IsBrief  
IsBrief 
, case FIELD.IsBrief 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsBrief_name 
, 
 FIELD.IsTabBrief  
IsTabBrief 
, case FIELD.IsTabBrief 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsTabBrief_name 
, 
 FIELD.AllowNull  
AllowNull 
, case FIELD.AllowNull 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowNull_name 
, 
FIELD.DataSize 
DataSize 
, 
 FIELD.ReferenceType  
ReferenceType 
, case FIELD.ReferenceType 
when 3 then 'На источник данных'
when 0 then 'Скалярное поле ( не ссылка)'
when 2 then 'На строку раздела'
when 1 then 'На объект '
 end 
ReferenceType_name 
, 
 FIELD.RefToType  
RefToType 
, dbo.OBJECTTYPE_BRIEF_F(FIELD.RefToType, NULL) 
RefToType_name 
, 
 FIELD.RefToPart  
RefToPart 
, dbo.PART_BRIEF_F(FIELD.RefToPart, NULL) 
RefToPart_name 
, 
FIELD.TheStyle 
TheStyle 
, 
 FIELD.InternalReference  
InternalReference 
, case FIELD.InternalReference 
when -1 then 'Да'
when 0 then 'Нет'
 end 
InternalReference_name 
, 
 FIELD.CreateRefOnly  
CreateRefOnly 
, case FIELD.CreateRefOnly 
when -1 then 'Да'
when 0 then 'Нет'
 end 
CreateRefOnly_name 
, 
 FIELD.IsAutoNumber  
IsAutoNumber 
, case FIELD.IsAutoNumber 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsAutoNumber_name 
, 
 FIELD.TheNumerator  
TheNumerator 
, 'не поддерживается' 
TheNumerator_name 
, 
FIELD.ZoneTemplate 
ZoneTemplate 
, 
 FIELD.NumberDateField  
NumberDateField 
, dbo.FIELD_BRIEF_F(FIELD.NumberDateField, NULL) 
NumberDateField_name 
, 
FIELD.TheComment 
TheComment 
, 
FIELD.shablonBrief 
shablonBrief 
, 
FIELD.theNameClass 
theNameClass 
, 
FIELD.TheMask 
TheMask 
, FIELD.FIELDID ID 
, 'FIELD' VIEWBASE 

 from FIELD
GO
if exists (select * from sysobjects where id = object_id(N'V_FldExtenders') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FldExtenders
GO
create view V_FldExtenders as 
select   FldExtenders.FldExtendersId
, FIELDId 
, 
FldExtenders.TheName 
TheName 
, 
 FldExtenders.TargetPlatform  
TargetPlatform 
, dbo.GENERATOR_TARGET_BRIEF_F(FldExtenders.TargetPlatform, NULL) 
TargetPlatform_name 
, 
FldExtenders.TheObject 
TheObject 
, 
FldExtenders.TheConfig 
TheConfig 
, FldExtenders.FldExtendersID ID 
, 'FldExtenders' VIEWBASE 

 from FldExtenders
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDSRCDEF') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDSRCDEF
GO
create view V_FIELDSRCDEF as 
select   FIELDSRCDEF.FIELDSRCDEFId
, FIELDId 
, 
FIELDSRCDEF.Provider 
Provider 
, 
FIELDSRCDEF.ConnectionString 
ConnectionString 
, 
FIELDSRCDEF.DataSource 
DataSource 
, 
FIELDSRCDEF.IDField 
IDField 
, 
FIELDSRCDEF.BriefString 
BriefString 
, 
FIELDSRCDEF.FilterString 
FilterString 
, 
FIELDSRCDEF.SortField 
SortField 
, 
FIELDSRCDEF.DescriptionString 
DescriptionString 
, 
 FIELDSRCDEF.DontShowDialog  
DontShowDialog 
, case FIELDSRCDEF.DontShowDialog 
when 1 then 'Да'
when 0 then 'Нет'
 end 
DontShowDialog_name 
, FIELDSRCDEF.FIELDSRCDEFID ID 
, 'FIELDSRCDEF' VIEWBASE 

 from FIELDSRCDEF
GO
if exists (select * from sysobjects where id = object_id(N'V_DINAMICFILTERSCRIPT') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_DINAMICFILTERSCRIPT
GO
create view V_DINAMICFILTERSCRIPT as 
select   DINAMICFILTERSCRIPT.DINAMICFILTERSCRIPTId
, FIELDId 
, 
 DINAMICFILTERSCRIPT.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(DINAMICFILTERSCRIPT.Target, NULL) 
Target_name 
, 
DINAMICFILTERSCRIPT.Code 
Code 
, DINAMICFILTERSCRIPT.DINAMICFILTERSCRIPTID ID 
, 'DINAMICFILTERSCRIPT' VIEWBASE 

 from DINAMICFILTERSCRIPT
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDEXPRESSION') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDEXPRESSION
GO
create view V_FIELDEXPRESSION as 
select   FIELDEXPRESSION.FIELDEXPRESSIONId
, FIELDId 
, 
 FIELDEXPRESSION.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(FIELDEXPRESSION.Target, NULL) 
Target_name 
, 
FIELDEXPRESSION.Code 
Code 
, FIELDEXPRESSION.FIELDEXPRESSIONID ID 
, 'FIELDEXPRESSION' VIEWBASE 

 from FIELDEXPRESSION
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDVALIDATOR') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDVALIDATOR
GO
create view V_FIELDVALIDATOR as 
select   FIELDVALIDATOR.FIELDVALIDATORId
, FIELDId 
, 
 FIELDVALIDATOR.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(FIELDVALIDATOR.Target, NULL) 
Target_name 
, 
FIELDVALIDATOR.Code 
Code 
, FIELDVALIDATOR.FIELDVALIDATORID ID 
, 'FIELDVALIDATOR' VIEWBASE 

 from FIELDVALIDATOR
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDMENU') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDMENU
GO
create view V_FIELDMENU as 
select   FIELDMENU.FIELDMENUId
, FIELDId 
, 
FIELDMENU.Name 
Name 
, 
FIELDMENU.Caption 
Caption 
, 
FIELDMENU.ToolTip 
ToolTip 
, 
 FIELDMENU.ActionID  
ActionID 
, dbo.SHAREDMETHOD_BRIEF_F(FIELDMENU.ActionID, NULL) 
ActionID_name 
, 
 FIELDMENU.IsMenuItem  
IsMenuItem 
, case FIELDMENU.IsMenuItem 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsMenuItem_name 
, 
 FIELDMENU.IsToolBarButton  
IsToolBarButton 
, case FIELDMENU.IsToolBarButton 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsToolBarButton_name 
, 
FIELDMENU.HotKey 
HotKey 
, FIELDMENU.FIELDMENUID ID 
, 'FIELDMENU' VIEWBASE 

 from FIELDMENU
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDPARAMMAP') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDPARAMMAP
GO
create view V_FIELDPARAMMAP as 
select   FIELDPARAMMAP.FIELDPARAMMAPId
, FIELDMENUId 
, 
FIELDPARAMMAP.FieldName 
FieldName 
, 
FIELDPARAMMAP.ParamName 
ParamName 
, 
 FIELDPARAMMAP.NoEdit  
NoEdit 
, case FIELDPARAMMAP.NoEdit 
when -1 then 'Да'
when 0 then 'Нет'
 end 
NoEdit_name 
, FIELDPARAMMAP.FIELDPARAMMAPID ID 
, 'FIELDPARAMMAP' VIEWBASE 

 from FIELDPARAMMAP
GO
if exists (select * from sysobjects where id = object_id(N'V_MTZAPP') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_MTZAPP
GO
create view V_MTZAPP as 
select   MTZAPP.MTZAPPId
, 
MTZAPP.Name 
Name 
, 
MTZAPP.DBName 
DBName 
, 
MTZAPP.TheComment 
TheComment 
, MTZAPP.MTZAPPID ID 
, 'MTZAPP' VIEWBASE 

 from MTZAPP
GO
if exists (select * from sysobjects where id = object_id(N'V_ParentPackage') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ParentPackage
GO
create view V_ParentPackage as 
select   ParentPackage.ParentPackageId
, MTZAPPId 
, 
 ParentPackage.Package  
Package 
, dbo.MTZAPP_BRIEF_F(ParentPackage.Package, NULL) 
Package_name 
, ParentPackage.ParentPackageID ID 
, 'ParentPackage' VIEWBASE 

 from ParentPackage
GO
if exists (select * from sysobjects where id = object_id(N'V_the_Session') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_the_Session
GO
create view V_the_Session as 
select   the_Session.the_SessionId
, 
 the_Session.ApplicationID  
ApplicationID 
, dbo.WorkPlace_BRIEF_F(the_Session.ApplicationID, NULL) 
ApplicationID_name 
, 
 the_Session.UserRole  
UserRole 
, dbo.Groups_BRIEF_F(the_Session.UserRole, NULL) 
UserRole_name 
, 
the_Session.ClosedAt 
ClosedAt 
, 
 the_Session.Closed  
Closed 
, case the_Session.Closed 
when 1 then 'Да'
when 0 then 'Нет'
 end 
Closed_name 
, 
 the_Session.Usersid  
Usersid 
, dbo.Users_BRIEF_F(the_Session.Usersid, NULL) 
Usersid_name 
, 
the_Session.LastAccess 
LastAccess 
, 
the_Session.StartAt 
StartAt 
, 
the_Session.Lang 
Lang 
, 
the_Session.Login 
Login 
, the_Session.the_SessionID ID 
, 'the_Session' VIEWBASE 

 from the_Session
GO
if exists (select * from sysobjects where id = object_id(N'V_SysRefCache') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_SysRefCache
GO
create view V_SysRefCache as 
select   SysRefCache.SysRefCacheId
, 
 SysRefCache.CacheType  
CacheType 
, case SysRefCache.CacheType 
when 4 then 'Space'
when 3 then 'Mark'
when 2 then 'Odd'
when 0 then 'None'
when 1 then 'Even'
 end 
CacheType_name 
, 
SysRefCache.ObjectOwnerID 
ObjectOwnerID 
, 
 SysRefCache.SessionID  
SessionID 
, dbo.the_Session_BRIEF_F(SysRefCache.SessionID, NULL) 
SessionID_name 
, 
SysRefCache.modulename 
modulename 
, SysRefCache.SysRefCacheID ID 
, 'SysRefCache' VIEWBASE 

 from SysRefCache
GO
if exists (select * from sysobjects where id = object_id(N'V_SysLog') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_SysLog
GO
create view V_SysLog as 
select   SysLog.SysLogId
, 
 SysLog.TheSession  
TheSession 
, dbo.the_Session_BRIEF_F(SysLog.TheSession, NULL) 
TheSession_name 
, 
SysLog.the_Resource 
the_Resource 
, 
SysLog.LogStructID 
LogStructID 
, 
SysLog.VERB 
VERB 
, 
SysLog.LogInstanceID 
LogInstanceID 
, SysLog.SysLogID ID 
, 'SysLog' VIEWBASE 

 from SysLog
GO
if exists (select * from sysobjects where id = object_id(N'V_XLevel') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XLevel
GO
create view V_XLevel as 
select   XLevel.XLevelId
, 
XLevel.name 
name 
, XLevel.XLevelID ID 
, 'XLevel' VIEWBASE 

 from XLevel
GO
if exists (select * from sysobjects where id = object_id(N'V_XSubject') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XSubject
GO
create view V_XSubject as 
select   XSubject.XSubjectId
, 
XSubject.name 
name 
, XSubject.XSubjectID ID 
, 'XSubject' VIEWBASE 

 from XSubject
GO
if exists (select * from sysobjects where id = object_id(N'V_XVendor') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XVendor
GO
create view V_XVendor as 
select   XVendor.XVendorId
, 
XVendor.name 
name 
, XVendor.XVendorID ID 
, 'XVendor' VIEWBASE 

 from XVendor
GO
if exists (select * from sysobjects where id = object_id(N'V_XStatus') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XStatus
GO
create view V_XStatus as 
select   XStatus.XStatusId
, 
XStatus.name 
name 
, XStatus.XStatusID ID 
, 'XStatus' VIEWBASE 

 from XStatus
GO
if exists (select * from sysobjects where id = object_id(N'V_XSubscriptionType') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_XSubscriptionType
GO
create view V_XSubscriptionType as 
select   XSubscriptionType.XSubscriptionTypeId
, 
XSubscriptionType.name 
name 
, XSubscriptionType.XSubscriptionTypeID ID 
, 'XSubscriptionType' VIEWBASE 

 from XSubscriptionType
GO
if exists (select * from sysobjects where id = object_id(N'V_Users') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Users
GO
create view V_Users as 
select   Users.UsersId
, 
Users.Family 
Family 
, 
Users.Name 
Name 
, 
Users.SurName 
SurName 
, 
Users.Login 
Login 
, 
Users.Password 
Password 
, 
Users.DomaiName 
DomaiName 
, 
Users.EMail 
EMail 
, 
Users.Phone 
Phone 
, 
Users.LocalPhone 
LocalPhone 
, Users.UsersID ID 
, 'Users' VIEWBASE 

 from Users
GO
if exists (select * from sysobjects where id = object_id(N'V_Groups') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Groups
GO
create view V_Groups as 
select   Groups.GroupsId
, 
Groups.Name 
Name 
, 
Groups.ADGroup 
ADGroup 
, Groups.GroupsID ID 
, 'Groups' VIEWBASE 

 from Groups
GO
if exists (select * from sysobjects where id = object_id(N'V_GroupUser') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GroupUser
GO
create view V_GroupUser as 
select   GroupUser.GroupUserId
, GroupsId 
, 
 GroupUser.TheUser  
TheUser 
, dbo.Users_BRIEF_F(GroupUser.TheUser, NULL) 
TheUser_name 
, GroupUser.GroupUserID ID 
, 'GroupUser' VIEWBASE 

 from GroupUser
GO
if exists (select * from sysobjects where id = object_id(N'V_TestGroup') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestGroup
GO
create view V_TestGroup as 
select   TestGroup.TestGroupId
, 
TestGroup.name 
name 
, TestGroup.TestGroupID ID 
, 'TestGroup' VIEWBASE 

 from TestGroup
GO
if exists (select * from sysobjects where id = object_id(N'V_TestBlockType') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestBlockType
GO
create view V_TestBlockType as 
select   TestBlockType.TestBlockTypeId
, 
TestBlockType.name 
name 
, TestBlockType.TestBlockTypeID ID 
, 'TestBlockType' VIEWBASE 

 from TestBlockType
GO
if exists (select * from sysobjects where id = object_id(N'V_testLevelName') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_testLevelName
GO
create view V_testLevelName as 
select   testLevelName.testLevelNameId
, 
testLevelName.name 
name 
, testLevelName.testLevelNameID ID 
, 'testLevelName' VIEWBASE 

 from testLevelName
GO
if exists (select * from sysobjects where id = object_id(N'V_TestFileType') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestFileType
GO
create view V_TestFileType as 
select   TestFileType.TestFileTypeId
, 
TestFileType.name 
name 
, TestFileType.TestFileTypeID ID 
, 'TestFileType' VIEWBASE 

 from TestFileType
GO
if exists (select * from sysobjects where id = object_id(N'V_testPlayer') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_testPlayer
GO
create view V_testPlayer as 
select   testPlayer.testPlayerId
, 
testPlayer.name 
name 
, testPlayer.testPlayerID ID 
, 'testPlayer' VIEWBASE 

 from testPlayer
GO
if exists (select * from sysobjects where id = object_id(N'V_TestQuestionType') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestQuestionType
GO
create view V_TestQuestionType as 
select   TestQuestionType.TestQuestionTypeId
, 
TestQuestionType.name 
name 
, 
 TestQuestionType.answerFromList  
answerFromList 
, case TestQuestionType.answerFromList 
when -1 then 'Не существенно'
when 1 then 'Да'
when 0 then 'Нет'
 end 
answerFromList_name 
, 
 TestQuestionType.onlyOneAnswer  
onlyOneAnswer 
, case TestQuestionType.onlyOneAnswer 
when -1 then 'Не существенно'
when 1 then 'Да'
when 0 then 'Нет'
 end 
onlyOneAnswer_name 
, 
 TestQuestionType.audioQuestion  
audioQuestion 
, case TestQuestionType.audioQuestion 
when 1 then 'Да'
when 0 then 'Нет'
 end 
audioQuestion_name 
, 
 TestQuestionType.allowOtherFiled  
allowOtherFiled 
, case TestQuestionType.allowOtherFiled 
when -1 then 'Не существенно'
when 1 then 'Да'
when 0 then 'Нет'
 end 
allowOtherFiled_name 
, 
 TestQuestionType.answerAsText  
answerAsText 
, case TestQuestionType.answerAsText 
when -1 then 'Не существенно'
when 1 then 'Да'
when 0 then 'Нет'
 end 
answerAsText_name 
, 
 TestQuestionType.answerAsFile  
answerAsFile 
, case TestQuestionType.answerAsFile 
when -1 then 'Не существенно'
when 1 then 'Да'
when 0 then 'Нет'
 end 
answerAsFile_name 
, 
 TestQuestionType.answerAsAudio  
answerAsAudio 
, case TestQuestionType.answerAsAudio 
when -1 then 'Не существенно'
when 1 then 'Да'
when 0 then 'Нет'
 end 
answerAsAudio_name 
, TestQuestionType.TestQuestionTypeID ID 
, 'TestQuestionType' VIEWBASE 

 from TestQuestionType
GO
if exists (select * from sysobjects where id = object_id(N'V_TestDescription') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestDescription
GO
create view V_TestDescription as 
select   TestDescription.TestDescriptionId
, 
TestDescription.name 
name 
, 
 TestDescription.theGroup  
theGroup 
, dbo.TestGroup_BRIEF_F(TestDescription.theGroup, NULL) 
theGroup_name 
, 
TestDescription.info 
info 
, 
 TestDescription.testLevel  
testLevel 
, dbo.testLevelName_BRIEF_F(TestDescription.testLevel, NULL) 
testLevel_name 
, 
TestDescription.testCost 
testCost 
, 
 TestDescription.readyForUse  
readyForUse 
, case TestDescription.readyForUse 
when 1 then 'Да'
when 0 then 'Нет'
 end 
readyForUse_name 
, 
 TestDescription.isPublic  
isPublic 
, case TestDescription.isPublic 
when 1 then 'Да'
when 0 then 'Нет'
 end 
isPublic_name 
, TestDescription.TestDescriptionID ID 
, 'TestDescription' VIEWBASE 

 from TestDescription
GO
if exists (select * from sysobjects where id = object_id(N'V_TestModuleDefinition') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestModuleDefinition
GO
create view V_TestModuleDefinition as 
select   TestModuleDefinition.TestModuleDefinitionId
, TestDescriptionId 
, 
TestModuleDefinition.name 
name 
, 
TestModuleDefinition.reglament 
reglament 
, 
TestModuleDefinition.moduleTime 
moduleTime 
, 
TestModuleDefinition.sequence 
sequence 
, 
TestModuleDefinition.moduleCost 
moduleCost 
, 
TestModuleDefinition.moduleCost2 
moduleCost2 
, TestModuleDefinition.TestModuleDefinitionID ID 
, 'TestModuleDefinition' VIEWBASE 

 from TestModuleDefinition
GO
if exists (select * from sysobjects where id = object_id(N'V_TestModuleContent') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TestModuleContent
GO
create view V_TestModuleContent as 
select   TestModuleContent.TestModuleContentId
, TestModuleDefinitionId 
, 
 TestModuleContent.BlockType  
BlockType 
, dbo.TestBlockType_BRIEF_F(TestModuleContent.BlockType, NULL) 
BlockType_name 
, 
TestModuleContent.blockCount 
blockCount 
, TestModuleContent.TestModuleContentID ID 
, 'TestModuleContent' VIEWBASE 

 from TestModuleContent
GO
if exists (select * from sysobjects where id = object_id(N'V_CheckFormInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_CheckFormInfo
GO
create view V_CheckFormInfo as 
select   CheckFormInfo.CheckFormInfoId
, 
CheckFormInfo.name 
name 
, CheckFormInfo.CheckFormInfoID ID 
, 'CheckFormInfo' VIEWBASE 

 from CheckFormInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_CheckFormField') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_CheckFormField
GO
create view V_CheckFormField as 
select   CheckFormField.CheckFormFieldId
, CheckFormInfoId 
, 
CheckFormField.sequence 
sequence 
, 
CheckFormField.fName 
fName 
, 
CheckFormField.maxCnt 
maxCnt 
, 
CheckFormField.itemCost 
itemCost 
, 
 CheckFormField.ismain  
ismain 
, case CheckFormField.ismain 
when 1 then 'Да'
when 0 then 'Нет'
 end 
ismain_name 
, CheckFormField.CheckFormFieldID ID 
, 'CheckFormField' VIEWBASE 

 from CheckFormField
GO
if exists (select * from sysobjects where id = object_id(N'V_examFiles') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_examFiles
GO
create view V_examFiles as 
select   examFiles.examFilesId
, examInfoId 
, 
examFiles.originalName 
originalName 
, 
examFiles.filePath 
filePath 
, 
 examFiles.fileType  
fileType 
, dbo.TestFileType_BRIEF_F(examFiles.fileType, NULL) 
fileType_name 
, 
examFiles.fileComment 
fileComment 
, examFiles.examFilesID ID 
, 'examFiles' VIEWBASE 

 from examFiles
GO
if exists (select * from sysobjects where id = object_id(N'V_examPersons') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_examPersons
GO
create view V_examPersons as 
select   examPersons.examPersonsId
, examInfoId 
, 
 examPersons.testable  
testable 
, dbo.TestPersonInfo_BRIEF_F(examPersons.testable, NULL) 
testable_name 
, 
 examPersons.examPassed  
examPassed 
, case examPersons.examPassed 
when 1 then 'Да'
when 0 then 'Нет'
 end 
examPassed_name 
, examPersons.examPersonsID ID 
, 'examPersons' VIEWBASE 

 from examPersons
GO
if exists (select * from sysobjects where id = object_id(N'V_examTestScore') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_examTestScore
GO
create view V_examTestScore as 
select   examTestScore.examTestScoreId
, examPersonsId 
, 
 examTestScore.theTest  
theTest 
, dbo.TestDescription_BRIEF_F(examTestScore.theTest, NULL) 
theTest_name 
, 
examTestScore.moduleScore 
moduleScore 
, 
examTestScore.okScore 
okScore 
, 
examTestScore.maxScore 
maxScore 
, examTestScore.examTestScoreID ID 
, 'examTestScore' VIEWBASE 

 from examTestScore
GO
if exists (select * from sysobjects where id = object_id(N'V_examSubtest') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_examSubtest
GO
create view V_examSubtest as 
select   examSubtest.examSubtestId
, examPersonsId 
, 
examSubtest.test_name 
test_name 
, 
examSubtest.name 
name 
, 
examSubtest.testJSON 
testJSON 
, 
 examSubtest.testPlayer  
testPlayer 
, dbo.testPlayer_BRIEF_F(examSubtest.testPlayer, NULL) 
testPlayer_name 
, 
examSubtest.subtestAnswers 
subtestAnswers 
, 
 examSubtest.needCheck  
needCheck 
, case examSubtest.needCheck 
when -1 then 'Да'
when 0 then 'Нет'
 end 
needCheck_name 
, 
 examSubtest.subtestFinished  
subtestFinished 
, case examSubtest.subtestFinished 
when 1 then 'Да'
when 0 then 'Нет'
 end 
subtestFinished_name 
, 
 examSubtest.subtestChecked  
subtestChecked 
, case examSubtest.subtestChecked 
when 1 then 'Да'
when 0 then 'Нет'
 end 
subtestChecked_name 
, 
 examSubtest.checkPerson  
checkPerson 
, dbo.TestPersonInfo_BRIEF_F(examSubtest.checkPerson, NULL) 
checkPerson_name 
, 
examSubtest.subtestScore 
subtestScore 
, 
examSubtest.okScore 
okScore 
, 
examSubtest.maxScore 
maxScore 
, 
 examSubtest.TestRef  
TestRef 
, dbo.TestDescription_BRIEF_F(examSubtest.TestRef, NULL) 
TestRef_name 
, 
 examSubtest.subtest  
subtest 
, dbo.TestModuleDefinition_BRIEF_F(examSubtest.subtest, NULL) 
subtest_name 
, 
examSubtest.checkLog 
checkLog 
, examSubtest.examSubtestID ID 
, 'examSubtest' VIEWBASE 

 from examSubtest
GO
if exists (select * from sysobjects where id = object_id(N'V_examAnswerFile') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_examAnswerFile
GO
create view V_examAnswerFile as 
select   examAnswerFile.examAnswerFileId
, examSubtestId 
, 
examAnswerFile.originalName 
originalName 
, 
examAnswerFile.filePath 
filePath 
, 
 examAnswerFile.fileType  
fileType 
, dbo.TestFileType_BRIEF_F(examAnswerFile.fileType, NULL) 
fileType_name 
, 
examAnswerFile.fileComment 
fileComment 
, 
examAnswerFile.theCode 
theCode 
, examAnswerFile.examAnswerFileID ID 
, 'examAnswerFile' VIEWBASE 

 from examAnswerFile
GO
if exists (select * from sysobjects where id = object_id(N'V_examInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_examInfo
GO
create view V_examInfo as 
select   examInfo.examInfoId
, 
 examInfo.theCert  
theCert 
, dbo.certInfo_BRIEF_F(examInfo.theCert, NULL) 
theCert_name 
, 
examInfo.examDate 
examDate 
, 
examInfo.startTime 
startTime 
, 
 examInfo.allowRecord  
allowRecord 
, case examInfo.allowRecord 
when 1 then 'Да'
when 0 then 'Нет'
 end 
allowRecord_name 
, 
 examInfo.examStarted  
examStarted 
, case examInfo.examStarted 
when 1 then 'Да'
when 0 then 'Нет'
 end 
examStarted_name 
, 
 examInfo.examStopped  
examStopped 
, case examInfo.examStopped 
when 1 then 'Да'
when 0 then 'Нет'
 end 
examStopped_name 
, 
examInfo.examGroup 
examGroup 
, 
 examInfo.theORG  
theORG 
, dbo.OrganizationInfo_BRIEF_F(examInfo.theORG, NULL) 
theORG_name 
, examInfo.examInfoID ID 
, 'examInfo' VIEWBASE 

 from examInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_examTest') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_examTest
GO
create view V_examTest as 
select   examTest.examTestId
, examInfoId 
, 
 examTest.theTest  
theTest 
, dbo.TestDescription_BRIEF_F(examTest.theTest, NULL) 
theTest_name 
, 
examTest.variantsNumber 
variantsNumber 
, examTest.examTestID ID 
, 'examTest' VIEWBASE 

 from examTest
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
</root>